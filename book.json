[{"url":"/ru/php/book/prime/basis/intro/","content":"\n\t\t\t\t<h1>Введение в язык PHP для новичков</h1>\n\t\t\t\t<div class=\"content\">\n<!--\n<p>\n\tЯзык PHP предназначен для генерации\n</p>\n-->\n\n<h2>Как запустить PHP</h2>\n<p>\n\tДля запуска PHP локально на вашем компьютере\n\tнеобходима программа-сервер. Для windows\n\tлучший вариант - <a href=\"https://ospanel.io/\">OpenServer</a>,\n\tдля linux - <a href=\"https://help.ubuntu.ru/wiki/lamp\">LAMP</a>,\n\tдля macos - <a href=\"https://www.mamp.info/ru/\">MAMP</a>.\n</p>\n<p>\n\tУстановка такого сервера займет некоторое\n\tвремя. Чтобы не останавливаться в обучении,\n\tвыполняйте пока PHP код в онлайн редакторе,\n\tнапример, в <a href=\"https://www.writephponline.com/\">этом</a>.\n</p>\n\n<h2>Как выполнить PHP</h2>\n<p>\n\tПусть у вас уже есть установленный PHP сервер.\n\tВ нем ваши программы будут располагаться\n\tв файлах с расширением <code class=\"path inline\">php</code>. Эти файлы\n\tна самом деле представляют собой обычные\n\tHTML файлы, в которых мы можем писать HTML\n\tкод наших страниц, вот так:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"utf-8\"&gt;\n\t\t&lt;title&gt;Моя первая программа&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\tмоя первая программа\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tВ этих файлах прямо внутри HTML кода мы можем\n\tписать PHP код. Он пишется в специальных\n\tскобках <code class=\"code inline\">&lt;?php</code> и <code class=\"code inline\">?&gt;</code>. Давайте\n\tсделаем это:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=\"utf-8\"&gt;\n\t\t&lt;title&gt;Моя первая программа&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;?php\n\t\t\techo 'моя первая программа';\n\t\t?&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tЕсли запустить этот файл через PHP сервер,\n\tто сервер выполнит команды PHP и результат\n\tотправит в браузер. Команда <code class=\"code inline\">echo</code>,\n\tкоторую вы там можете увидеть, просто выполняет\n\tвывод заданной строки. В результате в браузер\n\tулетит только HTML код, а вместо PHP кода\n\tбудет стоять результат его выполнения.\n</p>\n\n<h2>Упрощение</h2>\n<p>\n\tДля простоты на этапе обучения лишние теги\n\tможно не писать:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\techo 'моя первая программа';\n?&gt;</code>\n</div>\n\n<h2>Проблема с кодировками</h2>\n<p>\n\tЧтобы русский текст выводился корректно,\n\tнеобходимо выполнение нескольких условий.\n\tВо-первых, кодировка самого файла должна\n\tбыть <code class=\"code inline\">utf-8</code>. Во-вторых, нужно указать\n\tкодировку в HTML коде:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;\n&lt;?php\n\techo 'моя первая программа';\n?&gt;</code>\n</div>\n<p>\n\tИногда описанные процедуры не помогают и\n\tтогда может помочь команда <code class=\"code inline\">mb_internal_encoding</code>:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;\n&lt;?php\n\tmb_internal_encoding('UTF-8');\n\techo 'моя первая программа';\n?&gt;</code>\n</div>\n\n<h2>Вывод ошибок PHP</h2>\n<p>\n\tЕсли вы допустите в вашем PHP коде ошибку,\n\tто сервер выведет описание этой ошибки прямо\n\tв браузер. Ошибки бывают трех типов: <code class=\"code inline\">notice</code>,\n\t<code class=\"code inline\">warning</code> и <code class=\"code inline\">fatal</code>.\n</p>\n<p>\n\tНотисы представляют собой замечания о том,\n\tчто у вас в коде может что-то быть не так.\n\tХотя код по-прежнему будет работать. Лучше,\n\tоднако, эти ошибки не оставлять без внимания,\n\tа исправлять их.\n</p>\n<p>\n\tВорнинги представляют собой предупреждения\n\tо том, что что-то пошло не так. Как правило\n\tпри этом ваш код запустится, но будет работать\n\tне так, как вы хотите.\n</p>\n<p>\n\tФаталы возникают в том случае, когда PHP\n\tкод не может быть выполнен. Как правило это\n\tбудет связано с допущенной вами синтаксической\n\tошибкой.\n</p>\n<p>\n\tЕсть, однако, проблема. По умолчанию нотисы\n\tи ворнинги выключены, а вместо фаталов вы\n\tбудете видеть просто белый экран. Это, конечно\n\tже, малоинформативно. Давайте включим вывод\n\tвсех ошибок:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\terror_reporting(E_ALL);\n?&gt;</code>\n</div>\n<p>\n\tИногда, однако, данная команда не сработает\n\t(зависит от настроек сервера). На помощь\n\tпридет вторая команда:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tini_set('display_errors', 'on');\n?&gt;</code>\n</div>\n<p>\n\tЛучше сразу писать две:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\terror_reporting(E_ALL);\n\tini_set('display_errors', 'on');\n?&gt;</code>\n</div>\n<p>\n\tНа выложенном в интернет сайте вывод ошибок\n\tлучше отключать. Делается это вот так:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\terror_reporting(0);\n\tini_set('display_errors', 'off');\n?&gt;</code>\n</div>\n\n<h2>Полный код для запуска PHP</h2>\n<p>\n\tВ соответствии с описанным полный код для\n\tзапуска PHP скриптов будет выглядеть так:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;\n&lt;?php\n\terror_reporting(E_ALL);\n\tini_set('display_errors', 'on');\n\tmb_internal_encoding('UTF-8');\n\t\n\techo 'моя первая программа';\n?&gt;</code>\n</div>\n\n<h2>Улучшим код для запуска</h2>\n<p>\n\tПолученный нами код слишком уж большой. Кроме\n\tтого, если вы учитесь у меня на <a href=\"http://mentor.code.mu\">курсах\n\tPHP</a> и будете присылать решение каждой\n\tзадачи с этим лишнем кодом, мне будет не\n\tочень удобно его проверять.\n</p>\n<p>\n\tДавайте его доработаем. Для этого сделаем\n\tдва файла. Пусть первый файл будет <code class=\"path inline\">index.php</code>\n\tи именно его вы будете запускать в браузере:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;\n&lt;?php\n\terror_reporting(E_ALL);\n\tini_set('display_errors', 'on');\n\tmb_internal_encoding('UTF-8');\n\t\n\tinclude 'code.php';\n?&gt;</code>\n</div>\n<p>\n\tОбратите внимание на команду <code class=\"code inline\">include</code>,\n\tнаписанную в первом файле. Эта команда будет\n\tавтоматически подключать код второго файла\n\tк первому. И все команды первого файла автоматически\n\tприменятся к подключенному коду второго файла.\n</p>\n<p>\n\tА второй файл будет называться <code class=\"path inline\">code.php</code>.\n\tВ нем вы просто будете писать PHP код и именно\n\tэтот файл вы будете присылать на проверку:\n</p>\n<div class=\"block\" data-file=\"code.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 'привет мир';\n?&gt;</code>\n</div>\n<div class=\"notice\">\n\t<p>\n\t\tДалее в учебнике во всех примерах кода я\n\t\tбуду для простоты опускать лишние команды.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/overview/","content":"\n\t\t\t\t<h1>Обзор начальных PHP команд</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКоманда <code class=\"code inline\">echo</code> командует вывести что-нибудь\n\tна экран. Давайте выведем какую-нибудь строку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 'hello';\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем какое-нибудь число:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 123;\n?&gt;</code>\n</div>\n\n<h2>Комментарии</h2>\n<p>\n\tПодобно языкам HTML и CSS в языке PHP можно\n\tоставлять комментарии. Они бывают однострочными\n\tи многострочными.\n</p>\n<p>\n\tВот пример однострочного комментария:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 'hello'; // комментарий\n?&gt;</code>\n</div>\n<p>\n\tВот пример многострочного комментария:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t/*\n\t\tкомментарий\n\t\tкомментарий\n\t*/\n\techo 'hello';\n?&gt;</code>\n</div>\n\n<h2>Комментарии в учебнике</h2>\n<p>\n\tДалее в учебнике я иногда буду комментировать\n\tрезультат выполнения кода. Например, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 'hello'; // выведет 'hello'\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, я в комментарии результат\n\tвывода взял в кавычки. Однако, на экран эта\n\tстрока выведется без кавычек. Я их указал\n\tдля того, чтобы подчеркнуть, что мы выводим\n\tименно строку.\n</p>\n<p>\n\tЕсли мы выводим число, то его я в кавычки\n\tбрать не буду:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 12345; // выведет 12345\n?&gt;</code>\n</div>\n<p>\n\tТакое разделение нужно из-за того, что мы\n\tтакже можем вывести на экран строку с цифрами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '12345'; // выведет '12345'\n?&gt;</code>\n</div>\n<p>\n\tТехнически в браузер оно будет отправляться\n\tодинаково. Но в PHP разница между числами\n\tи строками с цифрами все-таки есть, поэтому\n\tя ее всегда буду подчеркивать.\n</p>\n\n<h2>Функция var_dump</h2>\n<p>\n\tКоманда <code class=\"code inline\">echo</code> не всегда дает представление\n\tо том, что мы выводим. Для отладки ваших\n\tпрограмм лучше использовать специальную функцию\n\t<code class=\"code inline\">var_dump</code>. Она помимо вывода строки\n\tили числа еще будет указывать тип выводимых\n\tданных, а также им размер:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump('12345'); // выведет '12345' и еще некоторую полезную инфу\n?&gt;</code>\n</div>\n\n<h2>Функции</h2>\n<p>\n\tНа примере <code class=\"code inline\">var_dump</code> мы сталкиваемся\n\tс <dfn>функциями</dfn>. Они позволяют выполнять\n\tнекоторые действия. Функция состоит из имени\n\tи круглых скобок, написанных после этого\n\tимени. В этих круглых скобках следует писать\n\t<dfn>параметры функции</dfn>. В нашем случае\n\tпараметром является текст, который выводится\n\tна экран. Бывают функции, в которые нужно\n\tпередавать не один параметр, как у нас сейчас,\n\tа несколько параметров. В этом случае эти\n\tпараметры пишутся через запятую.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/variables/","content":"\n\t\t\t\t<h1>Переменные в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОсновным понятием любого языка программирования\n\tявляется <dfn>переменная</dfn>. Переменная представляет\n\tсобой контейнер, в котором мы можем хранить\n\tкакие-либо данные, например, строки или числа.\n</p>\n<p>\n\tКаждая переменная должна иметь имя, которое\n\tможет состоять из латинских букв, чисел и\n\tзнаков подчеркивания. При этом в PHP перед\n\tпеременной обязательно должен быть написан\n\tзнак доллара <code class=\"code inline\">$</code>, а первый символ имени\n\tпеременной не должен быть цифрой.\n</p>\n\n<h2>Использование переменных</h2>\n<p>\n\tДля того, чтобы записать что-либо в переменную\n\tиспользуется знак <code class=\"code inline\">=</code>, который называется\n\tзнаком присваивания. Давайте, например, запишем\n\tв переменную <code class=\"code inline\">$a</code> число <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 3;\n?&gt;</code>\n</div>\n<p>\n\tА теперь выведем содержимое переменной <code class=\"code inline\">$a</code>\n\tна экран с помощью команды <code class=\"code inline\">echo</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 3;\n\techo $a; // выведет на экран число 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$num</code> и присвойте\n\t\tей значение <code class=\"number inline\">123</code>. Выведите значение\n\t\tэтой переменной на экран с помощью команды\n\t\t<code class=\"code inline\">echo</code>.\n\t</p>\n</div>\n\n<h2>Изменения значений переменных</h2>\n<p>\n\tЗначение переменной не является чем-то жестко\n\tпривязанным к ней. Мы можем свободно записывать\n\tкакие-то данные в переменную, прочитывать\n\tих, потом еще что-то записывать - и так далее.\n\tСмотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;  // записываем в переменную значение 1\n\techo $a; // выведет 1\n\t\n\t$a = 2;  // записываем теперь значение 2, затирая значение 1\n\techo $a; // выведет 2\n?&gt;</code>\n</div>\n\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code>. Запишите в\n\t\tнее значение <code class=\"code inline\">10</code>, выведите его на экран.\n\t\tЗатем запишите в нее значение <code class=\"code inline\">20</code>,\n\t\tвыведите его на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/math-operations-numbers/","content":"\n\t\t\t\t<h1>Математические операции с числами в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСложение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1 + 2;\n\techo $a; // выведет 3\n?&gt;</code>\n</div>\n<p>\n\tВычитание:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$b = 3 - 2;\n\techo $b; // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tУмножение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$c = 3 * 2;\n\techo $c; // выведет 6\n?&gt;</code>\n</div>\n<p>\n\tДеление:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$d = 4 / 2;\n\techo $d; // выведет 2\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code>. Запишите в\n\t\tнее сумму чисел <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code> и <code class=\"number inline\">3</code>.\n\t\tС помощью команды <code class=\"code inline\">echo</code> выведите на\n\t\tэкран содержимое переменной <code class=\"code inline\">$a</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/math-operations-variables/","content":"\n\t\t\t\t<h1>Математические операции с переменными в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМатематические операции можно производить\n\tне только над числами, но и над переменными.\n\tСложим, к примеру, значения двух переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\t$b = 2;\n\techo $a + $b; // выведет 3\n?&gt;</code>\n</div>\n<p>\n\tНе обязательно сразу выводить результат операции,\n\tможно вначале записать его в какую нибудь\n\tпеременную, а уже затем вывести значение\n\tэтой переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\t$b = 2;\n\t$c = $a + $b; // запишем сумму в переменную $c\n\techo $c;      // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code> со значением\n\t\t<code class=\"number inline\">10</code> и переменную <code class=\"code inline\">$b</code> со значением\n\t\t<code class=\"number inline\">2</code>. Выведите на экран их сумму, разность,\n\t\tпроизведение и частное (результат деления).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$c</code> со значением\n\t\t<code class=\"number inline\">10</code> и переменную <code class=\"code inline\">$d</code> со значением\n\t\t<code class=\"number inline\">5</code>. Просуммируйте их, а результат присвойте\n\t\tпеременной <code class=\"code inline\">$result</code>. Выведите на экран\n\t\tзначение переменной <code class=\"code inline\">$result</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code> со значением\n\t\t<code class=\"number inline\">1</code>, переменную <code class=\"code inline\">$b</code> со значением\n\t\t<code class=\"number inline\">2</code> и переменную <code class=\"code inline\">$c</code> со значением\n\t\t<code class=\"number inline\">3</code>. Выведите на экран их сумму.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code> со значением\n\t\t<code class=\"number inline\">10</code> и переменную <code class=\"code inline\">$b</code> со значением\n\t\t<code class=\"number inline\">5</code>. Отнимите от <code class=\"code inline\">$a</code> переменную\n\t\t<code class=\"code inline\">$b</code> и результат присвойте переменной\n\t\t<code class=\"code inline\">$c</code>. Затем создайте переменную <code class=\"code inline\">$d</code>,\n\t\tприсвойте ей значение <code class=\"number inline\">7</code>. Сложите переменные\n\t\t<code class=\"code inline\">$c</code> и <code class=\"code inline\">$d</code>, а результат запишите\n\t\tв переменную <code class=\"code inline\">$result</code>. Выведите на\n\t\tэкран значение переменной <code class=\"code inline\">$result</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/math-operations-priority/","content":"\n\t\t\t\t<h1>Приоритет математических операций в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМатематические операции PHP имеют такой же\n\tприоритет, как в обычной математике. То есть\n\tв начале выполняется умножение и деление,\n\tа потом уже сложение и вычитание. В следующем\n\tпримере вначале <code class=\"number inline\">2</code> умножится на <code class=\"number inline\">2</code>\n\tи затем к результату прибавится <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * 2 + 3;\n\techo $a; // выведет 7 (результат 4 + 3)\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 5 + 5 * 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 5 + 5 * 3 + 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 / 2 + 2;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 + 2 / 2;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Равный приоритет</h2>\n<p>\n\tУмножение и деление имеют равный приоритет\n\tи выполняются по очереди слева направо. Рассмотрим\n\tна примере, что имеется ввиду. В следующем\n\tкоде вначале выполнится деление, а потом\n\tумножение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 / 2 * 4;\n\techo $a; // выведет 16 (результат 4 * 4)\n?&gt;</code>\n</div>\n<p>\n\tЕсли же переставить знаки местами, то вначале\n\tвыполнится умножение, а потом деление:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 * 2 / 4;\n\techo $a; // выведет 4 (результат 16 / 4)\n?&gt;</code>\n</div>\n<p>\n\tВ следующем примере каждая новая операция\n\tделения будет применяться к предыдущей:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 16 / 2 / 2 / 2;\n\techo $a; // выведет 2\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 / 2 * 2;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 * 4 / 2 / 2;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Группирующие скобки</h2>\n<p>\n\tПри желании вы можете указывать приоритет\n\tопераций с помощью круглых скобок. Давайте,\n\tнапример, переделаем наш код так, чтобы вначале\n\tвыполнилось сложение, а уже потом умножение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * (2 + 3);\n\techo $a; // выведет 10 (результат 2 * 5)\n?&gt;</code>\n</div>\n<p>\n\tСкобок может быть любое количество, в том\n\tчисле и вложенных друг в друга:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * (2 + 4 * (3 + 1));\n\techo $a;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = (2 + 3) * (2 + 3);\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = (2 + 3) * 2 + 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * (2 + 4 * (3 + 1));\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * 8 / 4;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Нюансы группировки</h2>\n<p>\n\tВ скобки можно заключить операции, обладающие\n\tприоритетом - это не будет ошибкой. Например,\n\tзаключим в скобки произведение чисел:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = (2 * 2) + 3;\n\techo $a; // выведет 7 (результат 4 + 3)\n?&gt;</code>\n</div>\n<p>\n\tВ данном случае скобки получаются лишними\n\t(у умножения ведь и так приоритет), но код\n\tявляется допустимым. Иногда такую группировку\n\tиспользуют в тех местах, где приоритет операций\n\tне очевиден. Для примера рассмотрим следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 8 / 2 * 4;\n\techo $a;\n?&gt;</code>\n</div>\n<p>\n\tКак вы уже знаете, в нем вначале выполнится\n\tделение, а потом умножение. Но с первого\n\tвзгляда это может быть не слишком очевидно.\n\tЗдесь можно использовать группирующие скобки,\n\tчтобы явно показать приоритет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = (8 / 2) * 4;\n\techo $a;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = (2 * 8) / 4;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * (8 / 4);\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/fractions/","content":"\n\t\t\t\t<h1>Дроби в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ PHP также существуют и десятичные дроби.\n\tВ них целая и дробная части отделяются друг\n\tот друга точкой. Смотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 0.5;\n\techo $a; // выведет 0.5\n?&gt;</code>\n</div>\n<p>\n\tСмотрите еще пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 0.5 + 0.5;\n\techo $a; // выведет 1\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в переменную <code class=\"code inline\">$a</code> число <code class=\"code inline\">1.5</code>,\n\t\tа в переменную <code class=\"code inline\">$b</code> - число <code class=\"code inline\">0.75</code>.\n\t\tНайдите сумму значений этих переменных и\n\t\tвыведите ее на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/negative-numbers/","content":"\n\t\t\t\t<h1>Отрицательные числа в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЧисла могут быть отрицательными. Для этого\n\tперед числом необходимо поставить знак минус:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = -1;\n\techo $a; // выведет -1\n?&gt;</code>\n</div>\n<p>\n\tЗнак минус можно писать как к числам, так\n\tи к переменным:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\t$b = -$a; // записали в $b содержимое $a с обратным знаком\n\techo $b;  // выведет -1\n?&gt;</code>\n</div>\n<p>\n\tИли вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\techo -$a; // выведет -1\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code> со значением\n\t\t<code class=\"number inline\">-100</code>. Выведите это значение на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$a</code>, запишите в\n\t\tнее какое-нибудь положительное или отрицательное\n\t\tчисло. Выведите на экран это число с обратным\n\t\tзнаком.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/division-remainder/","content":"\n\t\t\t\t<h1>Остаток от деления в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСуществует специальный оператор <code class=\"code inline\">%</code>,\n\tс помощью которого можно найти остаток от\n\tделения одного числа на другое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 10 % 3; // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tЕсли одно число делится нацело на второе\n\t- остаток будет равен нулю:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 10 % 2; // выведет 0\n?&gt;</code>\n</div>\n<p>\n\tОператор <code class=\"code inline\">%</code>, конечно же, можно применять\n\tне только к числам, но и к переменным:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n\techo $a % $b; // выведет 1\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана переменная <code class=\"code inline\">$a</code> со значением <code class=\"number inline\">10</code>\n\t\tи переменная <code class=\"code inline\">$b</code> со значением <code class=\"number inline\">3</code>.\n\t\tНайдите остаток от деления <code class=\"code inline\">$a</code> на <code class=\"code inline\">$b</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/numbers-powering/","content":"\n\t\t\t\t<h1>Возведение в степень в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля возведения числа в степень также существует\n\tспециальный оператор <code class=\"code inline\">**</code>. Давайте с\n\tего помощью возведем число <code class=\"number inline\">10</code> в третью\n\tстепень:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 10 ** 3; // выведет 1000\n?&gt;</code>\n</div>\n<p>\n\tДавайте возведем в степень значение переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\techo $a ** 3; // выведет 1000\n?&gt;</code>\n</div>\n<p>\n\tМожет быть такое, что и число, и степень\n\tбудут содержаться в переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n\techo $a ** $b; // выведет 1000\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВозведите число <code class=\"number inline\">2</code> в <code class=\"number inline\">10</code>-ю степень.\n\t\tВыведите результат на экран.\n\t</p>\n</div>\n\n<h2>Приоритет возведения в степень</h2>\n<p>\n\tОперация возведения в степень имеет приоритет\n\tперед умножением и делением. В следующем\n\tпримере вначале выполнится возведение в степень,\n\tа затем умножение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 2 * 2 ** 3;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 3 * 2 ** 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = (3 * 2) ** 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 3 * 2 ** (3 + 1);\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 ** 3 * 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 3 * 2 ** 3 * 3;\n\techo $a;\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/strings/","content":"\n\t\t\t\t<h1>Строки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак уже упоминалось ранее, данные могут иметь\n\tразличный тип. Один из типов - числа, мы\n\tс вами уже немного изучили. Давайте теперь\n\tперейдем к строкам.\n</p>\n<p>\n\tСтроки создаются с помощью кавычек:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abc';\n\techo $str; // выведет 'abc'\n?&gt;</code>\n</div>\n<p>\n\tКавычки могут быть не только одинарными,\n\tно и двойными:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = \"abc\";\n\techo $str; // выведет 'abc'\n?&gt;</code>\n</div>\n\n<h2>Сложение строк</h2>\n<p>\n\tДля сложения (<dfn>конкатенации</dfn>) строк\n\tиспользуется оператор точка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abc' . 'def'; // складываем две строки\n\techo $str;            // выведет 'abcdef'\n?&gt;</code>\n</div>\n<p>\n\tСтроки также могут хранится в переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str1 = 'abc';\n\t$str2 = 'def';\n\techo $str1 . $str2; // выведет 'abcdef'\n?&gt;</code>\n</div>\n<p>\n\tМожно также складывать переменные и строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str1 = 'abc';\n\t$str2 = 'def';\n\techo $str1 . '!!!' . $str2; // выведет 'abc!!!def'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$str</code> и присвойте\n\t\tей строку <code class=\"string inline\">'hello'</code>. Выведите значение\n\t\tэтой переменной на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную с текстом <code class=\"string inline\">'abc'</code>\n\t\tи переменную с текстом <code class=\"string inline\">'def'</code>. С помощью\n\t\tэтих переменных и операции сложения строк\n\t\tвыведите на экран строку <code class=\"string inline\">'abcdef'</code>.\n\t</p>\n</div>\n\n<h2>Пробелы при сложении строк</h2>\n<p>\n\tПусть две строки хранятся в переменных, а\n\tпри их сложении мы хотим вставить между ними\n\tпробел. Это делается так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str1 = 'abc';\n\t$str2 = 'def';\n\techo $str1 . ' ' . $str2; // выведет 'abc def'\n?&gt;</code>\n</div>\n<p>\n\tПусть переменная только одна:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abc';\n\techo $str . ' ' . 'def'; // выведет 'abc def'\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае нет смысла выделять пробел,\n\tкак отдельную строку - вставим его как часть\n\tвторого слагаемого:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abc';\n\techo $str . ' def'; // выведет 'abc def'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную с текстом <code class=\"string inline\">'hello'</code>\n\t\tи переменную с текстом <code class=\"string inline\">'world'</code>. С\n\t\tпомощью этих переменных и операции сложения\n\t\tстрок выведите на экран строку <code class=\"string inline\">'hello\n\t\tworld'</code>.\n\t</p>\n</div>\n<!--\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$name</code> и присвойте\n\t\tей ваше имя. Выведите на экран фразу <code class=\"string inline\">'привет,\n\t\t%имя%'</code>. Вместо <code class=\"string inline\">%имя%</code> должно подставится\n\t\tзначение из переменной <code class=\"code inline\">$name</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте переменную <code class=\"code inline\">$age</code> и присвойте\n\t\tей ваш возраст. Выведите на экран <code class=\"code inline\">'мне\n\t\t%возраст% лет'</code>. Вместо <code class=\"code inline\">%возраст%</code>\n\t\tдолжно подставится значение из переменной\n\t\t<code class=\"code inline\">$age</code>.\n\t</p>\n</div>\n-->\n\n<h2>Длина строки</h2>\n<p>\n\tКоличество символов строки можно найти с\n\tпомощью функции <code class=\"code inline\">strlen</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo strlen('abcde'); // выведет 5\n?&gt;</code>\n</div>\n<p>\n\tСтрока может хранится и в переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\techo strlen($str); // выведет 5\n?&gt;</code>\n</div>\n<p>\n\tПробел также является символом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo strlen('ab de'); // выведет 5\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в переменную какую-нибудь строку.\n\t\tВыведите на экран длину вашей строки.\n\t</p>\n</div>\n\n<h2>Проблема с кириллицей</h2>\n<p>\n\tФункция <code class=\"code inline\">strlen</code>, как и многие другие\n\tстроковые функции PHP, некорректно работает\n\tс кириллицей - она каждую кириллическую букву\n\tсчитает два раза:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo strlen('абвгд'); // выведет 10, а не 5\n?&gt;</code>\n</div>\n<p>\n\tПоэтому для строк, которые содержат или потенциально\n\tмогут содержать проблемные символы, используйте\n\tфункцию <code class=\"code inline\">mb_strlen</code> - она будет работать\n\tкорректно:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo mb_strlen('абвгд'); // выведет 5\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в переменную какую-нибудь кириллическую\n\t\tстроку. Выведите на экран длину вашей строки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/tags/","content":"\n\t\t\t\t<h1>Работа с HTML тегами в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tТеги HTML с точки зрения PHP представляют\n\tсобой обычные строки. Давайте, например,\n\tс помощью тега <m href=\"/ru/markup/manual/html/tag/b/\">&lt;b&gt;</code>\n\tвыведем на экран жирный текст:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;b&gt;жирный&lt;/b&gt;';\n?&gt;</code>\n</div>\n<p>\n\tМожно использовать несколько <code class=\"code inline\">echo</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;b&gt;';\n\techo 'жирный';\n\techo '&lt;/b&gt;';\n?&gt;</code>\n</div>\n<p>\n\tМожно использовать конкатенацию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'жирный';\n\techo '&lt;b&gt;' . $str . '&lt;/b&gt;';\n?&gt;</code>\n</div>\n<p>\n\tИли вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str   = 'жирный';\n\t$open  = '&lt;b&gt;';\n\t$close = '&lt;/b&gt;';\n\t\n\techo $open . $str . $close;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью тега <m href=\"/ru/markup/manual/html/tag/i/\">&lt;i&gt;</code>\n\t\tвыведите на экран курсивный текст.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью тега <m href=\"/ru/markup/manual/html/tag/br/\">&lt;br&gt;</code>\n\t\tвыведите на экран столбец чисел от <code class=\"number inline\">1</code>\n\t\tдо <code class=\"number inline\">9</code>.\n\t</p>\n</div>\n\n<h2>Атрибуты тегов</h2>\n<p>\n\tДавайте с помощью тега <m href=\"/ru/markup/manual/html/tag/a/\">&lt;a&gt;</code>\n\tвыведем на экран ссылку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;a href=\"index.php\"&gt;ссылка&lt;/a&gt;';\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь адрес и текст ссылки хранятся\n\tв отдельных переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$href = 'index.php';\n\t$text = 'ссылка';\n\t\n\techo '&lt;a href=\"' . $href . '\"&gt;' . $text . '&lt;/a&gt;';\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью тега <m href=\"/ru/markup/manual/html/tag/img/\">&lt;img&gt;</code>\n\t\tвыведите на экран какую-нибудь картинку.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью тега <m href=\"/ru/markup/manual/html/tag/input/\">&lt;input&gt;</code>\n\t\tвыведите на экран инпут с каким-нибудь текстом.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью тега <m href=\"/ru/markup/manual/html/tag/textarea/\">&lt;textarea&gt;</code>\n\t\tвыведите на экран многострочное поле ввода\n\t\tс каким-нибудь текстом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/boolean-values/","content":"\n\t\t\t\t<h1>Логические значения в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКроме чисел и строк существует еще один тип\n\tданных - <dfn>логический</dfn> (boolean). Он\n\tсостоит всего из двух возможных значений:\n\t<code class=\"code inline\">true</code> или <code class=\"code inline\">false</code>. Эти значения\n\tобозначают истину и ложь соответственно.\n</p>\n<p>\n\tЛогический тип данных используется для таких\n\tвещей, которые предполагают два варианта\n\tответа - да или нет. К примеру, на вопрос\n\t\"вам уже есть <code class=\"number inline\">18</code> лет?\" в можете ответить\n\tда, то есть <code class=\"code inline\">true</code>, или нет, то есть\n\t<code class=\"code inline\">false</code>.\n</p>\n<p>\n\tДавайте посмотрим на примере:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$isAdult = true;  // уже взрослый\n?&gt;</code>\n</div>\n<p>\n\tПоменяем значение на другое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$isAdult = false; // еще не взрослый\n?&gt;</code>\n</div>\n<p>\n\tВыведем значение нашей переменной на экран.\n\tИспользуем для этого специальную функцию\n\t<code class=\"code inline\">var_dump</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$isAdult = true;\n\tvar_dump($isAdult); // выведет true\n?&gt;</code>\n</div>\n<p>\n\tА вот через <code class=\"code inline\">echo</code> выводить логические\n\tзначения не удобно:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo true;  // выведет 1\n\techo false; // выведет пустоту\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПрисвойте переменной значение <code class=\"code inline\">true</code>.\n\t\tВыведите эту переменную на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПрисвойте переменной значение <code class=\"code inline\">false</code>.\n\t\tВыведите эту переменную на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/null/","content":"\n\t\t\t\t<h1>Значение null в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ PHP существует еще одно специальное значение\n\t<code class=\"code inline\">null</code>, которое обозначает \"ничего\".\n\tК примеру, мы можем присвоить переменной\n\tэто значение в знак того, что там ничего не лежит.\n</p>\n<p>\n\tДавайте посмотрим на примере:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n?&gt;</code>\n</div>\n<p>\n\tВыведем значение нашей переменной с помощью\n\t<code class=\"code inline\">var_dump</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\tvar_dump($test); // выведет null\n?&gt;</code>\n</div>\n<p>\n\tА вот через <code class=\"code inline\">echo</code> мы ничего не увидим:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\techo $test;      // выведет пустоту\n?&gt;</code>\n</div>\n<p>\n\tПо умолчанию переменные, которые не были\n\tобъявлены в коде, имеют значение <code class=\"code inline\">null</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($test); // выведет null\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПрисвойте переменной значение <code class=\"code inline\">null</code>.\n\t\tВыведите эту переменную на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран значение любой необъявленной\n\t\tпеременной.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/automatic-types-conversion/","content":"\n\t\t\t\t<h1>Автоматическое преобразование типов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, строки в PHP следует брать\n\tв кавычки. Может быть такое, что всеми символами\n\tстроки будут являться цифры. В этом случае,\n\tесли над строкой с цифрами выполнить какую-либо\n\tматематическую операцию - эта операция будет\n\tвыполнена так, будто у нас действительно\n\tчисла, а не строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '1' + '2'; // выведет 3\n?&gt;</code>\n</div>\n<p>\n\tВ данном случае PHP видит, что мы пытаемся\n\tвыполнить недопустимую для строк, но допустимую\n\tдля чисел операцию. Он также видит, что фактически\n\tнаши строки - это числа в кавычках. Поэтому\n\tPHP автоматически выполняет преобразование\n\tэтих строк к чисел и выполняет соответствующую\n\tматематическую операцию над ними.\n</p>\n<p>\n\tАналогичным образом будет происходить сложение\n\tстроки с цифрами и обычного числа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '1' + 2;   // выведет 3\n?&gt;</code>\n</div>\n<p>\n\tПри этом не будет иметь значения, в каком\n\tпорядке выполнять сложение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 1 + '2';   // выведет 3\n?&gt;</code>\n</div>\n<p>\n\tВсе сказанное будет аналогичным образом работать\n\tи для переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = '1';\n\t$b = '2';\n\t\n\techo $a + $b;   // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = '1';\n\t$b = '2';\n\t\n\techo $a + $b + '3';\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Преобразование к строке</h2>\n<p>\n\tАналогичное преобразование будет происходить\n\tс числами, над которыми мы пытаемся выполнить\n\tоперацию, разрешенную только для строк:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 1 . 2;    // выведет '12'\n?&gt;</code>\n</div>\n<p>\n\tНо тут есть нюансы. Точка используется не\n\tтолько для сложения строк, но и для отделения\n\tдробной части от целой. Поэтому, если в нашем\n\tкоде убрать пробелы вокруг точки, мы получим\n\tдробь, а не сложение строк:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 1.2;     // выведет 1.2\n?&gt;</code>\n</div>\n<p>\n\tИз-за таких нюансов можно легко получить\n\tошибку, если с одной стороны точки поставить\n\tпробел, а с другой - нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 1. 2;    // выдаст ошибку\n?&gt;</code>\n</div>\n<p>\n\tС переменными, однако, такой проблемы не будет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = '1';\n\t$b = '2';\n\t\n\techo $a.$b;   // выведет 12, а не ошибку\n?&gt;</code>\n</div>\n<!--\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/forced-types-conversion/","content":"\n\t\t\t\t<h1>Принудительное преобразование типов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда нам может понадобится принудительно\n\tпреобразовать один тип данных в другой. Давайте\n\tпосмотрим, как это делается.\n</p>\n\n<h2>Целые числа</h2>\n<p>\n\tПусть, к примеру, у нас есть строка с цифрами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '1';\n\tvar_dump($test);\n?&gt;</code>\n</div>\n<p>\n\tДавайте преобразуем ее в целое число. Для\n\tэтого используем специальную команду <code class=\"code inline\">int</code>,\n\tвот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = (int) '1';\n\tvar_dump($test); // выведет 1 - число\n?&gt;</code>\n</div>\n<p>\n\tМожно воспользоваться командой преобразования\n\tпрямо в вызове функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump((int) '1');\n?&gt;</code>\n</div>\n<p>\n\tМожно преобразовать значение переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '1';\n\tvar_dump((int) $test);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПреобразуйте следующую строку в число:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '12345';\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Дробные числа</h2>\n<p>\n\tПусть теперь у нас есть строка с дробным числом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '1.2';\n\tvar_dump($test);\n?&gt;</code>\n</div>\n<p>\n\tДля преобразования этой строки в число следует\n\tвоспользоваться командой <code class=\"code inline\">float</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = (float) '1.2';\n\tvar_dump($test); // выведет 1.2\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПреобразуйте следующую строку в число:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '12.345';\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Преобразование дроби к целому числу</h2>\n<p>\n\tИспользование команды <code class=\"code inline\">int</code> для дроби\n\tприведет к тому, что от дроби извлечется\n\tтолько целая часть:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = (int) '1.2';\n\tvar_dump($test); // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tАналогичным образом команда сработает в том\n\tслучае, если у нас не строка с дробью, а\n\tпросто дробь как число:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = (int) 1.2;\n\tvar_dump($test); // выведет 1\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПреобразуйте следующую строку в целое число:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '12.345';\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Преобразование к строке</h2>\n<p>\n\tМожно также преобразовать число к строке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = (string) 123;\n\tvar_dump($test); // выведет '123'\n?&gt;</code>\n</div>\n<p>\n\tАналогичным образом будет работать преобразование\n\tдробного числа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = (string) 1.2;\n\tvar_dump($test); // выведет '1.2'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПреобразуйте следующее число в строку:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 12345;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПреобразуйте следующее число в строку:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 12.345;\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/string-characters/","content":"\n\t\t\t\t<h1>Получение символов строки на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть какая-то строка. Каждый\n\tсимвол в этой строке имеет свой порядковый\n\tномер: первый символ номер <code class=\"code inline\">0</code>, второй\n\tсимвол - номер <code class=\"code inline\">1</code>, третий символ номер\n\t<code class=\"code inline\">2</code> и так далее.\n</p>\n<p>\n\tПри необходимости можно получить доступ к\n\tопределенному символу строки по его номеру.\n\tДля этого пишется имя переменный, после этого\n\tимени ставятся квадратные скобки и в этих\n\tскобках указывается номер символа.\n</p>\n<p>\n\tДавайте посмотрим на примере. Пусть у нас\n\tдана вот такая строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем какие-нибудь символы этой строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\t\n\techo $str[0]; // выведет 'a'\n\techo $str[1]; // выведет 'b'\n\techo $str[2]; // выведет 'c'\n?&gt;</code>\n</div>\n<p>\n\tА теперь давайте изменим нулевой символ:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\t$str[0] = '+';\n\t\n\techo $str; // выведет '+bcde'\n?&gt;</code>\n</div>\n<p>\n\tНомер символа также может храниться и в переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\t$num = 3; // номер символа в переменной\n\t\n\techo $str[$num]; // выведет 'd'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'abcde'</code>. Обращаясь к отдельным\n\t\tсимволам этой строки выведите на экран символ\n\t\t<code class=\"string inline\">'a'</code>, символ <code class=\"string inline\">'c'</code>, символ <code class=\"string inline\">'e'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана переменная со строкой <code class=\"string inline\">'abcde'</code>.\n\t\tОбращаясь к отдельным символам этой строки\n\t\tзапишите в новую переменную символы этой\n\t\tстроки в обратном порядке, то есть <code class=\"string inline\">'edcba'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана переменная <code class=\"code inline\">$str</code> со строкой <code class=\"string inline\">'abcde'</code>\n\t\tи переменная <code class=\"code inline\">$num</code> с номером символа.\n\t\tВыведите на экран символ, номер которого\n\t\tхранится в переменной <code class=\"code inline\">$num</code>.\n\t</p>\n</div>\n\n<h2>Последний символ строки</h2>\n<p>\n\tДавайте выведем последний символ строки.\n\tПри этом сделаем так, чтобы наш скрипт сам\n\tопределял номер последнего символа, независимо\n\tот длины строки.\n</p>\n<p>\n\tПусть у нас есть такая строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, количество символов в этой\n\tстроке равно <code class=\"number inline\">5</code>. Если немного подумать,\n\tто становится очевидным, что номер последнего\n\tсимвола этой строки будет на <code class=\"number inline\">1</code> меньше\n\tее длины, так как нумерация символов начинается\n\tс нуля.\n</p>\n<p>\n\tПолучается, что зная длину строки, мы можем\n\tотнять от нее <code class=\"number inline\">1</code> и получить номер последнего\n\tсимвола, а затем по этому номеру можно получить\n\tсам последний символ.\n</p>\n<p>\n\tКак вы уже знаете, длину строки можно найти\n\tс помощью функции <code class=\"code inline\">strlen</code>. Исходя из\n\tэтого найдем номер последнего символа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\t$last = strlen($str) - 1; // номер последнего символа\n?&gt;</code>\n</div>\n<p>\n\tИспользуем найденный номер для вывода символа\n\tна экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\t$last = strlen($str) - 1; // номер последнего символа\n\techo $str[$last]; // выведет 'e'\n?&gt;</code>\n</div>\n<p>\n\tПромежуточную переменную <code class=\"code inline\">$last</code> можно\n\tи не вводить:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abcde';\n\techo $str[strlen($str) - 1]; // выведет 'e'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Выведите на экран ее последний\n\t\tсимвол.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Выведите на экран ее предпоследний\n\t\tсимвол.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Выведите на экран ее предпредпоследний\n\t\tсимвол.\n\t</p>\n</div>\n\n<h2>Цифры в строке</h2>\n<p>\n\tКак вы уже знаете, строки могут состоять\n\tиз цифр. В этом случае все будет работать\n\tаналогично:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n\t\n\techo $str[0]; // выведет '1'\n\techo $str[1]; // выведет '2'\n\techo $str[2]; // выведет '3'\n?&gt;</code>\n</div>\n<p>\n\tМожно, например, найти сумму первых двух\n\tцифр нашего числа и это будет работать:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n\techo $str[0] + $str[1]; // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'12345'</code>. Найдите сумму\n\t\tцифр этой строки.\n\t</p>\n</div>\n\n<h2>Числа</h2>\n<p>\n\tПопытка получить символ числа приведет к ошибке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 12345;\n\techo $num[0]; // выдаст ошибку\n?&gt;</code>\n</div>\n<p>\n\tДля решения проблемы можно преобразовать\n\tнаше число к строке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 12345;\n\t$str = (string) $num;\n\t\n\techo $str[0]; // выведет '1'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число <code class=\"number inline\">12345</code>. Найдите сумму цифр\n\t\tэтого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число <code class=\"number inline\">12345</code>. Найдите произведение\n\t\tцифр этого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число <code class=\"number inline\">12345</code>. Переставьте цифры\n\t\tэтого числа в обратном порядке.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/short-operations/","content":"\n\t\t\t\t<h1>Сокращенные операции в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами разберем некоторые нюансы\n\tработы с операцией присваивания.\n</p>\n<p>\n\tПосмотрите следующий пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1; // объявляем переменную $num и записываем в нее значение 1\n\t$num = $num + 2; // записываем в $num ее саму плюс 2\n\techo $num; // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t$num = $num + 1;\n\t$num = $num + 1;\n\t\n\techo $num;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t$num = $num + 2;\n\t$num = $num + 3;\n\t\n\techo $num;\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Сокращенные операции</h2>\n<p>\n\tПусть дан вот такой код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t$num = $num + 2;\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, здесь в переменную записывается\n\tее текущее значение плюс еще что-то. Для\n\tтаких операций существует специальный сокращенный\n\tоператор <code class=\"code inline\">+=</code>, смотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num  = 1;\n\t$num += 3; // эквивалентно $num = $num + 3;\n?&gt;</code>\n</div>\n<p>\n\tСуществуют аналогичные операторы для остальных\n\tматематических операций:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num  = 2;\n\t$num -= 3; // эквивалентно $num = $num - 3;\n?&gt;</code>\n</div>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num  = 2;\n\t$num *= 3; // эквивалентно $num = $num * 3;\n?&gt;</code>\n</div>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num  = 2;\n\t$num /= 3; // эквивалентно $num = $num / 3;\n?&gt;</code>\n</div>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str  = 'a';\n\t$str .= 'b'; // эквивалентно $str = $str . 'b';\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите приведенный код через сокращенные\n\t\tоперации:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 47;\n\t$num = $num + 7;\n\t$num = $num - 18;\n\t$num = $num * 10;\n\t$num = $num / 15;\n\techo $num;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите приведенный код через сокращенные\n\t\tоперации:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a';\n\t$str = $str . 'b';\n\t$str = $str . 'c';\n\t\n\techo $str;\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/increment-decrement/","content":"\n\t\t\t\t<h1>Операции инкремента и декремента в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\t$num = $num + 1; // прибавляем к переменной $num число 1\n\techo $num;       // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tКак вы уже знаете, этот код можно переписать\n\tв сокращенном виде через оператор <code class=\"code inline\">+=</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\t$num += 1; // прибавляем к переменной $num число 1\n\techo $num; // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tНа самом деле прибавление единицы в программировании\n\tвстречается так часто, что для этой операции\n\tпридуман еще более сокращенный синтаксис\n\t- специальный оператор <code class=\"code inline\">++</code> (<dfn>инкремент</dfn>),\n\tувеличивающий значение переменной на <code class=\"number inline\">1</code>.\n</p>\n<p>\n\tПерепишем наш код с его помощью:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\t$num++;    // прибавляем к переменной a число 1\n\techo $num; // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tКроме операции <code class=\"code inline\">++</code> есть также операция\n\t<code class=\"sql inline\">--</code> (<dfn>декремент</dfn>), уменьшающая\n\tзначение переменной на <code class=\"number inline\">1</code>. Смотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\t$num--;    // отнимаем от переменной $num число 1\n\techo $num; // выведет -1\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте этот код так, чтобы в нем операции\n\t\tинкремента и декремента:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 10;\n\t$num = $num + 1;\n\t$num = $num + 1;\n\t$num = $num - 1;\n\techo $num;\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Префиксный и постфиксный тип</h2>\n<p>\n\tНа самом деле операции инкремента и декремента\n\tможно записывать двумя способами. В <dfn>постфиксном</dfn>\n\tвиде операция записывается после имени переменной,\n\tвот так: <code class=\"code inline\">$a++</code>, а в <dfn>префиксном</dfn>\n\tвиде - перед именем переменной, вот так:\n\t<code class=\"code inline\">++$a</code>. Давайте посмотрим на примерах,\n\tв чем разница между двумя способами.\n</p>\n<p>\n\tВ следующем примере первый <code class=\"code inline\">echo</code> выведет\n\t<code class=\"number inline\">0</code>, так как вначале сработает вывод\n\tна экран, а уже затем переменная увеличится:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\techo $num++; // выведет 0, тк переменная увеличится только после echo\n\techo $num;   // выведет 1 - переменная поменялась\n?&gt;</code>\n</div>\n<p>\n\tА теперь переменная вначале увеличится, а\n\tуже затем будет вывод на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\techo ++$num; // выведет 1 - переменная увеличилась сразу\n?&gt;</code>\n</div>\n<p>\n\tТакое поведение справедливо не только для\n\tвывода на экран, но и для присваивания:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 0;\n\t$num2 = $num1++; // в переменную $num2 запишется 0\n\techo $num2;      // выведет 0\n\techo $num1;      // выведет 1 - переменная $num1 поменялась после записи в $num2\n?&gt;</code>\n</div>\n<p>\n\tА теперь поменяем постфиксную форму на префиксную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 0;\n\t$num2 = ++$num1; // в переменную $num2 запишется 1\n\techo $num2;      // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tЕсли наша операция выполняется на отдельной\n\tстроке, то разницы между префиксной и постфиксной\n\tформами нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 0;\n\t++$num;\n\t$num++;\n\techo $num; // выведет 2\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\techo ++$num;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\techo $num++;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\techo --$num;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\techo $num--;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 3;\n\t$num2 = ++$num1;\n\techo $num1;\n\techo $num2;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 3;\n\t$num2 = $num1++;\n\techo $num1;\n\techo $num2;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 3;\n\t$num2 = --$num1;\n\techo $num1;\n\techo $num2;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 3;\n\t$num2 = $num1--;\n\techo $num1;\n\techo $num2;\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 3;\n\t$num1++;\n\t$num2 = $num1--;\n\techo $num1++;\n\techo --$num2;\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/inaccurate-calculations/","content":""},{"url":"/ru/php/book/prime/basis/practicum/operations/","content":"\n\t\t\t\t<h1>Практика на операции в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте узнаем сколько секунд в часе. Как\n\tизвестно, в минуте <code class=\"number inline\">60</code> секунд, а в\n\tчасе - <code class=\"number inline\">60</code> минут. Следовательно, чтобы\n\tнайти количество секунд в часе, необходимо\n\t<code class=\"number inline\">60</code> умножить на <code class=\"number inline\">60</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 60 * 60; // количество секунд в часе\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество секунд в сутках.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество секунд в <code class=\"number inline\">30</code> сутках.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество секунд в году.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество минут в сутках.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество минут в году.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество байт в мегабайте.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество байт в гигабайте.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество байт в <code class=\"number inline\">10</code> гигабайтах.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество байт в терабайте.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество килобайт в терабайте.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/basis/practicum/formulas/","content":"\n\t\t\t\t<h1>Практика на формулы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tПусть дана переменная <code class=\"code inline\">r</code> с радиусом\n\t\tкруга. По соответствующей формуле найдите\n\t\tплощадь круга и запишите ее в переменную\n\t\t<code class=\"code inline\">s</code>. Выведите содержимое этой переменной\n\t\tна экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дана переменная <code class=\"code inline\">a</code> со стороной\n\t\tквадрата. Найдите площадь квадрата и запишите\n\t\tее в переменную <code class=\"code inline\">s</code>. Выведите содержимое\n\t\tэтой переменной на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть даны переменные <code class=\"code inline\">a</code> и <code class=\"code inline\">b</code>\n\t\tсо сторонами прямоугольника. Найдите площадь\n\t\tпрямоугольника и запишите ее в переменную\n\t\t<code class=\"code inline\">s</code>. Выведите содержимое этой переменной\n\t\tна экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть даны переменные <code class=\"code inline\">a</code> и <code class=\"code inline\">b</code>\n\t\tсо сторонами прямоугольника. Найдите периметр\n\t\tпрямоугольника и запишите его в переменную\n\t\t<code class=\"code inline\">p</code>. Выведите содержимое этой переменной\n\t\tна экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дана переменная <code class=\"code inline\">tc</code> с температурой\n\t\tв градусах Цельсия. По соответствующей формуле\n\t\tвыполните перевод этой температуры в градусы\n\t\tФаренгейта.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дана переменная <code class=\"code inline\">tf</code> с температурой\n\t\tв градусах Фаренгейта. По соответствующей\n\t\tформуле выполните перевод этой температуры\n\t\tв градусы Цельсия.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/intro/","content":"\n\t\t\t\t<h1>Массивы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы начнем изучать специальный\n\tтип данных, который называется <dfn>массив</dfn>.\n\tМассив представляет собой переменную, в которой\n\tв упорядоченном виде можно хранить целый\n\tнабор каких-то значений.\n</p>\n<p>\n\tДля создания массива используются квадратные\n\tскобки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = []; // создаем массив $arr\n?&gt;</code>\n</div>\n<p>\n\tПока созданный нами массив не содержит никаких\n\tданных. Заполним его названиями дней недели:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];\n?&gt;</code>\n</div>\n<p>\n\tКаждое значение списка, который мы записали\n\tв массив, в нашем случае каждый день недели,\n\tназывается <dfn>элементом</dfn> массива. Как\n\tвы видите, элементы разделяются между собой\n\tзапятой. После этой запятой можно ставить\n\tпробелы, а можно и не ставить (более принято\n\tставить, ставьте).\n</p>\n<p>\n\tОбратите внимание на то, что названия дней\n\tнедели представляют собой строки и поэтому\n\tвзяты в кавычки. Кроме строк в массиве можно\n\tхранить числа, и их в кавычки мы не берем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3];\n?&gt;</code>\n</div>\n<p>\n\tКроме строк и чисел в массиве можно хранить\n\tвсе допустимые типы данных PHP, а также смешивать\n\tих между собой в одном массиве, пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 'a', 'b', null, true, false];\n?&gt;</code>\n</div>\n\n<h2>Как посмотреть содержимое массива</h2>\n<p>\n\tПосмотреть содержимое всего массива с помощью\n\t<code class=\"code inline\">echo</code> нельзя. При попытке сделать это\n\tна экран просто выведется слово <code class=\"code inline\">Array</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">$a = [1, 2, 3];\necho $a; // выведет 'Array'</code>\n</div>\n<p>\n\tДля того, чтобы PHP вывел нам все элементы\n\tмассива, нужно воспользоваться функцией <code class=\"code inline\">var_dump</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">$a = [1, 2, 3];\nvar_dump($a);</code>\n</div>\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив с элементами <code class=\"string inline\">'a'</code>,\n\t\t<code class=\"string inline\">'b'</code> и <code class=\"string inline\">'c'</code>. Выведите его на\n\t\tэкран с помощью команды <code class=\"code inline\">echo</code> и с помощью\n\t\tфункции <code class=\"code inline\">var_dump</code>.\n\t</p>\n</div>\n\n<h2>Как вывести отдельный элемент массива</h2>\n<p>\n\tОбращение к элементам массива осуществляется\n\tподобно обращениям к символам строки: первый\n\tэлемент имеет номер <code class=\"number inline\">0</code>, второй - номер\n\t<code class=\"number inline\">1</code> и так далее. Эти номера называются\n\t<dfn>ключами</dfn> элементов массива. Давайте\n\tпосмотрим на примере:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];\n\t\n\techo $arr[0]; // выведет 'пн'\n\techo $arr[1]; // выведет 'вт'\n\techo $arr[2]; // выведет 'ср'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив с элементами <code class=\"string inline\">'a'</code>,\n\t\t<code class=\"string inline\">'b'</code> и <code class=\"string inline\">'c'</code>. Выведите на экран\n\t\tкаждый из этих элементов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив с элементами массив с элементами\n\t\t<code class=\"string inline\">'a'</code>, <code class=\"string inline\">'b'</code> и <code class=\"string inline\">'c'</code>, <code class=\"string inline\">'d'</code>.\n\t\tВыведите с его помощью на экран строку <code class=\"string inline\">'a+b+c+d'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив с элементами <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>\n\t\tи <code class=\"number inline\">3</code>. Выведите на экран сумму этих\n\t\tэлементов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив с элементами <code class=\"number inline\">2</code>, <code class=\"number inline\">5</code>,\n\t\t<code class=\"number inline\">3</code>, <code class=\"number inline\">9</code>. Умножьте первый элемент\n\t\tмассива на второй, а третий элемент на четвертый.\n\t\tРезультаты сложите, присвойте переменной\n\t\t<code class=\"code inline\">$result</code>. Выведите на экран значение\n\t\tэтой переменной.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/associative/","content":"\n\t\t\t\t<h1>Ассоциативные массивы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим следующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];\n?&gt;</code>\n</div>\n<p>\n\tЧтобы обратиться к нужному элементу этого\n\tмассива, мы должны написать в квадратных\n\tскобках ключ этого элемента. Как вы знаете,\n\tв массивах PHP сам определяет ключи для элементов\n\t- это их порядковые номера. Но иногда это\n\tможет оказаться неудобным: например, мы хотим\n\tвывести на экран название первого дня недели,\n\tа должны писать в квадратных скобках цифру\n\t<code class=\"number inline\">0</code>.\n</p>\n<p>\n\tЛогичнее и удобнее было бы все-таки для первого\n\tдня недели писать ключ <code class=\"number inline\">1</code>, как привыкли\n\tмы в жизни. Для этого используются <dfn>ассоциативные</dfn>\n\tмассивы. Они имеют следующий синтаксис: имя\n\tключа, затем идет стрелка <code class=\"code inline\">=></code>, а потом\n\tзначение. Давайте укажем явные ключи для\n\tнашего массива дней:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1 =&gt; 'пн', 2 =&gt; 'вт', 3 =&gt; 'ср', 4 =&gt; 'чт', 5 =&gt; 'пт', 6 =&gt; 'сб', 7 =&gt; 'вс'];\n?&gt;</code>\n</div>\n<p>\n\tПосле добавления наших ключей обратиться\n\tк понедельнику можно уже по ключу <code class=\"number inline\">1</code>,\n\tа не <code class=\"number inline\">0</code>. Сделаем это:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $arr[1]; // выведет 'пн'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив с ключами <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>\n\t\tи <code class=\"number inline\">3</code> и значениями <code class=\"string inline\">'a'</code>, <code class=\"string inline\">'b'</code>\n\t\tи <code class=\"string inline\">'c'</code>. Выведите на экран все его элементы.\n\t</p>\n</div>\n\n<h2>Хитрость с ключами</h2>\n<p>\n\tНе очень удобно расставлять ключи всем элементам\n\tдля того, чтобы нумерация началась не с нуля,\n\tа с единицы. К счастью, на самом деле достаточно\n\tпервому элементу поставить ключ <code class=\"number inline\">1</code>\n\tи дальше PHP сам автоматически расставит\n\tключи по порядку.\n</p>\n<p>\n\tДавайте попробуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1 =&gt; 'пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];\n\t\n\techo $arr[1]; // выведет 'пн'\n\techo $arr[2]; // выведет 'вт'\n\techo $arr[3]; // выведет 'ср'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоставьте массив с названиями месяцев. Пусть\n\t\tв нем январь имеет ключ <code class=\"number inline\">1</code>.\n\t</p>\n</div>\n\n<h2>Строковые ключи</h2>\n<p>\n\tКлючи не обязательно должны быть числами,\n\tони могут быть и строками. Сделаем, к примеру,\n\tмассив, в котором ключами будут имена работников,\n\tа элементами - их зарплаты:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['user1' =&gt; 200, 'user2' =&gt; 300, 'user3' =&gt; 400];\n?&gt;</code>\n</div>\n<p>\n\tУзнаем зарплату первого работника:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['user1' =&gt; 200, 'user2' =&gt; 300, 'user3' =&gt; 400];\n\techo $arr['user1']; // выведет 200\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив <code class=\"code inline\">$user</code> с ключами <code class=\"string inline\">'name'</code>,\n\t\t<code class=\"string inline\">'surname'</code>, <code class=\"string inline\">'patronymic'</code> и какими-то\n\t\tпроизвольными значениями. Выведите на экран\n\t\tфамилию, имя и отчество через пробел.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив <code class=\"code inline\">$date</code> с ключами <code class=\"string inline\">'year'</code>,\n\t\t<code class=\"string inline\">'month'</code> и <code class=\"string inline\">'day'</code> и значениями,\n\t\tсоответствующими текущему дню. Выведите созданную\n\t\tдату на экран в формате <i>год-месяц-день</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/order/","content":"\n\t\t\t\t<h1>Порядок элементов в массивах в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, в обычных массивах элементы\n\tрасполагаются в строгом порядке, ведь позиция\n\tкаждого элемента определяет его ключ. В ассоциативных\n\tмассивах мы сами назначаем ключи, поэтому\n\tпорядок следования элементов не имеет значения.\n</p>\n<p>\n\tДля примера рассмотрим вот такой ассоциативный\n\tмассив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1 =&gt; 'value1', 2 =&gt; 'value2', 3 =&gt; 'value3'];\n\t\n\techo $arr[1]; // выведет 'value1'\n\techo $arr[2]; // выведет 'value2'\n\techo $arr[3]; // выведет 'value3'\n?&gt;</code>\n</div>\n<p>\n\tЕсли переставить элементы этого массива в\n\tпроизвольном порядке (конечно же, вместе\n\tс их ключами), то ничего от этого в работе\n\tнашего скрипта не изменится:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [3 =&gt; 'value3', 1 =&gt; 'value1', 2 =&gt; 'value2'];\n\t\n\techo $arr[1]; // выведет 'value1'\n\techo $arr[2]; // выведет 'value2'\n\techo $arr[3]; // выведет 'value3'\n?&gt;</code>\n</div>\n<p>\n\tКроме того, числовые ключи не обязательно\n\tдолжны иметь все значения без дырок. У нас\n\tмогут быть произвольные числа и это не будет\n\tприводить ни к каким проблемам:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [7 =&gt; 'value1', 50 =&gt; 'value2', 23 =&gt; 'value3'];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте описанное на каком-нибудь из ваших\n\t\tассоциативных массивов.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/length/","content":"\n\t\t\t\t<h1>Длина массива в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДлина массива находится с помощью функции\n\t<code class=\"code inline\">count</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3];\n\techo count($arr); // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан такой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран количество элементов в\n\t\tэтом массиве.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан такой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран количество элементов в\n\t\tэтом массиве.\n\t</p>\n</div>\n\n<h2>Последний элемент массива</h2>\n<p>\n\tПоследний элемент массива также получается\n\tаналогично последнему символу строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3];\n\techo $arr[count($arr) - 1]; // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан такой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран последний элемент этого массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tвыводился предпоследний элемент массив.\n\t</p>\n</div>\n\n<h2>Замечание</h2>\n<p>\n\tОписанный способ нахождения последнего элемента\n\tработает только для обычных массивов, у которых\n\tчисловые ключи идут по порядку, начиная с\n\tнуля. Для ассоциативных массивов сама постановка\n\tтакой задачи некорректна, так как такие массивы\n\tявляются не упорядоченными и у них просто\n\tнет последнего элемента.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/changing/","content":"\n\t\t\t\t<h1>Изменение элементов массива в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЭлементы массивов можно изменять подобно\n\tизменению символов строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t\n\t$arr[0] = '!';\n\tvar_dump($arr); // выведет ['!', 'b', 'c']\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tИзмените значение каждого из элементов этого\n\t\tмассива.\n\t</p>\n</div>\n\n<h2>Перезапись элементов</h2>\n<p>\n\tМожно также прочитывать текущее значение\n\tэлемента, выполнять с ним какие-то операции\n\tи записывать измененное значение обратно\n\tв этот элемент:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t\n\t$arr[0] = $arr[0] . '!';\n\t$arr[1] = $arr[1] . '!';\n\t$arr[2] = $arr[2] . '!';\n\t\n\tvar_dump($arr); // выведет ['a!', 'b!', 'c!']\n?&gt;</code>\n</div>\n<p>\n\tПредыдущий код можно переписать через оператор\n\t<code class=\"code inline\">.=</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t\n\t$arr[0] .= '!';\n\t$arr[1] .= '!';\n\t$arr[2] .= '!';\n\t\n\tvar_dump($arr); // выведет ['a!', 'b!', 'c!']\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПрибавьте к каждому элементу массива число\n\t\t<code class=\"number inline\">3</code>. Выведите на экран измененный массив.\n\t</p>\n</div>\n\n<h2>Инкремент и декремент</h2>\n<p>\n\tМожно также применять операции инкремента\n\tи декремента:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4];\n\t\n\t$arr[0]++;\n\t++$arr[1];\n\t$arr[2]--;\n\t--$arr[3];\n\t\n\tvar_dump($arr); // выведет [2, 3, 2, 3]\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n\t\n\t$arr['a']++;\n\t$arr['a']++;\n\t$arr['b']--;\n\t$arr['c']--;\n\t$arr['c']--;\n\t\n\tvar_dump($arr);\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНе запуская код, расскажите, каким будет\n\t\tрезультат функции <code class=\"code inline\">var_dump</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/filling/","content":"\n\t\t\t\t<h1>Заполнение массивов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЭлементы в массив не обязательно добавлять\n\tсразу в момент объявления этого массива.\n\tМожно вначале объявить этот массив пустым,\n\tа затем добавить в него необходимые элементы,\n\tвот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];     // создаем пустой массив\n\t\n\t$arr[] = 'a';  // элемент добавится в ключ 0\n\t$arr[] = 'b';  // элемент добавится в ключ 1\n\t$arr[] = 'c';  // элемент добавится в ключ 2\n\t\n\tvar_dump($arr); // выведет ['a', 'b', 'c']\n?&gt;</code>\n</div>\n<p>\n\tМассив не обязательно должен быть изначально\n\tпустым - там уже что-то может быть, но мы\n\tвсе равно можем добавлять новые элементы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c']; // объявляем массив с элементами\n\t\n\t$arr[] = 'd'; // элемент добавится в ключ 3\n\t$arr[] = 'e'; // элемент добавится в ключ 4\n\t\n\tvar_dump($arr); // выведет ['a', 'b', 'c', 'd', 'e']\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан пустой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tОписанным способом заполните этот массив\n\t\tэлементами со значениями <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>,\n\t\t<code class=\"number inline\">3</code>, <code class=\"number inline\">4</code> и <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан такой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДобавьте ему в конец элементы <code class=\"number inline\">4</code> и <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n\n<h2>Явное указание ключей</h2>\n<p>\n\tПри необходимости ключи можно указать явным\n\tобразом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = []; // создаем пустой массив\n\t\n\t$arr[0] = 'a'; // в ключ 0 добавим элемент 'a'\n\t$arr[1] = 'b'; // в ключ 1 добавим элемент 'b'\n\t$arr[2] = 'c'; // в ключ 2 добавим элемент 'c'\n\t\n\tvar_dump($arr); // выведет ['a', 'b', 'c']\n?&gt;</code>\n</div>\n<p>\n\tКлючи могут быть не только числовыми, но\n\tи строковыми:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\t$arr['a'] = 1;\n\t$arr['b'] = 2;\n\t$arr['c'] = 3;\n\t\n\tvar_dump($arr); // выведет ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3]\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан пустой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tОписанным способом в ключ <code class=\"string inline\">'year'</code> запишите\n\t\tтекущий год, в ключ <code class=\"string inline\">'month'</code> - текущий\n\t\tмесяц, а в ключ <code class=\"string inline\">'day'</code> - текущий день.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/arrays/vars-keys/","content":"\n\t\t\t\t<h1>Ключи из переменных в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас дан вот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n?&gt;</code>\n</div>\n<p>\n\tВыведем на экран элемент с ключом <code class=\"number inline\">0</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\techo $arr[0]; // выведет 'a'\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь ключ выводимого элемента не\n\tбудем писать непосредственно в квадратных\n\tскобках, а запишем его в переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t$key = 0; // запишем ключ в переменную\n?&gt;</code>\n</div>\n<p>\n\tИспользуем теперь нашу переменную для вывода\n\tсоответствующего элемента:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t$key = 0; // запишем ключ в переменную\n\t\n\techo $arr[$key]; // выведет 'a'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДана также переменная <code class=\"code inline\">$key1</code> со значением\n\t\t<code class=\"number inline\">1</code> и переменная <code class=\"code inline\">$key2</code> со значением\n\t\t<code class=\"number inline\">2</code>. Найдите сумму элементов, ключи\n\t\tкоторых хранятся в наших переменных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДана переменная <code class=\"code inline\">$key</code>, в которой хранится\n\t\tодин из ключей нашего массива. Выведите с\n\t\tпомощью этой переменной соответствующий элемент\n\t\tмассива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/if-else/","content":"\n\t\t\t\t<h1>Конструкция if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами изучим специальную конструкцию\n\t<code class=\"code inline\">if-else</code>, которая позволяет выполнять\n\tнекоторый код в зависимости от выполнения\n\tкакого-либо условия. Синтаксис конструкции\n\tвыглядит так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (операция сравнения) {\n\t\t/*\n\t\t\tрасположенный здесь код выполнится,\n\t\t\tесли результат операция сравнения верный\n\t\t*/\n\t} else {\n\t\t/*\n\t\t\tрасположенный здесь код выполнится,\n\t\t\tесли результат операция сравнения неверный\n\t\t*/\n\t}\n?&gt;</code>\n</div>\n\n<h2>Операторы больше и меньше</h2>\n<p>\n\tДля проверки того, которое из значений больше,\n\tа которое меньше, используются операторы\n\tбольше <code class=\"code inline\">></code>, больше или равно <code class=\"code inline\">>=</code>,\n\tменьше <code class=\"code inline\"><</code>, меньше или равно <code class=\"code inline\"><=</code>.\n</p>\n<p>\n\tИзучим их работу на практическом примере.\n\tПусть у нас есть переменная <code class=\"code inline\">$test</code>\n\tс каким-то значением:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n?&gt;</code>\n</div>\n<p>\n\tДавайте проверим, значение этой переменной\n\tбольше нуля или нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n\t\n\tif ($test &gt; 0) {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь поменяем значение переменной на\n\tотрицательное:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = -1; // поменяем значение переменной\n\t\n\tif ($test &gt; 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь значение переменной равно <code class=\"number inline\">0</code>.\n\tВ этом случае мы попадем в блок <code class=\"code inline\">else</code>,\n\tтак как в нашем условии написано, что переменная\n\t<code class=\"code inline\">$test</code> должна быть строго больше нуля:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif ($test &gt; 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте поменяем условие на больше или равно:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif ($test &gt;= 0) {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tбольше <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tменьше <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tбольше или равна <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tменьше или равна <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n\n<h2>Проверка на равенство</h2>\n<p>\n\tДля проверки двух значений на равенство используется\n\tоператор <code class=\"code inline\">==</code>. Давайте для примера проверим,\n\tчто переменная <code class=\"code inline\">$test</code> равна <code class=\"number inline\">0</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0; // пусть значение переменной равно 0\n\t\n\tif ($test == 0) {\n\t\techo '+'; // сработает это, так как переменная равна 0\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПоменяем значение переменной так, чтобы условие\n\tне выполнялось:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1; // пусть значение переменной равно 1\n\t\n\tif ($test == 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, так как переменная НЕ равна 0\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tравна <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n\n<h2>Проверка на неравенство</h2>\n<p>\n\tСуществует также оператор <code class=\"code inline\">!=</code>, который\n\tнаоборот, проверяет на неравенство. Давайте\n\tдля примера проверим, что <code class=\"code inline\">test</code> переменная\n\tне равна <code class=\"number inline\">0</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1; // пусть значение переменной равно 1\n\t\n\tif ($test != 0) {\n\t\techo '+'; // сработает это, так как переменная НЕ равна 0\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПоменяем значение переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0; // пусть значение переменной равно 0\n\t\n\tif ($test != 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, так как переменная равна 0\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tне равна <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n\n<h2>Сравнение переменных</h2>\n<p>\n\tВ примерах выше мы сравнивали переменную\n\tс каким-то числом. Но никто не запрещает\n\tнам сравнивать две переменные.\n</p>\n<p>\n\tСмотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 1;\n\t$test2 = 2;\n\t\n\tif ($test2 &gt; $test1) {\n\t\techo '+'; // сработает это, так как $test2 больше $test1\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны переменные <code class=\"code inline\">$test1</code> и <code class=\"code inline\">$test2</code>.\n\t\tПроверьте, что значение какой из этих переменных\n\t\tбольше и выведите соответствующее сообщение\n\t\tна экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/data-types/","content":"\n\t\t\t\t<h1>Типы данных и конструкция if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри использовании конструкции <code class=\"code inline\">if</code> можно\n\tсравнивать и строки. Для примера пусть в\n\tпеременной <code class=\"code inline\">$test</code> хранится какая-то\n\tстрока, например такая:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 'abc';\n?&gt;</code>\n</div>\n<p>\n\tДавайте проверим, равно ли содержимое переменной\n\t<code class=\"code inline\">$test</code> строке <code class=\"string inline\">'abc'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 'abc';\n\t\n\tif ($test == 'abc') {\n\t\techo '+'; // сработает это, так как переменная равна 'abc'\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Числа в кавычках</h2>\n<p>\n\tКак вы знаете, число в кавычках представляет\n\tсобой строку. Например, <code class=\"string inline\">'3'</code> - это\n\tстрока. Однако, при сравнении таких строк\n\tс настоящими числами PHP считает, что строка\n\tв кавычках равна такому же числу.\n</p>\n<p>\n\tДавайте для примера сравним строку <code class=\"string inline\">'3'</code>\n\tи число <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ('3' == 3) {\n\t\techo '+'; // сработает это - значения равны\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Равенство по значению и типу</h2>\n<p>\n\tПусть вы хотите сравнивать так, чтобы число\n\tв кавычках не было равно такому же числу\n\tбез кавычек. Говоря другими словами, вы хотите\n\tсравнивать так, чтобы сравнение было не только\n\tпо значению, но и по типу данных. Для этого\n\tвместо оператора <code class=\"code inline\">==</code> следует использовать\n\tоператор <code class=\"code inline\">===</code>.\n</p>\n<p>\n\tСмотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ('3' === 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, тк значения не равны по типу\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА вот при сравнении двух строк <code class=\"string inline\">'3'</code>\n\tна экран выведется <code class=\"string inline\">'+'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ('3' === '3') {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТак же, как и при сравнении чисел:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (3 === 3) {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tРазница между двумя операторами проявляется\n\tименно тогда, когда значения одинаковые,\n\tно разный тип данных. В остальных случаях\n\tэти операторы работают одинаково. К примеру,\n\tпри сравнении разных чисел, конечно же, выведется\n\tминус:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (2 === 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = '3';\n\t$test2 = '3';\n\t\t\n\tif ($test1 == $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = '3';\n\t$test2 = '3';\n\t\t\n\tif ($test1 === $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 3;\n\t$test2 = '3';\n\t\t\n\tif ($test1 == $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 3;\n\t$test2 = '3';\n\t\t\n\tif ($test1 === $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 3;\n\t$test2 = 3;\n\t\t\n\tif ($test1 === $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Неравенство по значению и типу</h2>\n<p>\n\tКроме оператора <code class=\"code inline\">!=</code> существует также\n\tоператор <code class=\"code inline\">!==</code>, учитывающий тип при\n\tсравнении. Давайте рассмотрим различия между\n\tними на примерах.\n</p>\n<p>\n\tПусть с помощью оператора <code class=\"code inline\">!=</code> сравниваются\n\tдва числа <code class=\"number inline\">3</code>. Данный оператор сравнивает\n\tзначения на то, что они НЕ равны. Так как\n\tнаши значения как раз-таки равны, то на экран\n\tвыведется <code class=\"string inline\">'-'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (3 != 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, так как значения равны\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь одно из наших значений будет\n\tв кавычках. В этом случае оператор <code class=\"code inline\">!=</code>\n\tвсе равно посчитает их равными (так как совпадает\n\tзначение, а тип не важен для данного оператора)\n\tи опять выведет <code class=\"string inline\">'-'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ('3' != 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, так как значения равны\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь сравним два числа <code class=\"number inline\">3</code>\n\tс помощью оператора <code class=\"code inline\">!==</code>. Он также\n\tпосчитает их равными и выведет <code class=\"string inline\">'-'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (3 !== 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, так как значения равны\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА вот если теперь одну из троек взять в кавычки,\n\tто оператор <code class=\"code inline\">!==</code> посчитает наши тройки\n\tнеравными, так как, хотя значения их и совпадают,\n\tно у них разный тип:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ('3' !== 3) {\n\t\techo '+'; // сработает это, так как значения НЕ равны\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = '3';\n\t$test2 = '3';\n\t\t\n\tif ($test1 != $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = '3';\n\t$test2 = '3';\n\t\t\n\tif ($test1 !== $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 3;\n\t$test2 = '3';\n\t\t\n\tif ($test1 != $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 3;\n\t$test2 = '3';\n\t\t\n\tif ($test1 !== $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test1 = 3;\n\t$test2 = 2;\n\t\t\n\tif ($test1 !== $test2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Нюансы</h2>\n<p>\n\tОбратите внимание на следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (0 == '') {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tИ на следующий:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (0 == '0') {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Какое сравнение использовать?</h2>\n<p class=\"notice\">\n\tВ настоящее время в PHP общепринято везде\n\tстараться использовать строгое сравнение.\n\tСчитается, что в этом случае код менее подвержен\n\tошибкам.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/compound-statements/","content":"\n\t\t\t\t<h1>Сложные условия в if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда может быть нужно составить какое-то\n\tсложное условие. Для этого существуют операторы\n\t<code class=\"code inline\">and</code> (логическое <code class=\"code inline\">И</code>) и <code class=\"code inline\">or</code>\n\t(логическое <code class=\"code inline\">ИЛИ</code>).\n</p>\n\n<h2>Логическое И</h2>\n<p>\n\tЛогическое <code class=\"code inline\">И</code> позволяет задать одновременность\n\tусловий. В следующем примере условие выполнится,\n\tесли переменная <code class=\"code inline\">$num</code> больше нуля и\n\t<i>одновременно</i> меньше <code class=\"number inline\">10</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\n\tif ($num &gt; 0 and $num &lt; 10) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУсловия могут налагаться не на одну переменную,\n\tа на разные. В следующем примере условие\n\tвыполнится, если переменная <code class=\"code inline\">$num1</code>\n\tравна <code class=\"number inline\">2</code> и одновременно переменная\n\t<code class=\"code inline\">$num2</code> равна <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 2;\n\t$num2 = 3;\n\t\n\tif ($num1 == 2 and $num2 == 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$num</code>\n\t\tбольше нуля и меньше <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$num</code>\n\t\tбольше или равна <code class=\"number inline\">10</code> и меньше или равна\n\t\t<code class=\"number inline\">20</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$num1</code>\n\t\tравна или меньше <code class=\"number inline\">1</code>, а переменная <code class=\"code inline\">$num2</code>\n\t\tбольше или равна <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n\n<h2>Логическое ИЛИ</h2>\n<p>\n\tЛогическое <code class=\"code inline\">ИЛИ</code> требует выполнения\n\tхотя бы одного условия. В следующем примере\n\tусловие выполнится, если переменная <code class=\"code inline\">$num1</code>\n\tбольше <code class=\"number inline\">0</code> или переменная <code class=\"code inline\">$num2</code>\n\tбольше <code class=\"number inline\">0</code> (достаточно выполнения хотя\n\tбы одного из условий):\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 10;\n\t$num2 = -5;\n\t\n\tif ($num1 &gt; 0 or $num2 &gt; 0) {\n\t\techo '+'; // сработает это\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = -10;\n\t$num2 = -10;\n\t\n\tif ($num1 &gt;= 0 or $num2 &gt;= 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 0;\n\t$num2 = 0;\n\t\n\tif ($num1 &gt;= 0 or $num2 &gt;= 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 0;\n\t$num2 = 5;\n\t\n\tif ($num1 &gt;= 0 or $num2 &gt;= 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = 5;\n\t$num2 = 5;\n\t\n\tif ($num1 &gt;= 0 or $num2 &gt;= 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num1 = -5;\n\t$num2 = 15;\n\t\n\tif ($num1 &gt;= 0 or $num2 &gt;= 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tif ($num == 0 or $num == 1) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 2;\n\t\n\tif ($num == 0 or $num == 1) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 2;\n\t\n\tif ($num == 0 or $num == 1 or $num == 2) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Приоритет операций сравнения</h2>\n<p>\n\tОперация <code class=\"code inline\">and</code> имеет приоритет над <code class=\"code inline\">or</code>.\n\tВ следующем примере условие сработает, если\n\tпеременная <code class=\"code inline\">$num</code> от <code class=\"number inline\">0</code> до <code class=\"number inline\">5</code>\n\tИЛИ от <code class=\"number inline\">10</code> до <code class=\"number inline\">20</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\n\tif ($num &gt; 0 and $num &lt; 5 or $num &gt; 10 and $num &lt; 20) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Группировка условий</h2>\n<p>\n\tХотя операция <code class=\"code inline\">and</code> и имеет приоритет\n\tнад <code class=\"code inline\">or</code>, часто удобнее использовать\n\tгруппирующие круглые скобки, чтобы явно показать\n\tприоритет операций:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\n\tif ( ($num &gt; 0 and $num &lt; 5) or ($num &gt; 10 and $num &lt; 20) ) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p class=\"notice\">\n\tКонечно же, группировка может быть использована и в том\n\tслучае, когда вам нужен свой приоритет операций, а не тот,\n\tкоторый получается по умолчанию.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tВ приведенном ниже коде укажите приоритет\n\t\tопераций в явном виде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\t\n\tif ($num &gt; 5 and $num &lt; 10 or $num == 20) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ приведенном ниже коде укажите приоритет\n\t\tопераций в явном виде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\t\n\tif ($num &gt; 5 or $num &gt; 0 and $num &lt; 3) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ приведенном ниже коде укажите приоритет\n\t\tопераций в явном виде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\t\n\tif ($num == 9 or $num &gt; 10 and $num &lt; 20 or $num &gt; 20 and $num &lt; 30) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/statements-inverting/","content":"\n\t\t\t\t<h1>Инвертирование высказываний в if-else</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($num &gt; 0 and $num &lt; 5) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте инвертируем условие из приведенного\n\tкода, то есть превратим его в его противоположность.\n\tПротивоположное условие получится таким:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($num &lt;= 0 or $num &gt;= 5) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, чтобы инвертировать условие,\n\tприходится несколько задуматься. Гораздо\n\tпроще будет использовать оператор <code class=\"code inline\">!</code>,\n\tпредставляющий собой логическое <code class=\"code inline\">НЕ</code>.\n\tС помощью этого оператора нам достаточно\n\tпоставить восклицательный знак перед изначальным\n\tусловием - и оно инвертируется само:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ( !($num &gt; 0 and $num &lt; 5) ) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($num1 &gt;= 0 or $num2 &lt;= 10) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tИспользуя оператор <code class=\"code inline\">!</code> инвертируйте\n\t\tприведенное условие.\n\t</p>\n</div>\n\n<!--\n<h2></h2>\n<p>\n\t!true !false !1 !!1\n</p>\n<p>\n</p>\n\n<h2>Правила де Моргана</h2>\n<p>\n\tКонечно же, группировка может быть использована\n\tи в том случае, когда вам нужен свой приоритет\n\tопераций, а не тот, который получается по\n\tумолчанию.\n</p>\n<p>\n\tне (a и b) = (не a) или (не b) не (a или\n\tb) = (не a) и (не b)\n</p>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/boolean-types/","content":"\n\t\t\t\t<h1>Конструкция if-else и булевы значения</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть какая-то булева переменная,\n\tкоторая может принимать значения <code class=\"code inline\">true</code>\n\tили <code class=\"code inline\">false</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n?&gt;</code>\n</div>\n<p>\n\tДавайте напишем <code class=\"code inline\">if</code>, проверяющий нашу\n\tпеременную на значение <code class=\"code inline\">true</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test === true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tравна <code class=\"code inline\">true</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте то, что переменная <code class=\"code inline\">$test</code>\n\t\tравна <code class=\"code inline\">false</code>.\n\t</p>\n</div>\n\n<h2>Логические значения и двойное равно</h2>\n<p>\n\tВ предыдущем примере я использовал для сравнения\n\tоператор <code class=\"code inline\">===</code>. В этом случае наша переменная\n\tсравнивалась на равенство <code class=\"code inline\">true</code> как\n\tпо значению, так и по типу.\n</p>\n<p>\n\tВ нашей задаче можно использовать и оператор\n\t<code class=\"code inline\">==</code>. Если в переменной <code class=\"code inline\">test</code>\n\tвсегда будет одно из значений <code class=\"code inline\">true</code>\n\tили <code class=\"code inline\">false</code>, то ничего и не изменится:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true; // тут пишем или true, или false\n\t\n\tif ($test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА вот если в переменную <code class=\"code inline\">$test</code> могут\n\tпопадать любые значения, то все становится\n\tнамного сложнее. В таком случае, если в переменной\n\tбудет не булево значение, то это значение\n\tвначале будет преобразовано к булеву и только\n\tзатем будет сравниваться.\n</p>\n<p>\n\tПусть, например, в нашей переменной будет\n\tчисло <code class=\"number inline\">1</code>. В этом случае оно вначале\n\tпреобразуется к логическому типу, то есть\n\tк <code class=\"code inline\">true</code>. И затем будет выполнено сравнение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n\t\n\tif ($test == true) {\n\t\techo '+'; // сработает это, тк 1 == true - это верно\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА вот, к примеру, число <code class=\"number inline\">0</code> преобразуется\n\tк <code class=\"code inline\">false</code>. И наше условие в результате\n\tбудет ложным:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif ($test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-'; // сработает это, тк 0 == true - это НЕверно\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n\t\t\n\tif ($test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\t\n\tif ($test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n\t\t\n\tif ($test == false) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n\t\t\n\tif ($test != true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '';\n\t\t\n\tif ($test == false) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\ttest;\n\t\t\n\tif (test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Сокращенный иф</h2>\n<p>\n\tПусть, к примеру, мы хотим узнать, равна\n\tли переменная <code class=\"code inline\">$test</code> значению <code class=\"code inline\">true</code>.\n\tВ этом случае конструкцию <code class=\"code inline\">if</code> можно\n\tзаписать так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПри программировании такие проверки требуются\n\tочень часто, поэтому для них существует более\n\tизящная сокращенная форма: вместо <code class=\"code inline\">if ($test\n\t== true)</code> можно написать просто <code class=\"code inline\">if\n\t($test)</code>.\n</p>\n<p>\n\tДавайте перепишем наш код в сокращенной форме:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test) { // эквивалентно if ($test == true)\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь мы проверяем на то, что переменная\n\t<code class=\"code inline\">$test</code> не равна <code class=\"code inline\">true</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test != true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае сокращенный синтаксис будет\n\tвыглядеть так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif (!$test) { // используем логическое НЕ\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tАналогичное сокращение существует и для проверки\n\tна <code class=\"code inline\">false</code>. Пусть дан вот такой код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test == false) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУсловие <code class=\"code inline\">$test == false</code> на самом деле\n\tвсе равно, что <code class=\"code inline\">$test != true</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test != true) { // эквивалентно if ($test == false)\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНу, а такое условие мы уже научились сокращать\n\tв предыдущем примере. Сократим:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif (!$test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код с использованием\n\t\tсокращенного сравнения:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test == true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код с использованием\n\t\tсокращенного сравнения:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test == false) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код с использованием\n\t\tсокращенного сравнения:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test != true) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код с использованием\n\t\tсокращенного сравнения:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif ($test != false) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Нюанс</h2>\n<p>\n\tУчтите, что в сокращенных операциях сравнение\n\tидет по <code class=\"code inline\">==</code>, а не по <code class=\"code inline\">===</code>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 3;\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 'abc';\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '';\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 3 * 'abc';\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = false;\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test;\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '0';\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = -1;\n\t\n\tif ($test) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/isset/","content":"\n\t\t\t\t<h1>Команда isset в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть следующая переменная:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n?&gt;</code>\n</div>\n<p>\n\tДавайте напишем условие, выполняющее проверку\n\tна то, что переменная не равна <code class=\"code inline\">null</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif ($test !== null) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tБолее удобно такую проверку можно выполнить\n\tс помощью специальной команды <code class=\"code inline\">isset</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Подавление ворнинга</h2>\n<p>\n\tПусть переменная <code class=\"code inline\">$test</code> вообще не определена.\n\tКак вы уже знаете, значение такой переменной\n\tбудет равно <code class=\"code inline\">null</code>. При этом попытка\n\tобратиться к этой переменной приведет к появлению\n\tворнинга:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($test); // выведет null и ворнинг\n?&gt;</code>\n</div>\n<p>\n\tВорнинг также будет показан при попытке проверить\n\tпеременную на <code class=\"code inline\">null</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test !== null) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА вот проверка через команду <code class=\"code inline\">isset</code>\n\tне приведет к появлению ворнинга - он будет\n\tавтоматически подавлен:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (isset($test)) {\n\t\techo $test;\n\t} else {\n\t\techo 'variable does not exist';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Инвертирование высказывания</h2>\n<p>\n\tМожно выполнить обратную проверку, на то,\n\tчто переменная не определена. Для этого выполним\n\tинвертирование <code class=\"code inline\">isset</code> с помощью логического\n\t<code class=\"code inline\">НЕ</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif (!isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Элементы массивов</h2>\n<p>\n\tС помощью <code class=\"code inline\">isset</code> можно проверить существование\n\tэлемента массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t\n\tif (isset($arr['5'])) {\n\t\techo $arr['5'];\n\t} else {\n\t\techo 'element does not exist';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно также проверить элемент несуществующего\n\tмассива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (isset($arr['5'])) {\n\t\techo $arr['5'];\n\t} else {\n\t\techo 'array or element does not exist';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif (!isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '';\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = false;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tif (isset($arr[])) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/empty/","content":"\n\t\t\t\t<h1>Команда empty в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЗачастую в скриптах возникает нужда в проверке\n\tпеременной на <i>пустоту</i>. В PHP переменная\n\tбудет пустая, если она равна <code class=\"number inline\">0</code>, <code class=\"string inline\">''</code>,\n\t<code class=\"code inline\">'0'</code>, <code class=\"code inline\">false</code> или <code class=\"code inline\">null</code>.\n</p>\n<p>\n\tПроверка на пустоту выполняется с помощью\n\tкоманды <code class=\"code inline\">empty</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '';\n\t\n\tif (empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЧаще, однако, возникает обратная задача -\n\tпроверка на то, что переменная является не\n\tпустой. Давайте инвертируем наше условие:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '';\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif (empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = -1;\n\t\n\tif (empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '';\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = -1;\n\t\n\tif (empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = '0';\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = -1;\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif (empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = false;\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 'false';\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 'null';\n\t\n\tif (!empty($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 0;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = null;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНе запуская код, определите, что выведется\n\t\tна экран:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = false;\n\t\n\tif (isset($test)) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/shorthand-syntax/","content":"\n\t\t\t\t<h1>Сокращенный синтаксис if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля начала вам следует знать, что конструкция\n\t<code class=\"code inline\">else</code> не является обязательной. В следующем\n\tпримере текст выведется только в том случае,\n\tесли значение переменной равно <code class=\"number inline\">1</code>.\n\tВ противном случае просто ничего не случится:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 1;\n\t\n\tif ($test == 1) {\n\t\techo '+';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЕсли переменная <code class=\"code inline\">$test</code> равна <code class=\"number inline\">10</code>,\n\t\tто пусть на экран выведется слово <code class=\"string inline\">'верно'</code>.\n\t\tВ противном случае пусть ничего не произойдет.\n\t</p>\n</div>\n\n<h2>Необязательность фигурных скобок</h2>\n<p>\n\tВ случае, если в фигурных скобках <code class=\"code inline\">if</code>\n\tили <code class=\"code inline\">else</code> будет только одно выражение,\n\tможно эти фигурные скобки не писать. Пусть,\n\tк примеру, дан вот такой код со всеми скобками:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test == 0) {\n\t\techo '+';\n\t} else {\n\t\techo '-';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно сократить его вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test == 0) echo '+'; else echo '-';\n?&gt;</code>\n</div>\n<p>\n\tИли так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test == 0) {\n\t\techo '+';\n\t} else echo '-';\n?&gt;</code>\n</div>\n<p>\n\tМожно также убрать все скобки, но оформить\n\tвсе не в линию, а вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test == 0)\n\t\techo '+';\n\telse\n\t\techo '-';\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код в сокращенной форме:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test == 0) {\n\t\techo 'верно';\n\t} else {\n\t\techo 'неверно!';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код в сокращенной форме:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($test == 0) {\n\t\techo 'верно';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Замечание</h2>\n<p>\n\tНе смотря на то, что PHP допускает показанные\n\tвыше сокращения с фигурными скобками, я в\n\tобщем-то не рекомендую так делать, так как\n\tэто рассадник трудноуловимых ошибок.\n</p>\n<p>\n\tПусть к примеру есть следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 3;\n\t\n\tif ($test &gt; 0)\n\t\techo $test;\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь мы решили в том случае, если\n\tусловие выполняется, сделать еще и второе\n\t<code class=\"code inline\">echo</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 3;\n\t\n\tif ($test &gt; 0)\n\t\techo $test;\n\t\techo '+++';\n?&gt;</code>\n</div>\n<p>\n\tОднако, без фигурных скобок внутри условия\n\tнаходится только первый вывод, то есть первый\n\tвывод будет срабатывать при верном условии,\n\tа второй - всегда.\n</p>\n<p>\n\tФактически наш код эквивалентен такому:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 3;\n\t\n\tif ($test &gt; 0) {\n\t\techo $test;\n\t}\n\t\n\techo '+++'; // эта строка оказалась снаружи условия\n?&gt;</code>\n</div>\n<p>\n\tА мы бы хотели такой код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = 3;\n\t\n\tif ($test &gt; 0) {\n\t\t\techo $test;\n\t\t\techo '+++'; // эта строка внутри условия\n\t}\n?&gt;</code>\n</div>\n<p>\n\tИменно поэтому рекомендуется всегда выполнять\n\tрасстановку фигурных скобок, дабы не попадать\n\tв такого рода ошибки.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/combinations/","content":"\n\t\t\t\t<h1>Комбинации конструкций if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть переменная <code class=\"code inline\">$num</code> может принимать\n\tзначения <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code> или <code class=\"number inline\">3</code>.\n\tПусть также для каждого значения мы хотим\n\tвыводить на экран различные строки. Для решения\n\tзадачи можно просто написать три <code class=\"code inline\">if</code>\n\tбез конструкции <code class=\"code inline\">else</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1; // может быть 1, 2 или 3\n\t\n\tif ($num === 1) {\n\t\techo 'value1'; // сработает, если $num равно 1\n\t}\n\t\n\tif ($num === 2) {\n\t\techo 'value2'; // сработает, если $num равно 2\n\t}\n\t\n\tif ($num === 3) {\n\t\techo 'value3'; // сработает, если $num равно 3\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ переменной <code class=\"code inline\">$day</code> лежит какое-то число\n\t\tиз интервала от <code class=\"number inline\">1</code> до <code class=\"number inline\">31</code>. Определите\n\t\tв какую декаду месяца попадает это число.\n\t</p>\n</div>\n\n<h2>Конструкция elseif</h2>\n<p>\n\tПриведенный выше код можно переписать через\n\tспециальную конструкцию <code class=\"code inline\">elseif</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tif ($num === 1) {\n\t\techo 'value1';\n\t} elseif ($num === 2) {\n\t\techo 'value2';\n\t} elseif ($num === 3) {\n\t\techo 'value3';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРешите предыдущую задачу на декады месяца\n\t\tчерез конструкцию <code class=\"code inline\">elseif</code>.\n\t</p>\n</div>\n\n<h2>Преимущество elseif</h2>\n<p>\n\tПреимуществом использования <code class=\"code inline\">elseif</code>\n\tвместо нескольких ифов является возможность\n\tотловить ситуацию, когда значение переменной\n\t<code class=\"code inline\">$num</code> не подходит ни под одно из условий:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tif ($num === 1) {\n\t\techo 'value1';\n\t} elseif ($num === 2) {\n\t\techo 'value2';\n\t} elseif ($num === 3) {\n\t\techo 'value3';\n\t} else {\n\t\techo 'неверное значение переменной $num';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы,\n\t\tесли в переменной <code class=\"code inline\">$day</code> будет не число\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">31</code>, выдавалось сообщение\n\t\tоб ошибке.\n\t</p>\n</div>\n\n<h2>Вложенные if</h2>\n<p>\n\tКонструкции <code class=\"code inline\">if else</code> можно вкладывать\n\tдруг в друга произвольным образом. Смотрите\n\tпример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3;\n\t\n\tif ($num &gt;= 0) {\n\t\tif ($num &lt;= 5) {\n\t\t\techo 'меньше или равно 5';\n\t\t} else {\n\t\t\techo 'больше 5';\n\t\t}\n\t} else {\n\t\techo 'меньше нуля';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в переменной <code class=\"code inline\">$age</code> хранится число.\n\t\tЕсли это число меньше <code class=\"number inline\">10</code> или больше\n\t\t<code class=\"number inline\">99</code>, то выведите на экран сообщение\n\t\tоб этом. Если же число попадает в указанный\n\t\tдиапазон, то найдите сумму цифр этого числа.\n\t\tЕсли полученная сумма меньше или равна <code class=\"number inline\">9</code>,\n\t\tто выведите на экран сообщение о том, что\n\t\tсумма цифр однозначна, в противном случае\n\t\tвыведите сообщение о том, что сумма цифр\n\t\tдвузначна.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/examples/","content":"\n\t\t\t\t<h1>Примеры использования if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<h2>Четверть часа</h2>\n<p>\n\tПусть у нас есть переменная <code class=\"code inline\">$min</code>,\n\tв которой хранится количество минут от <code class=\"number inline\">0</code>\n\tдо <code class=\"number inline\">59</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$min = 10;\n?&gt;</code>\n</div>\n<p>\n\tДавайте определим, в какую четверть часа\n\tпопадает указанное количество минут:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$min = 10;\n\t\n\tif ($min &gt;= 0 and $min &lt;= 14) {\n\t\techo '1 четверть';\n\t}\n\t\n\tif ($min &gt;= 15 and $min &lt;= 29) {\n\t\techo '2 четверть';\n\t}\n\t\n\tif ($min &gt;= 30 and $min &lt;= 44) {\n\t\techo '3 четверть';\n\t}\n\t\n\tif ($min &gt;= 45 and $min &lt;= 59) {\n\t\techo '4 четверть';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРешите аналогичную задачу, только определите\n\t\tв какую треть часа попадает указанное количество\n\t\tминут.\n\t</p>\n</div>\n\n<h2>Длина строк и массивов</h2>\n<p>\n\tПусть у нас есть переменная <code class=\"code inline\">$str</code>,\n\tв которой хранится некоторая произвольная строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n?&gt;</code>\n</div>\n<p>\n\tДавайте напишем условие, которое выведет\n\tсообщение на экран, если длина строки равна\n\tили больше трех символов:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n\t\n\tif (strlen($str) &gt;= 3) {\n\t\techo '!';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ переменной <code class=\"code inline\">$arr</code> содержится некоторый\n\t\tмассив с числами. Напишите условие, которое\n\t\tпроверит, что в массиве <code class=\"number inline\">3</code> элемента.\n\t\tЕсли это так, выведите на экран сумму элементов\n\t\tмассива.\n\t</p>\n</div>\n\n<h2>Проверка символа строки</h2>\n<p>\n\tПусть дана некоторая строка, состоящая из цифр:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n?&gt;</code>\n</div>\n<p>\n\tДавайте проверим, равен ли первый символ\n\tэтой строки числу <code class=\"number inline\">1</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n\t\n\tif ($str[0] == 1) {\n\t\techo '!';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПроверим теперь последний символ на равенство\n\tчислу <code class=\"number inline\">5</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12345';\n\t$last = $str[strlen($str) - 1];\n\t\n\tif ($last == 5) {\n\t\techo '!';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Остаток от деления</h2>\n<p>\n\tПусть у нас есть две переменные с числами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n?&gt;</code>\n</div>\n<p>\n\tДавайте найдем остаток от деления одной переменной\n\tна другую:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n\t\n\techo $a % $b; // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь в переменных хранятся такие\n\tзначения, что одна переменная делится на\n\tвторую нацело:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 5;\n\t\n\techo $a % $b; // выведет 0\n?&gt;</code>\n</div>\n<p>\n\tДавайте напишем скрипт, который будет проверять,\n\tделится ли нацело одно число на второе:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n\t\n\tif ($a % $b === 0) {\n\t\techo 'делится нацело';\n\t} else {\n\t\techo 'делится с остатком';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь требуется, если число делится\n\tс остатком, вывести этот остаток на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n\t\n\tif ($a % $b === 0) {\n\t\techo 'делится нацело';\n\t} else {\n\t\techo 'делится с остатком ' . $a % $b;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ приведенном выше коде получается, что остаток\n\tвычисляется в двух местах, а это не оптимально.\n</p>\n<p>\n\tПоправим проблему:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 10;\n\t$b = 3;\n\t$rest = $a % $b;\n\t\n\tif ($rest === 0) {\n\t\techo 'делится нацело';\n\t} else {\n\t\techo 'делится с остатком ' . $rest;\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tКак известно, четные числа делятся на <code class=\"number inline\">2</code>\n\t\tбез остатка, а нечетные - с остатком. Пусть\n\t\tу вас дано число. С помощью оператора <code class=\"code inline\">%</code>\n\t\tи конструкции <code class=\"code inline\">if</code> проверьте четное\n\t\tэто число или нет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число. Проверьте, что оно делится на\n\t\t<code class=\"number inline\">3</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/practicum/","content":"\n\t\t\t\t<h1>Практика на условия if-else в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tВ переменной <code class=\"code inline\">$month</code> лежит какое-то\n\t\tчисло из интервала от <code class=\"number inline\">1</code> до <code class=\"number inline\">12</code>.\n\t\tОпределите в какую пору года попадает этот\n\t\tмесяц (зима, лето, весна, осень).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка, состоящая из символов, например,\n\t\t<code class=\"string inline\">'abcde'</code>. Проверьте, что первым символом\n\t\tэтой строки является буква <code class=\"string inline\">'a'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число, например, <code class=\"number inline\">12345</code>. Проверьте,\n\t\tчто первым символом этого числа является\n\t\tцифра <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code> или <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано трехзначное число. Найдите сумму цифр\n\t\tэтого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число из <code class=\"number inline\">6</code>-ти цифр. Проверьте,\n\t\tчто сумма первых трех цифр равняется сумме\n\t\tвторых трех цифр.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/switch-case/","content":"\n\t\t\t\t<h1>Конструкция switch-case в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ PHP есть специальная конструкция <code class=\"code inline\">switch-case</code>,\n\tкоторая используется для выбора одного значения\n\tиз некоторого ряда значений. Изучите ее синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tswitch (переменная) {\n\t\tcase 'значение1':\n\t\t\t/*\n\t\t\t\tздесь код, который выполнится в случае,\n\t\t\t\tесли переменная имеет значение1\n\t\t\t*/\n\t\tbreak;\n\t\tcase 'значение2':\n\t\t\t/*\n\t\t\t\tздесь код, который выполнится в случае,\n\t\t\t\tесли переменная имеет значение2\n\t\t\t*/\n\t\tbreak;\n\t\tcase 'значение3':\n\t\t\t/*\n\t\t\t\tздесь код, который выполнится в случае,\n\t\t\t\tесли переменная имеет значение3\n\t\t\t*/\n\t\tbreak;\n\t\tdefault:\n\t\t\t/*\n\t\t\t\tздесь код, который выполнится в случае,\n\t\t\t\tесли не совпала ни с одним значением\n\t\t\t*/\n\t\tbreak;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы можете заметить, <code class=\"code inline\">switch-case</code>\n\tпредставляет собой альтернативу множеству\n\t<code class=\"code inline\">elseif</code>. Давайте посмотрим на примере.\n\tПусть у нас есть вот такой код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$lang = 'ru';\n\t\n\tif ($lang === 'ru') {\n\t\techo 'рус';\n\t} elseif ($lang === 'en') {\n\t\techo 'анг';\n\t} elseif ($lang === 'de') {\n\t\techo 'нем';\n\t} else {\n\t\techo 'язык не поддерживается';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПерепишем этот код через конструкцию <code class=\"code inline\">switch-case</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$lang = 'ru';\n\t\n\tswitch ($lang) {\n\t\tcase 'ru':\n\t\t\techo 'рус';\n\t\tbreak;\n\t\tcase 'en':\n\t\t\techo 'англ';\n\t\tbreak;\n\t\tcase 'de':\n\t\t\techo 'нем';\n\t\tbreak;\n\t\tdefault:\n\t\t\techo 'язык не поддерживается';\n\t\tbreak;\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеременная <code class=\"code inline\">$num</code> может принимать значения\n\t\t<code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>, <code class=\"number inline\">3</code> или <code class=\"number inline\">4</code>.\n\t\tОпределите, в какую пору года попадает значение\n\t\tэтой переменной.\n\t</p>\n</div>\n\n<h2>Необязательность default</h2>\n<p>\n\tБлок <code class=\"code inline\">default</code> является необязательным.\n\tДавайте его уберем из предыдущего кода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$lang = 'ru';\n\t\n\tswitch ($lang) {\n\t\tcase 'ru':\n\t\t\techo 'рус';\n\t\tbreak;\n\t\tcase 'en':\n\t\t\techo 'англ';\n\t\tbreak;\n\t\tcase 'de':\n\t\t\techo 'нем';\n\t\tbreak;\n\t}\n?&gt;</code>\n</div>\n\n<h2>Необязательность break</h2>\n<p>\n\tКоманда <code class=\"code inline\">break</code> является необязательной.\n\tБез нее, однако, поведение блоков <code class=\"code inline\">case</code>\n\tбудет неожиданным. Давайте посмотрим на примере.\n\tПусть у нас есть вот такой код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tswitch ($num) {\n\t\tcase 1:\n\t\t\techo 1;\n\t\tbreak;\n\t\tcase 2:\n\t\t\techo 2;\n\t\tbreak;\n\t\tcase 3:\n\t\t\techo 3;\n\t\tbreak;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУберем в нем все <code class=\"code inline\">break</code>, а в переменную\n\t<code class=\"code inline\">$num</code> для начала запишем число <code class=\"number inline\">3</code>.\n</p>\n<p>\n\tПока все будет работать так, как и работало:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 3; // пусть здесь число 3\n\t\n\tswitch ($num) {\n\t\tcase 1:\n\t\t\techo 1;\n\t\tcase 2:\n\t\t\techo 2;\n\t\tcase 3:\n\t\t\techo 3;\n\t}\n\t\n\t// После запуска код выведет 3 - все хорошо\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь в переменную <code class=\"code inline\">$num</code> запишем\n\tчисло <code class=\"number inline\">2</code>. В этом случае у нас ожидаемо\n\tвыполнится <code class=\"code inline\">case 2</code>, а затем неожиданно\n\tеще и <code class=\"code inline\">case 3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 2;\n\t\n\tswitch ($num) {\n\t\tcase 1:\n\t\t\techo 1;\n\t\tcase 2:\n\t\t\techo 2;\n\t\tcase 3:\n\t\t\techo 3;\n\t}\n\t\n\t// После запуска код выведет 2, а затем 3\n?&gt;</code>\n</div>\n<p>\n\tЕсли же в переменную <code class=\"code inline\">$num</code> записать\n\tчисло <code class=\"number inline\">1</code>, то вообще выполнятся все\n\tконструкции <code class=\"code inline\">case</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tswitch ($num) {\n\t\tcase 1:\n\t\t\techo 1;\n\t\tcase 2:\n\t\t\techo 2;\n\t\tcase 3:\n\t\t\techo 3;\n\t}\n\t\n\t// После запуска код выведет 1, затем 2, а затем 3\n?&gt;</code>\n</div>\n<p>\n\tТо есть получается, что при отсутствии <code class=\"code inline\">break</code>\n\tпосле выполнения задуманного <code class=\"code inline\">case</code>,\n\tвыполнятся и все <code class=\"code inline\">case</code> ниже него. Иногда\n\tтакую особенность используют, при решении задач.\n</p>\n<p>\n\tВ следующем примере, если переменная <code class=\"code inline\">$num</code>\n\tимеет значение <code class=\"number inline\">1</code> или <code class=\"number inline\">2</code>, то\n\tв переменную <code class=\"code inline\">$result</code> запишется <code class=\"string inline\">'a'</code>.\n\tЕсли же переменная <code class=\"code inline\">$num</code> имеет значение\n\t<code class=\"number inline\">3</code>, то в переменную <code class=\"code inline\">$result</code>\n\tзапишется <code class=\"string inline\">'b'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tswitch ($num) {\n\t\tcase 1:\n\t\tcase 2:\n\t\t\t$result = 'a';\n\t\tbreak;\n\t\tcase 3:\n\t\t\t$result = 'b';\n\t\tbreak;\n\t}\n\t\n\techo $result;\n?&gt;</code>\n</div>\n<p>\n\tВыше я написал, что иногда такую особенность\n\tиспользуют, но я, в общем-то, не рекомендую\n\tей пользоваться, так как код становится не\n\tочень очевидным.\n</p>\n<p>\n\tОчевиднее решить такую задачу через ифы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 1;\n\t\n\tif ($num == 1 or $num == 2) {\n\t\t$result = 'a';\n\t}\n\t\n\tif ($num == 3) {\n\t\t$result = 'b';\n\t}\n\t\n\techo $result;\n?&gt;</code>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/ternary-operator/","content":"\n\t\t\t\t<h1>Тернарный оператор в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть следующий код, проверяющий\n\tесть ли уже пользователю <code class=\"number inline\">18</code> лет или нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$age = 17;\n\t\n\tif ($age &gt;= 18) {\n\t\t$adult = true;\n\t} else {\n\t\t$adult = false;\n\t}\n\t\n\tvar_dump($adult);\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, конструкция <code class=\"code inline\">if-else</code>\n\tнужна только для того, чтобы записать определенное\n\tзначение в переменную <code class=\"code inline\">$adult</code>. Для\n\tтаких задач, когда у нас в условии происходит\n\tтолько запись одной переменной, существует\n\tболее короткое решение через так называемый\n\t<dfn>тернарный оператор</dfn>.\n</p>\n<p>\n\tЕго синтаксис таков:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tпеременная = условие ? значение1 : значение2;\n?&gt;</code>\n</div>\n<p>\n\tОператор работает так: если условие истинно,\n\tто возвращается <i>значение1</i>, в противном\n\tслучае - <i>значение2</i>. Давайте перепишем\n\tприведенный в самом начале урока код через\n\tтернарный оператор:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$age = 17;\n\t$adult = $age &gt;= 18 ? true: false;\n\tvar_dump($adult);\n?&gt;</code>\n</div>\n<p>\n\tМожно, кстати, не записывать результат в\n\tпеременную, а сразу вывести в через <code class=\"code inline\">var_dump</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$age = 17;\n\tvar_dump( $age &gt;= 18 ? true: false );\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дана переменная <code class=\"code inline\">$num</code>, которая\n\t\tможет быть либо отрицательной, либо положительной.\n\t\tЗапишите в переменную <code class=\"code inline\">$result</code> число\n\t\t<code class=\"number inline\">1</code>, если переменная <code class=\"code inline\">$num</code> больше\n\t\tили равна нулю, и число <code class=\"number inline\">-1</code>, если переменная\n\t\t<code class=\"code inline\">$num</code> меньше нуля.\n\t</p>\n</div>\n\n<h2>Замечания</h2>\n<p class=\"notice\">\n\tТернарный оператор следует использовать только в\n\tсамых простых случаях, так как его использование\n\tзатрудняет понимание кода.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/null-coalescing/","content":"\n\t\t\t\t<h1>Оператор объединения с null в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (isset($arr['test'])) {\n\t\t$elem = $arr['test'];\n\t} else {\n\t\t$elem = 'empty';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЭтот код можно переписать через\n\tтернарный оператор:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$elem = isset($arr['test']) ? $arr['test'] : 'empty';\n?&gt;</code>\n</div>\n<p>\n\tОднако, и первый вариант кода, и второй,\n\tвызывают некоторое неудобство. Для упрощения\n\tтаких конструкций был придуман <dfn>оператор\n\tобъединения с null</dfn>, представляющий\n\tсобой команду <code class=\"code inline\">??</code>. Перепишем наш\n\tкод через этот оператор:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$elem = $arr['test'] ?? 'empty';\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код через\n\t\tизученный оператор:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$user = ['name' =&gt; 'john', 'age' =&gt; 30];\n\t\n\tif (isset($user['name'])) {\n\t\t$name = $user['name'];\n\t} else {\n\t\t$name = 'unknown';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Цепочка</h2>\n<p>\n\tОператоры объединения можно вызывать\n\tдруг за другом цепочкой. В следующем примере\n\tв переменную запишется либо первый элемент массива,\n\tлибо второй элемент массива, либо заданная строка,\n\tесли этих элементов нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$elem = $arr['test1'] ?? $arr['test2'] ?? 'empty';\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерепишите следующий код через\n\t\tизученный оператор:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (isset($user['name'])) {\n\t\t$result = $user['name'];\n\t} elseif (isset($user['surname'])) {\n\t\t$result = $user['surname'];\n\t} else {\n\t\t$result = '';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/conditions/logical-operations/","content":"\n\t\t\t\t<h1>Логические операции в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте посмотрим на следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\t$b = 2;\n\t\n\tif ($a == $b) {\n\t\tvar_dump(true);\n\t} else {\n\t\tvar_dump(false);\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, в данном коде выполняется\n\tсравнение переменных <code class=\"code inline\">a</code> и <code class=\"code inline\">b</code>\n\tи, если они равны, то в консоль выводится\n\t<code class=\"code inline\">true</code>, а если не равны - то <code class=\"code inline\">false</code>.\n</p>\n<p>\n\tЗдесь пришло время открыть вам некоторую\n\tнеочевидную вещь: на самом деле конструкция\n\t<code class=\"code inline\">if</code> не является обязательной для сравнения\n\t- сами операторы вида ==, ===, !=, <, > и\n\tт.д. возвращают своим результатом либо <code class=\"code inline\">true</code>,\n\tлибо <code class=\"code inline\">false</code>.\n</p>\n<p>\n\tСмотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump(1 == 1); // выведет true\n\tvar_dump(1 == 2); // выведет false\n?&gt;</code>\n</div>\n<p>\n\tИсходя из написанного, код из начала урока\n\tможно переписать более простым образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\t$b = 2;\n\t\n\tvar_dump($a == $b);\n?&gt;</code>\n</div>\n<p>\n\tМожно не выводить результат сразу, а присвоить\n\tего какой-нибудь переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 1;\n\t$b = 2;\n\t\n\t$result = $a == $b;\n\tvar_dump($result);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть даны следующие переменные:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 * (3 - 1);\n\t$b = 6 - 2;\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tИспользуя оператор <code class=\"code inline\">==</code>, узнайте, равны\n\t\tли значения этих переменных или нет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть даны следующие переменные:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 5 * (7 - 4);\n\t$b = 1 + 2 + 7;\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tИспользуя оператор <code class=\"code inline\">></code>, узнайте, больше\n\t\tли переменная <code class=\"code inline\">$a</code>, чем <code class=\"code inline\">$b</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть даны следующие переменные:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$a = 2 ** 4;\n\t$b = 4 ** 2;\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tИспользуя оператор <code class=\"code inline\">!=</code>, узнайте, разные\n\t\tли значения этих переменных или нет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/while/","content":"\n\t\t\t\t<h1>Цикл while в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы с вами начнем изучение\n\t<dfn>циклов</dfn>.\n</p>\n<p>\n\tЦиклы используются для того, чтобы некоторый\n\tучасток кода выполнился несколько раз подряд.\n\tЗачем это нужно - представьте, что вам нужно\n\tвозвести в квадрат <code class=\"number inline\">100</code> элементов массива.\n\tЕсли обращаться к каждому элементу отдельно\n\tпо его ключу - это займет <code class=\"number inline\">100</code> строчек\n\tкода, и для того, чтобы написать этого код,\n\tнужно будет потратить довольно много времени.\n</p>\n<p>\n\tНо это не нужно - у нас есть возможность\n\tсделать так, чтобы PHP за нас выполнил некоторую\n\tоперацию нужное количество раз. Например,\n\tвозвел все элементы массива в квадрат. Это\n\tи делается с помощью циклов.\n</p>\n<p>\n\tНачнем наше изучение циклов с цикла <code class=\"code inline\">while</code>.\n</p>\n<p>\n\tЦикл <code class=\"code inline\">while</code> будет выполняться до тех\n\tпор, пока верно (истинно) выражение, переданное\n\tему параметром. Смотрите синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\twhile ( пока выражение истинно ) {\n\t\tвыполняем этот код циклически\n\t\tв начале каждого цикла проверяем выражение в круглых скобках\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЦикл закончится, когда выражение перестанет\n\tбыть истинным. Если оно было ложным изначально\n\t- то он не выполнится ни разу.\n</p>\n<p>\n\tДавайте для примера последовательно выведем\n\tс помощью цикла <code class=\"code inline\">while</code> числа от одного\n\tдо пяти:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1; // задаем какую-нибудь переменную\n\t\n\twhile ($i &lt;= 5) {\n\t\techo $i; // выводим содержимое $i в консоль\n\t\t$i++;    // увеличиваем $i на единицу при каждом проходе цикла\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКаждый проход цикла по-научному называется\n\t<dfn>итерацией</dfn> цикла. Можно сказать, что\n\tмы увеличиваем нашу переменную <code class=\"code inline\">$i</code>\n\tна единицу в каждой итерации цикла.\n</p>\n<p>\n\tСама переменная <code class=\"code inline\">$i</code> называется <dfn>счетчиком\n\tцикла</dfn>. Счетчики используются для того,\n\tчтобы подсчитывать, сколько раз выполнился\n\tцикл. Кроме того, они выполняют вспомогательную\n\tроль - в нашей задаче мы использовали счетчик,\n\tчтобы вывести цифры от <code class=\"number inline\">1</code> до <code class=\"number inline\">5</code>.\n\tДля счетчиков принято использовать буквы\n\t<code class=\"code inline\">i</code>, <code class=\"code inline\">j</code> и <code class=\"code inline\">k</code>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран числа от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран числа <code class=\"number inline\">11</code> до <code class=\"number inline\">33</code>.\n\t</p>\n</div>\n\n<h2>Более сложный цикл</h2>\n<p>\n\tК счетчику не обязательно прибавлять единицу.\n\tДавайте для примера выведем столбец четных\n\tчисел от <code class=\"number inline\">2</code> до <code class=\"number inline\">10</code>. Для этого\n\tначальное значение переменной <code class=\"code inline\">$i</code> зададим\n\tкак <code class=\"number inline\">2</code> и будем прибавлять двойку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 2;\n\t\n\twhile ($i &lt;= 10) {\n\t\techo $i;\n\t\t$i += 2; // увеличиваем $i на 2 при каждом проходе цикла\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран четные числа в промежутке\n\t\tот <code class=\"number inline\">0</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран нечетные числа в промежутке\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">99</code>.\n\t</p>\n</div>\n\n<h2>Обратный отсчет</h2>\n<p>\n\tСчетчик не обязательно должен увеличиваться\n\tв цикле. Бывают и обратные ситуации, когда\n\tсчетчик, наоборот, уменьшается. Давайте для\n\tпримера выведем столбец чисел от <code class=\"number inline\">10</code>\n\tдо <code class=\"number inline\">1</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 10; // начальное значение 10\n\t\n\twhile ($i &gt;= 1) { // пока $i больше 1\n\t\techo $i;\n\t\t$i--; // уменьшаем $i на единицу\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран числа от <code class=\"number inline\">30</code> до <code class=\"number inline\">0</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/while-mistakes/","content":"\n\t\t\t\t<h1>Ошибки начинающих при работе с циклом while в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЦикл <code class=\"code inline\">while</code> может выполняться бесконечно\n\t(это приведет к зависанию скрипта и страницы\n\tбраузера), достаточно передать ему выражение,\n\tкоторое <i>никогда не станет ложным</i>.\n\tНапример, так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$test = true;\n\t\n\twhile ($test === true) {\n\t\t/*\n\t\t\tНаписанный здесь код будет выполняться \"вечно\"\n\t\t\t(пока скрипт не будет остановлен принудительно).\n\t\t*/\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНачинающие программисты время от времени\n\tзагоняют свою программу в бесконечный цикл\n\t(с вами это тоже обязательно случится пару раз).\n</p>\n<p>\n\tДавайте рассмотрим распространенные ошибки\n\tначинающих.\n</p>\n\n<h2>Ошибка 1</h2>\n<p>\n\tПусть есть вот такой цикл, выводящий числа\n\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1;\n\t\n\twhile ($i &lt;= 10) {\n\t\techo $i;\n\t\t$i++;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПредставим теперь, что программист забыл\n\tсделать увеличение счетчика в цикле:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1;\n\t\n\twhile ($i &lt;= 10) {\n\t\techo $i;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае цикл будет выполнятся бесконечно,\n\tтак как условие, при котором цикл закончится,\n\tникогда не будет достигнуто.\n</p>\n\n<h2>Ошибка 2</h2>\n<p>\n\tПусть опять наш программист хотел выводить\n\tчисла от <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code>, однако, вместо\n\t<code class=\"code inline\">++</code> написал <code class=\"sql inline\">--</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1;\n\t\n\twhile ($i &lt;= 10) {\n\t\techo $i;\n\t\t$i--; // перепутал ++ и --\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае, хотя счетчик и изменяется,\n\tно он изменяется не в ту сторону - и опять\n\tусловие никогда не будет достигнуто.\n</p>\n\n<h2>Ошибка 3</h2>\n<p>\n\tБывает и обратная проблема - можно так написать\n\tкод, что условие цикла уже изначально будет\n\tневерно и цикл просто не запустится. Пусть,\n\tк примеру, программист хотел вывести столбец\n\tчисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code>, однако, вместо\n\tзнака <code class=\"code inline\">меньше</code> написал знак <code class=\"code inline\">больше</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1;\n\t\n\twhile ($i &gt; 10) { // правильно было написать $i &lt; 10\n\t\techo $i;\n\t\t$i++;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ таком случае цикл просто не начнется, так\n\tкак условие изначально неверно.\n</p>\n\n<h2>Ошибка 4</h2>\n<p>\n\tБывает и так, что некоторым начинающим кажется,\n\tчто цикл крутится не <i>пока условие верно</i>,\n\tа наоборот - цикл крутится пока условие не\n\tверно и остановится, когда оно станет верным.\n</p>\n<p>\n\tВот пример такого кода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1;\n\t\n\twhile ($i == 10) { // зачем-то написано ==\n\t\techo $i;\n\t\t$i++;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПри таком условии цикл вообще не начнется,\n\tтак как условие просто изначально не верно.\n</p>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tВ следующем коде программист вывел числа\n\t\tот <code class=\"number inline\">10</code> до <code class=\"number inline\">1</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 10;\n\t\n\twhile ($i &gt;= 1) {\n\t\techo $i;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВ коде, однако, была допущена ошибка, которая\n\t\tпривела к тому, что цикл выполняется бесконечно.\n\t\tИсправьте ошибку программиста.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ следующем коде программист вывел числа\n\t\tот <code class=\"number inline\">10</code> до <code class=\"number inline\">1</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 10;\n\t\n\twhile ($i &gt;= 1) {\n\t\techo $i;\n\t\t$i++;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВ коде, однако, была допущена ошибка, которая\n\t\tпривела к тому, что цикл выполняется бесконечно.\n\t\tИсправьте ошибку программиста.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ следующем коде программист вывел числа\n\t\tот <code class=\"number inline\">10</code> до <code class=\"number inline\">1</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 10;\n\t\n\twhile ($i &lt;= 0) {\n\t\techo $i;\n\t\t$i--;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВ коде, однако, была допущена ошибка, которая\n\t\tпривела к тому, что на экран ничего не вывелось.\n\t\tИсправьте ошибку программиста.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ следующем коде программист вывел числа\n\t\tот <code class=\"number inline\">10</code> до <code class=\"number inline\">1</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 10;\n\t\n\twhile ($i == 0) {\n\t\techo $i;\n\t\t$i--;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВ коде, однако, была допущена ошибка, которая\n\t\tпривела к тому, что на экран ничего не вывелось.\n\t\tИсправьте ошибку программиста.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ следующем коде программист вывел числа\n\t\tот <code class=\"number inline\">10</code> до <code class=\"number inline\">1</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 10;\n\t\n\twhile ($i == 10) {\n\t\techo $i;\n\t\t$i--;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВ коде, однако, была допущена ошибка, которая\n\t\tпривела к тому, что цикл вывел только число\n\t\t<code class=\"number inline\">10</code> и закончил свою работу. Исправьте\n\t\tошибку программиста.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/for/","content":"\n\t\t\t\t<h1>Цикл for в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЦикл <code class=\"code inline\">for</code> является альтернативой <code class=\"code inline\">while</code>.\n\tОн более сложен для понимания, но чаще всего\n\tего любят больше за то, что он занимает меньше\n\tстрочек.\n</p>\n<p>\n\tВот его синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ( начальные команды; условие окончания; команды после прохода ) {\n\t\tтело цикла\n\t}\n?&gt;</code>\n</div>\n<p>\n\t<dfn>Начальные команды</dfn> - это то, что выполнится\n\tперед стартом цикла. Они выполнятся только\n\tодин раз. Обычно там размещают начальные\n\tзначения счетчиков. <dfn>Условие окончания</dfn>\n\t- это условие, при котором цикл будет крутится,\n\tпока оно истинное. <dfn>Команды после прохода</dfn>\n\t- это команды, которые будут выполнятся каждый\n\tраз при окончании прохода цикла. Обычно там\n\tувеличивают счетчики.\n</p>\n<p>\n\tДавайте с помощью цикла <code class=\"code inline\">for</code> выведем\n\tпоследовательно числа от <code class=\"number inline\">1</code> до <code class=\"number inline\">9</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t/*\n\t\tВ начале цикла $i будет равно нулю,\n\t\tцикл будет выполнятся пока $i &lt;= 9,\n\t\tпосле каждого прохода к $i прибавляется единица:\n\t*/\n\tfor ($i = 0; $i &lt;= 9; $i++) {\n\t\techo $i; // выведет 1, 2... 9\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tчисла от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tчисла от <code class=\"number inline\">11</code> до <code class=\"number inline\">33</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tчетные числа в промежутке от <code class=\"number inline\">0</code> до\n\t\t<code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tнечетные числа в промежутке от <code class=\"number inline\">1</code> до\n\t\t<code class=\"number inline\">99</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tчисла от <code class=\"number inline\">100</code> до <code class=\"number inline\">0</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/result-loop-accumulation/","content":"\n\t\t\t\t<h1>Накопление результата в цикле PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте с помощью цикла найдем сумму целых\n\tчисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>. Для таких\n\tзадач существует стандартное решение, которое\n\tмы сейчас разберем. Это решение заключается\n\tв том, что циклом перебираются числа и их\n\tсумма последовательно записывается в какую-то\n\tпеременную переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = 0;\n\t\n\tfor ($i = 1; $i &lt;= 100; $i++) {\n\t\t$result = $result + $i;\n\t}\n\t\n\techo $result; // искомая сумма\n?&gt;</code>\n</div>\n<p>\n\tКак это работает: изначально переменная <code class=\"code inline\">$result</code>\n\tимеет значение <code class=\"number inline\">0</code>, затем при первом\n\tпроходе цикла в нее записывается ее текущее\n\tсодержимое плюс значение счетчика. Получится,\n\tчто каждую итерацию наша переменная будет\n\tрасти, постепенно накапливая в себе результат.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tНайдите произведение целых чисел от <code class=\"number inline\">1</code>\n\t\tдо <code class=\"number inline\">20</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите сумму четных чисел от <code class=\"number inline\">2</code> до\n\t\t<code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите сумму нечетных чисел от <code class=\"number inline\">1</code>\n\t\tдо <code class=\"number inline\">99</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/foreach/","content":"\n\t\t\t\t<h1>Цикл foreach в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЦикл <code class=\"code inline\">foreach</code> используется для прохождения\n\tпо всем элементам массива.\n</p>\n<p>\n\tСинтаксис такой: пишется ключевое слово <code class=\"code inline\">foreach</code>,\n\tа после него круглые скобки <code class=\"code inline\">()</code>. В\n\tэтих скобках указывается переменная, в которой\n\tлежит перебираемый массив, потом слово <code class=\"code inline\">as</code>,\n\tа после него - переменная, в которую при\n\tкаждом проходе цикла будет попадать элемент\n\tмассива. Затем должны идти фигурные скобки\n\t<code class=\"code inline\">{}</code>, в которых будет расположено <dfn>тело\n\tцикла</dfn>.\n</p>\n<p>\n\tИтак, синтаксис нашего цикла выглядит так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach (имяМассива as переменнаяДляЭлемента) {\n\t\t/*\n\t\t\tКод, который находится между фигурными\n\t\t\tскобками будет повторяться столько раз,\n\t\t\tсколько элементов у массива.\n\t\t*/\n\t}\n?&gt;</code>\n</div>\n\n<h2>Пример 1</h2>\n<p>\n\tДавайте с помощью цикла <code class=\"code inline\">foreach</code> выведем\n\tна экран все элементы массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo $elem;\n\t}\n?&gt;</code>\n</div>\n\n<h2>Пример 2</h2>\n<p>\n\tА теперь сделаем так, чтобы элементы массива\n\tвыводились не в строчку, а получился столбец.\n\tДля этого при выводе элемента массива будем\n\tставить после него тег <a href=\"/ru/markup/manual/html/tag/br/\"><code class=\"code inline\">br</code></a>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo $elem . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Пример 3</h2>\n<p>\n\tПереберем массив с числами циклом и выведем\n\tна экран квадраты этих чисел:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo $elem * $elem . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n\n<h2>Пример 4</h2>\n<p>\n\tДавайте с помощью цикла найдем сумму элементов\n\tмассива. Для этого используем уже изученный\n\tнами <a href=\"/ru/php/book/prime/loops/result-loop-accumulation/\">прием\n\tдля накопления результата в цикле</a>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$res = 0;\n\t\n\tforeach ($arr as $elem) {\n\t\t$res += $elem;\n\t}\n\t\n\techo $res;\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите столбец элементов этого массива на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму элементов этого массива и выведите\n\t\tее на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите среднее арифметическое его элементов.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/foreach-keys/","content":"\n\t\t\t\t<h1>Получение ключей в цикле foreach в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ цикле <code class=\"code inline\">foreach</code> можно получать не\n\tтолько элементы перебираемого массива, но\n\tи ключи. В таком случае после as следует\n\tуказать такую конструкцию: <code class=\"code inline\">$ключ => $элемент</code>.\n\tВ переменной <code class=\"code inline\">$ключ</code> будут хранится\n\tключи, а в переменной <code class=\"code inline\">$элемент</code> - соответствующие\n\tэтим ключам элементы.\n</p>\n<p>\n\tЧтобы посмотреть на практике, как работать\n\tс ключами, давайте сделаем следующее - при\n\tкаждом проходе цикла будем выводить на экран\n\tключ массива и соответствующий ему элемент\n\tчерез дефис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4, 'e' =&gt; 5];\n\t\n\tforeach ($arr as $key =&gt; $elem) {\n\t\techo $key.'-'.$elem; // выведет: 'a-1', 'b-2', 'c-3' и так далее...\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['green' =&gt; 'зеленый', 'red' =&gt; 'красный','blue' =&gt; 'голубой'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">foreach</code> выведите на\n\t\tэкран столбец ключей и элементов в формате\n\t\t<i>green - зеленый</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['user1' =&gt; 30, 'user2' =&gt; 32, 'user3' =&gt; 33];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">foreach</code> выведите на\n\t\tэкран столбец строк такого формата: <i>user1\n\t\t- возраст <code class=\"number inline\">30</code> лет</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/foreach-and-if/","content":"\n\t\t\t\t<h1>Перебор массива и if в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВнутри цикла <code class=\"code inline\">foreach</code> можно использовать\n\tусловие <code class=\"code inline\">if</code>. Давайте, например, при\n\tпереборе массива, будем выводить на экран\n\tтолько элементы с четными числами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem % 2 == 0) {\n\t\t\techo $elem;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">foreach</code> и оператора\n\t\t<code class=\"code inline\">if</code> выведите в консоль нечетные элементы\n\t\tмассива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [2, 5, 9, 15, 1, 4];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">foreach</code> и оператора\n\t\t<code class=\"code inline\">if</code> выведите в консоль те элементы\n\t\tмассива, которые больше <code class=\"code inline\">3-х</code>, но меньше\n\t\t<code class=\"number inline\">10</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Числа могут быть положительными\n\t\tи отрицательными. Найдите сумму положительных\n\t\tэлементов массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [10, 20, 30, 50, 235, 3000];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран только те числа из массива,\n\t\tкоторые начинаются на цифру <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>\n\t\tили <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоставьте массив дней недели. С помощью цикла\n\t\t<code class=\"code inline\">foreach</code> выведите все дни недели, а\n\t\tвыходные дни выведите жирным.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоставьте массив дней недели. С помощью цикла\n\t\t<code class=\"code inline\">foreach</code> выведите все дни недели, а\n\t\tтекущий день выведите <i>курсивом</i>. Номер\n\t\tтекущего дня должен храниться в переменной\n\t\t<code class=\"code inline\">$day</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/shorthand-syntax/","content":"\n\t\t\t\t<h1>Сокращенный синтаксис циклов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами рассмотрим сокращенный синтаксис\n\tциклов. Речь идет о том, что в циклах, подобно\n\tконструкциям <code class=\"code inline\">if</code>, фигурные скобки не\n\tобязательны. Если их опустить, то цикл выполнит\n\tтолько одну строку под ним.\n</p>\n<p>\n\tДавайте посмотрим на примере. Пусть у нас\n\tесть некоторый цикл с фигурными скобками:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 0; $i &lt;= 9; $i++) {\n\t\techo $i; // выведет числа от 0 до 9\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОпустим фигурные скобки - и результат от\n\tэтого не изменится:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 0; $i &lt;= 9; $i++)\n\t\techo $i; // выведет числа от 0 до 9\n?&gt;</code>\n</div>\n<p>\n\tЯ очень не рекомендую так делать, так как\n\tтакой код часто приводит к ошибкам.\n</p>\n<p>\n\tПосмотрим на примере.\n</p>\n<p>\n\tВнесу маленькое исправление в приведенный\n\tвыше код (найдите какое) - и он перестанет\n\tработать:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 0; $i &lt;= 9; $i++);\n\t\techo $i; // выдаст 10\n?&gt;</code>\n</div>\n<p>\n\tИтак, что же я исправил?\n</p>\n<p>\n\tПроблема возникла из-за того, что я поставил\n\tточку с запятой после скобки <code class=\"code inline\">)</code> от\n\tцикла. В таком случае получится так называемый\n\t<i>цикл без тела</i>: он просто прокрутится\n\tвнутри, а следующая строчка уже не будет\n\tк нему относится. Поэтому, во избежание проблем,\n\tя всегда рекомендую ставить фигурные скобки\n\tв циклах.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/for-general-syntax/","content":"\n\t\t\t\t<h1>Общий синтаксис цикла for в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВы уже знаете синтаксис цикла <code class=\"code inline\">for</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ( начальные команды; условие окончания; команды после прохода ) {\n\t\tтело цикла\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНа самом деле начальные команды и команды\n\tпосле прохода цикла могут состоять не из\n\tодной, а из нескольких команд, разделяемых\n\tзапятыми.\n</p>\n<p>\n\tДля примера давайте сделаем два счетчика:\n\tпервый пусть каждую итерацию цикла увеличивается\n\tна единицу, а второй - на двойку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 0, $j = 0; $i &lt;= 9; $i++, $j += 2) {\n\t\techo $i . ' ' . $j . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/break/","content":"\n\t\t\t\t<h1>Инструкция break в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть вот такой цикл, выводящий\n\tна экран элементы массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo $elem;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть перед нами стоит задача определить,\n\tесть ли в массиве число <code class=\"number inline\">3</code>. Если есть\n\t- выведем на экран слово <code class=\"string inline\">'есть'</code> (а\n\tесли нет - ничего не будем делать).\n</p>\n<p>\n\tРешим нашу задачу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem == 3) {\n\t\t\techo 'есть';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЗадача решена, однако, есть проблема: после\n\tтого, как число <code class=\"number inline\">3</code> уже найдено, массив\n\tвсе равно продолжает бессмысленно перебираться\n\tдальше, тратя ценные ресурсы процессора и\n\tзамедляя работу нашего скрипта.\n</p>\n<p>\n\tОптимальнее было бы сразу после нахождения\n\tчисла завершить работу нашего цикла. Это\n\tможно сделать с помощью специально инструкции\n\t<code class=\"code inline\">break</code>, позволяющей досрочно завершить\n\tработу цикла.\n</p>\n<p>\n\tИтак, давай завершим цикл, как только нам\n\tвстретится число <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem == 3) {\n\t\t\techo 'есть';\n\t\t\tbreak; // выйдем из цикла\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p class=\"notice\">\n\tИнструкция <code class=\"code inline\">break</code> может завершать любые циклы:\n\t<code class=\"code inline\">foreach</code>, <code class=\"code inline\">for</code>, <code class=\"code inline\">while</code>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Запустите цикл, который\n\t\tбудет по очереди выводить элементы этого\n\t\tмассива в консоль до тех пор, пока не встретится\n\t\tэлемент со значением <code class=\"number inline\">0</code>. После этого\n\t\tцикл должен завершить свою работу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Найдите сумму элементов,\n\t\tрасположенных от начала массива до первого\n\t\tотрицательного числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Найдите позицию первого\n\t\tчисла <code class=\"number inline\">3</code> в этом массиве (считаем, что\n\t\tэто число обязательно есть в массиве).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, сколько целых чисел, начиная\n\t\tс числа <code class=\"number inline\">1</code>, нужно сложить, чтобы сумма\n\t\tполучилась больше <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/continue/","content":"\n\t\t\t\t<h1>Инструкция continue в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПомимо инструкции <code class=\"code inline\">break</code>, завершающей\n\tработу цикла, существует также инструкция\n\t<code class=\"code inline\">continue</code>, запускающая новую итерацию\n\tцикла. Данная инструкция иногда может быть\n\tполезна для упрощения кода, хотя практически\n\tвсегда задачу можно решить и без нее. Давайте\n\tпосмотрим на практическом примере.\n</p>\n<p>\n\tПусть у нас дан массив с числами. Давайте\n\tпереберем его циклом и числа, которые делятся\n\tна <code class=\"number inline\">2</code>, возведем в квадрат и выведем\n\tна экран, а числа, которые делятся на <code class=\"number inline\">3</code>,\n\tвозведем в куб и выведем на экран.\n</p>\n<p>\n\tВот решение описанной задачи:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem % 2 === 0) {\n\t\t\t$result = $elem * $elem;\n\t\t\techo $result;\n\t\t} elseif ($elem % 3 === 0) {\n\t\t\t$result = $elem * $elem * $elem;\n\t\t\techo $result;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, строчка <code class=\"code inline\">echo $result</code>\n\tповторяется два раза. Давайте вынесем ее\n\tза <code class=\"code inline\">if</code>, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem % 2 === 0) {\n\t\t\t$result = $elem * $elem;\n\t\t} elseif ($elem % 3 === 0) {\n\t\t\t$result = $elem * $elem * $elem;\n\t\t}\n\t\t\n\t\techo $result; // вынесли вывод за условие\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь наш скрипт, однако, работает немного\n\tне так: получится, что и для обычных элементов,\n\tне обработанных через наш <code class=\"code inline\">if</code>, будет\n\tвыполнятся вывод переменной <code class=\"code inline\">$result</code>\n\tна экран, что по условию нашей задачи нам\n\tне нужно.\n</p>\n<p>\n\tПоправим проблему, добавив к нашему <code class=\"code inline\">if</code>\n\tеще условие <code class=\"code inline\">else</code>, которое будет срабатывать\n\tдля элементов, не делящихся на <code class=\"number inline\">2</code> и\n\t<code class=\"number inline\">3</code>, и вызовем там инструкцию <code class=\"code inline\">continue</code>,\n\tкоторая сразу же будет перебрасывать нас\n\tна новую итерацию цикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem % 2 === 0) {\n\t\t\t$result = $elem * $elem;\n\t\t} elseif ($elem % 3 === 0) {\n\t\t\t$result = $elem * $elem * $elem;\n\t\t} else {\n\t\t\tcontinue; // перейдем на новую итерацию цикла\n\t\t}\n\t\t\n\t\techo $result; // выполнится, если делится на 2 или 3\n\t}\n?&gt;</code>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/flags/","content":"\n\t\t\t\t<h1>Работа с флагами в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами научимся работать с флагами.\n\tФлаг - это специальная переменная, которое\n\tможет принимать только два значения: <code class=\"code inline\">true</code>\n\tили <code class=\"code inline\">false</code>. С помощью флагов можно\n\tрешать задачи, проверяющие отсутствие чего-либо:\n\tк примеру, можно проверить, что в массиве\n\tнет элемента с определенным значением.\n</p>\n<p>\n\tДавайте решим следующую задачу: дан массив\n\tс числами, нужно проверить, есть ли в нем\n\tэлемент со значением <code class=\"number inline\">3</code> или нет. Если\n\tесть - выведем <code class=\"string inline\">'есть'</code>, если нет -\n\tвыведем <code class=\"string inline\">'нет'</code>.\n</p>\n\n<h2>Шаг первый</h2>\n<p>\n\tДля начала давайте попробуем вывести <code class=\"string inline\">'есть'</code>.\n\tДля этого переберем все элементы нашего массива\n\tи ифом будем спрашивать - равен ли текущий\n\tэлемент значению <code class=\"number inline\">3</code>. Если равен - выведем\n\t<code class=\"string inline\">'есть'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\techo 'есть';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНо наше решение не очень хорошо: ведь если\n\tв массиве будет не одно значение <code class=\"number inline\">3</code>,\n\tа несколько, то <code class=\"string inline\">'есть'</code> выведется несколько\n\tраз. Давайте исправим наш массив (сделаем\n\tдва элемента со значением <code class=\"number inline\">3</code>) и убедимся\n\tв этом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 3, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\techo 'есть'; // выведет несколько раз\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПоправим проблему: завершим цикл с помощью\n\t<code class=\"code inline\">break</code>, если элемент уже найден:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 3, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\techo 'есть';\n\t\t\tbreak;  // завершим цикл\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Шаг второй</h2>\n<p>\n\tДавайте теперь попробуем сделать так, чтобы,\n\tесли в массиве вообще нет элементов со значением\n\t<code class=\"number inline\">3</code>, выводилось <code class=\"string inline\">'нет'</code>. Распространенным\n\tзаблуждением будет добавить <code class=\"code inline\">else</code> к\n\tнашему ифу - в этом случае <code class=\"string inline\">'нет'</code> будет\n\tвыводиться на все элементы, не являющиеся\n\t<code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\techo 'есть'; // выведет на элементе 3\n\t\t} else {\n\t\t\techo 'нет';  // выведет на элементах 1, 2, 4, 5\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tИтак, идея добавить <code class=\"code inline\">else</code> - плохая\n\tидея, не рабочая. Для решения задач подобного\n\tтипа и используют переменные-флаги.\n</p>\n<p>\n\tДавайте сделаем такую переменную со следующем\n\tповедением: если она равна <code class=\"code inline\">true</code>, то\n\tв массиве есть элемент <code class=\"number inline\">3</code>, а если <code class=\"code inline\">false</code>,\n\tто такого элемента нет. Изначально поставим\n\tнаш флаг в значение <code class=\"code inline\">false</code> - то есть\n\tбудем считать, что элемента <code class=\"number inline\">3</code> в массиве\n\tнет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$flag = false; // считаем, что элемента 3 в массиве нет\n?&gt;</code>\n</div>\n<p>\n\tЗатем запустим цикл с ифом так, как мы делали\n\tэто раньше. Если цикл обнаружит, что в массиве\n\tесть элемент <code class=\"number inline\">3</code> - то поставим переменную\n\t<code class=\"code inline\">$flag</code> в значение <code class=\"code inline\">true</code> и выйдем\n\tиз цикла с помощью <code class=\"code inline\">break</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$flag = false; // считаем, что элемента 3 нет в массиве\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\t$flag = true; // элемент есть - переопределим переменную $flag\n\t\t\tbreak;        // выйдем из цикла\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОтвет на вопрос, есть ли в массиве <code class=\"number inline\">3</code>\n\tили нет, мы можем дать только после цикла.\n\tИ этот ответ у нас уже есть: после цикла\n\tпеременная <code class=\"code inline\">$flag</code> могла остаться <code class=\"code inline\">false</code>\n\tили могла сменить свое значение на <code class=\"code inline\">true</code>,\n\tесли цикл обнаружил в массиве <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$flag = false;\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\t$flag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// тут переменная $flag равна или true, или false\n?&gt;</code>\n</div>\n<p>\n\tТеперь после цикла мы можем сделать иф, который\n\tпосмотрит на переменную <code class=\"code inline\">$flag</code> и выведет\n\tна экран <code class=\"string inline\">'есть'</code> или <code class=\"string inline\">'нет'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$flag = false;\n\t\n\tforeach ($arr as $elem) {\n\t\tif ($elem === 3) {\n\t\t\t$flag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif ($flag === true) {\n\t\techo 'есть';\n\t} else {\n\t\techo 'нет';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПроверьте, что в этом массиве есть элемент\n\t\t<code class=\"string inline\">'c'</code>. Если есть - выведите <code class=\"string inline\">'да'</code>,\n\t\tа если нет - выведите <code class=\"string inline\">'нет'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/prime-numbers/","content":"\n\t\t\t\t<h1>Нахождение простых чисел на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте напишем код, который будет проверять\n\tчисло на то, простое оно или нет. Простое\n\tчисло - это число, которое не делится ни\n\tна одно другое число (кроме как на <code class=\"number inline\">1</code>\n\tи на само себя - на это делятся все числа).\n</p>\n<p>\n\tСамый простой способ проверить число на простоту\n\t- перебрать в цикле все числа от <code class=\"number inline\">2</code>\n\tдо самого числа и в процессе перебора проверять,\n\tделится ли наше число хотя бы на одно из\n\tперебираемых чисел. Если ни на одно из этих\n\tчисел наше число не поделится - оно простое,\n\tа если хотя бы на одно поделится - оно составное.\n</p>\n<p>\n\tРешим задачу через флаг.\n</p>\n<p>\n\tДавайте установим начальное значение флага\n\tв <code class=\"code inline\">true</code>, считая число по умолчанию простым:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num  = 31;   // некоторое число\n\t$flag = true; // начальное значение флага\n?&gt;</code>\n</div>\n<p>\n\tЗатем запустим цикл от <code class=\"number inline\">2</code> до нашего\n\tчисла (не включая его), и в цикле будем проверять,\n\tделится ли наше число на счетчик цикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 31;\n\t\n\t$flag = true;\n\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\tif ($num % $i === 0) {\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОчевидно, что если <code class=\"code inline\">$num</code> хотя бы один\n\tраз поделится на <code class=\"code inline\">$i</code>, то число не простое.\n\tВ таком случае мы должны установить значение\n\tфлага в <code class=\"code inline\">false</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 31;\n\t\n\t$flag = true;\n\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\tif ($num % $i === 0) {\n\t\t\t$flag = false; // если хотя бы один раз поделилось\n\t\t}\n\t}\n\t\n\tvar_dump($flag); // выведем значение флага\n?&gt;</code>\n</div>\n<p>\n\tВ общем-то задача решена. Есть, однако, один\n\tнюанс: даже если в какой-то итерации цикла\n\tмы определим, что число не простое, цикл\n\tвсе равно будет крутится до самого конца.\n\tЭто не оптимально. Для решения проблемы добавим\n\tинструкцию <code class=\"code inline\">break</code>, осуществляющую выход\n\tиз цикла, если число не простое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 31;\n\t\n\t$flag = true;\n\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\tif ($num % $i === 0) {\n\t\t\t$flag = false;\n\t\t\tbreak; // выйдем из цикла\n\t\t}\n\t}\n\t\n\tvar_dump($flag);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСамостоятельно, не подсматривая в мой код,\n\t\tповторите решение описанной задачи.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/arbitrary-iterations-number/","content":"\n\t\t\t\t<h1>Циклы без заданного количества итераций в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tБывают задачи, в которых количество итераций\n\tцикла не известно заранее. К примеру: дано\n\tчисло, нужно делить его на <code class=\"number inline\">2</code> столько\n\tраз, пока результат не станет меньше <code class=\"number inline\">10</code>.\n\tНужно вывести число, которое при этом получится.\n</p>\n<p>\n\tВ этом случае мы не знаем количество итераций.\n\tНе беда - сделаем условием цикла условие\n\t<i>пока число больше 10</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 500;\n\t\n\twhile ($num &gt; 10) {\n\t\t$num = $num / 2;\n\t}\n\t\n\techo $num; // после цикла получим результат\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число <code class=\"code inline\">$num</code> с неким начальным\n\t\tзначением. Умножайте его на <code class=\"number inline\">3</code> столько\n\t\tраз, пока результат умножения не станет больше\n\t\t<code class=\"number inline\">1000</code>. Какое число получится? Посчитайте\n\t\tколичество итераций, необходимых для этого.\n\t</p>\n</div>\n\n<h2>Использования цикла for</h2>\n<p>\n\tДля решения задачи из начала урока можно\n\tиспользовать и цикл <code class=\"code inline\">for</code>, но особым\n\tобразом - без тела:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($num = 500; $num &gt; 10; $num = $num / 2);\n\techo $num; // после цикла получим результат\n?&gt;</code>\n</div>\n<p>\n\tКстати, при желании легко можно подсчитать\n\tколичество совершенных циклом операций:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($num = 500, $i = 0; $num &gt; 10; $num = $num / 2, $i++);\n\techo $num . ' ' . $i;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРешите предыдущую задачу через цикл <code class=\"code inline\">for</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/string-forming/","content":"\n\t\t\t\t<h1>Формирование строк через циклы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами научимся с помощью цикла\n\tформировать строки. Давайте для примера сделаем\n\tстроку, заполненную десятью буквами <code class=\"string inline\">'x'</code>.\n</p>\n<p>\n\tДля этого сделаем переменную <code class=\"code inline\">$str</code>\n\tи при каждом проходе цикла будем добавлять\n\tв нее одну букву <code class=\"string inline\">'x'</code>. Сначала в <code class=\"code inline\">$str</code>\n\tбудет <code class=\"string inline\">''</code>, потом <code class=\"string inline\">'x'</code>, потом\n\t<code class=\"string inline\">'xx'</code> и так далее пока цикл не закончится.\n</p>\n<p>\n\tПосле цикла мы получим нужную нам строку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = ''; // начальное значение - пустые кавычки\n\t\n\tfor ($i = 0; $i &lt; 10; $i++) {\n\t\t$str = $str . 'x';\n\t}\n\t\n\techo $str; // выведет 'xxxxxxxxxx'\n?&gt;</code>\n</div>\n<p>\n\tПо сути эта задача напоминает суммирование\n\tэлементов массива, только вместо чисел мы\n\tсуммируем строки, постепенно накапливая результат\n\tв переменной <code class=\"code inline\">$str</code>.\n</p>\n<p>\n\tДавайте упростим код, используя сокращенную\n\tоперацию <code class=\"code inline\">.=</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '';\n\t\n\tfor ($i = 0; $i &lt; 10; $i++) {\n\t\t$str .= 'x';\n\t}\n\t\n\techo $str;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте строку, заполненную\n\t\t<code class=\"number inline\">5</code>-тью нулями.\n\t</p>\n</div>\n\n<h2>Строка с цифрами</h2>\n<p>\n\tДавайте теперь сделаем строку <code class=\"string inline\">'12345'</code>.\n\tЗадача аналогична задаче с десятью иксами\n\t- только прибавлять будем не иксы, а счетчик\n\tцикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '';\n\t\n\tfor ($i = 1; $i &lt;= 5; $i++) {\n\t\t$str = $str . $i;\n\t}\n\t\n\techo $str; // выведет '12345'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте строку <code class=\"string inline\">'123456789'</code>\n\t\tи запишите ее в переменную <code class=\"code inline\">$str</code>. Выведите\n\t\tзначение этой переменной на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте строку <code class=\"string inline\">'987654321'</code>\n\t\tи запишите ее в переменную <code class=\"code inline\">$str</code>. Выведите\n\t\tзначение этой переменной на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте строку <code class=\"string inline\">'-1-2-3-4-5-6-7-8-9-'</code>\n\t\tи запишите ее в переменную <code class=\"code inline\">$str</code>. Выведите\n\t\tзначение этой переменной на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/nested/","content":"\n\t\t\t\t<h1>Вложенные циклы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЦиклы, работу с которыми вы уже знаете, можно\n\tвкладывать друг в друга. К примеру, давайте\n\tрешим следующую задачу: выведем на экран строку:\n</p>\n<p class=\"represent\">\n\t111222333444555666777888999\n</p>\n<p>\n\tТут одним циклом не обойтись - нужно запустить\n\tдва вложенных друг в друга цикла: первый\n\tцикл будет перебирать числа (сначала <code class=\"number inline\">1</code>,\n\tпотом <code class=\"number inline\">2</code>, потом <code class=\"number inline\">3</code> и так до <code class=\"number inline\">9</code>),\n\tа второй цикл будет повторять эти числа три раза.\n</p>\n<p>\n\tДавайте реализуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 9; $i++) {\n\t\tfor ($j = 1; $j &lt;= 3; $j++) {\n\t\t\techo $i;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОбратите внимание: первый цикл имеет счетчик\n\t<code class=\"code inline\">$i</code>, второй <code class=\"code inline\">$j</code>, а если будет\n\tеще и третий цикл - то у него счетчиком будет\n\tпеременная <code class=\"code inline\">$k</code>. Это стандартные общепринятые\n\tназвания, следует пользоваться именно ими.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tС помощью двух вложенных циклов выведите\n\t\tна экран следующую строку:\n\t</p>\n\t<p class=\"represent\">\n\t\t111222333444555666777888999\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью двух вложенных циклов выведите\n\t\tна экран следующую строку:\n\t</p>\n\t<p class=\"represent\">\n\t\t11 12 13 21 22 23 31 32 33\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/array-loop-filling/","content":"\n\t\t\t\t<h1>Заполнение массивов через цикл в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть какой-то массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n?&gt;</code>\n</div>\n<p>\n\tДавайте заполним этот массив какими-нибудь\n\tэлементами. Можно сделать это вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n</div>\n<p>\n\tА можно изначально создать массив пустым,\n\tа затем добавить в него данные вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\t$arr[] = 1;\n\t$arr[] = 2;\n\t$arr[] = 3;\n\t$arr[] = 4;\n\t$arr[] = 5;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОбъявите пустой массив, а затем заполните\n\t\tего числами от <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОбъявите пустой массив, а затем заполните\n\t\tего <code class=\"number inline\">5</code>-ю буквами <code class=\"string inline\">x</code>.\n\t</p>\n</div>\n\n<h2>Заполнение массива в цикле</h2>\n<p>\n\tПусть мы заполняем массив вот таким образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\t$arr[] = 1;\n\t$arr[] = 2;\n\t$arr[] = 3;\n\t$arr[] = 4;\n\t$arr[] = 5;\n?&gt;</code>\n</div>\n<p>\n\tОчевидно, что данный способ не очень удобен,\n\tособенно если элементов в массиве очень много.\n\tДавайте перепишем наш код так, чтобы заполнением\n\tмассива занимался цикл <code class=\"code inline\">for</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\tfor ($i = 0; $i &lt;= 4; $i++) {\n\t\t$arr[] = $i + 1;\n\t}\n\t\n\tvar_dump($arr);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла заполните массив числами\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла заполните массив нечетными\n\t\tчислами в промежутке от <code class=\"number inline\">1</code> до <code class=\"number inline\">99</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/array-for/","content":"\n\t\t\t\t<h1>Цикл for для массивов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас дан вот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n</div>\n<p>\n\tДавайте переберем этот массив циклом <code class=\"code inline\">foreach</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo $elem;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНа самом деле элементы массива можно перебрать\n\tи обычным циклом <code class=\"code inline\">for</code>. Такое нужно\n\tредко, но иногда бывает полезно. Давайте\n\tвыполним такой перебор:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\techo $arr[$i];\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите все эти\n\t\tэлементы на экран.\n\t</p>\n</div>\n\n<h2>Применение</h2>\n<p>\n\tВыведем на экран все элементы массива, кроме\n\tнулевого. Для этого начнем счетчик цикла\n\tне с нуля, а с единицы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 1; $i &lt; $length; $i++) {\n\t\techo $arr[$i];\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tвсе элементы этого массива, кроме последнего.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">for</code> выведите на экран\n\t\tпервую половину элементов этого массива.\n\t</p>\n</div>\n\n<h2>Распространенная ошибка</h2>\n<p>\n\tВ следующем коде подсчет элементов массива\n\tвынесен в условие цикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tfor ($i = 1; $i &lt; count($arr); $i++) {\n\t\techo $arr[$i];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНа первый взгляд кажется, что этот код лучше,\n\tтак как мы избавились от лишней переменной\n\t<code class=\"code inline\">$length</code>. На самом деле это не так.\n\tДело в том, что в приведенном коде функция\n\t<code class=\"code inline\">count</code> будет заново подсчитывать количество\n\tэлементов массива каждую интерацию цикла.\n\tЭто не оптимально.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tВ следующем коде некоторый программист находит\n\t\tсумму всех элементов массива, кроме нулевого:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5, 6, 7, 8];\n\t$sum = 0;\n\t\n\tfor ($i = 1; $i &lt; count($arr); $i++) {\n\t\t$sum += $arr[$i];\n\t}\n\t\n\techo $sum;\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЧто не так с этим кодом? Исправьте ошибку\n\t\tавтора кода.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/array-loop-changing/","content":"\n\t\t\t\t<h1>Изменение массива в цикле PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас дан вот такой массив с числами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n</div>\n<p>\n\tДавайте увеличим каждый элемент этого массива\n\tв два раза:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\t$arr[0] = $arr[0] * 2;\n\t$arr[1] = $arr[1] * 2;\n\t$arr[2] = $arr[2] * 2;\n\t$arr[3] = $arr[3] * 2;\n\t$arr[4] = $arr[4] * 2;\n\t\n\tvar_dump($arr); // выведет [2, 4, 6, 8, 10]\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь то же самое выполним в цикле:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\t$arr[$i] = $arr[$i] * 2;\n\t}\n\t\n\tvar_dump($arr); // выведет [2, 4, 6, 8, 10]\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Переберите этот массив\n\t\tциклом и возведите каждый элемент этого массива\n\t\tв квадрат.\n\t</p>\n</div>\n\n<h2>Сокращенные операции</h2>\n<p>\n\tПри изменениях массивов можно использовать\n\tсокращенные операции, применяя их прямо к\n\tэлементу массива (то есть к <code class=\"code inline\">$arr[i]</code>).\n\tДавайте для примера увеличим каждый элемент\n\tмассива на единицу, используя операцию <code class=\"code inline\">++</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\t$arr[$i]++;\n\t}\n\t\n\tvar_dump($arr); // выведет [2, 3, 4, 5, 6]\n?&gt;</code>\n</div>\n<p>\n\tА теперь увеличим каждый элемент массива\n\tна <code class=\"number inline\">5</code>, используя операцию <code class=\"code inline\">+=</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\t$arr[$i] += 5;\n\t}\n\t\n\tvar_dump($arr); // выведет [6, 7, 8, 9, 10]\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Переберите этот массив\n\t\tциклом и отнимите от каждого элемента единицу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Переберите этот массив\n\t\tциклом и прибавьте к каждому элементу <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/loops-arrays-training/","content":"\n\t\t\t\t<h1>Практика на массивы в цикле в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив с работниками и их зарплатами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'employee1' =&gt; 100,\n\t\t'employee2' =&gt; 200,\n\t\t'employee3' =&gt; 300,\n\t\t'employee4' =&gt; 400,\n\t\t'employee5' =&gt; 500,\n\t\t'employee6' =&gt; 600,\n\t\t'employee7' =&gt; 700,\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tУвеличьте зарплату каждого работника на <code class=\"code inline\">10%</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tзарплата увеличивалась только тем работникам,\n\t\tу которых она меньше или равна <code class=\"number inline\">400</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1 =&gt; 6, 2 =&gt; 7, 3 =&gt; 8, 4 =&gt; 9, 5 =&gt; 10];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму ключей этого массива и поделите\n\t\tее на сумму значений.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4, 'e' =&gt; 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЗапишите ключи этого массива в один массив,\n\t\tа значения - в другой.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t1 =&gt; 125,\n\t\t2 =&gt; 225,\n\t\t3 =&gt; 128,\n\t\t4 =&gt; 356,\n\t\t5 =&gt; 145,\n\t\t6 =&gt; 281,\n\t\t7 =&gt; 452,\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЗапишите в новый массив элементы, значение\n\t\tкоторых начинается с цифры <code class=\"number inline\">1</code> или цифры\n\t\t<code class=\"number inline\">2</code>. То есть у вас в результате получится\n\t\tвот такой массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[\n\t\t125,\n\t\t225,\n\t\t128,\n\t\t145,\n\t\t281,\n\t];\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/array-elements-neighbors/","content":"\n\t\t\t\t<h1>Получение соседей элементов в массиве PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть дан некоторый массив, например, такой:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем элементы этого массива на\n\tэкран, используя обычный цикл <code class=\"code inline\">for</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\techo $arr[$i];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь давайте переделаем наш код так,\n\tчтобы выводились не текущие элементы, а предыдущие:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\techo $arr[$i - 1];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, для решения задачи мы просто\n\tотнимаем от счетчика число <code class=\"number inline\">1</code>, тем\n\tсамым получая ключ предыдущего элемента.\n\tЗдесь, однако, кроется проблема: в самом\n\tначале цикла значение счетчика будет равно\n\tнулю и мы попытаемся получить элемент массива\n\tс ключом <code class=\"number inline\">-1</code>. Такого элемента, конечно\n\tже, нет, и в результате мы на экране увидим\n\twarning (при включенном выводе ошибок).\n</p>\n<p>\n\tВ общем-то, это логично просто геометрически:\n\tсамый первый элемент массива не имеет предыдущего.\n\tГоворя другими словами, в нашем массиве <code class=\"number inline\">5</code>\n\tэлементов, но только <code class=\"number inline\">4</code> из них имеют\n\tпредыдущий элемент.\n</p>\n<p>\n\tТо есть предыдущих элементов всегда на <code class=\"number inline\">1</code>\n\tменьше, чем элементов в массиве. Логично\n\tв таком случае, что и цикл должен сделать\n\tна одну итерацию меньше. Поэтому просто начнем\n\tцикл с <code class=\"number inline\">1</code>, а не с <code class=\"number inline\">0</code>, и проблема\n\tбудет решена:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 1; $i &lt; $length; $i++) {\n\t\techo $arr[$i - 1];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПонятно, что просто тупо выводить предыдущие\n\tэлементы - бестолковая операция. Давайте\n\tсделаем что-нибудь более осмысленное. К примеру,\n\tнайдем сумму предыдущего и текущего элементов\n\tмассива и выведем их на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t$length = count($arr);\n\t\n\tfor ($i = 1; $i &lt; $length; $i++) {\n\t\techo $arr[$i - 1] + $arr[$i];\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Переберите его циклом\n\t\tи в каждой итерации цикла выведите следующий\n\t\tэлемент массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tв каждой итерации цикла выводилась сумма\n\t\tтекущего и следующего элемента массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Переберите его циклом\n\t\tи в каждой итерации цикла выведите два предыдущих\n\t\tэлемента массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tв каждой итерации цикла выводилась сумма\n\t\tдвух предыдущих элементов и текущего элемента\n\t\tмассива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Переберите его циклом\n\t\tи в каждой итерации цикла выведите сумму\n\t\tпредыдущего, текущего и следующего элементов\n\t\tмассива.\n\t</p>\n</div>\n\n<!--\n<h2>флаги</h2>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Проверьте, есть ли\n\t\tв нем два одинаковых числа подряд. Если есть\n\t\t- выведите <code class=\"string inline\">'да'</code>, а если нет - выведите\n\t\t<code class=\"string inline\">'нет'</code>.\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/fibonacci-numbers/","content":"\n\t\t\t\t<h1>Получение чисел Фибоначчи в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы с вами научимся получать\n\tчисла Фибоначчи. Эти числа представляют собой\n\tпоследовательность, в которой первые два\n\tчисла равны <code class=\"number inline\">0</code> и <code class=\"number inline\">1</code>, а каждое\n\tпоследующее число равно сумме двух предыдущих\n\tчисел.\n</p>\n<p>\n\tВот решение описанной задачи:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$one = 0;\n\t$two = 1;\n\t\n\tfor ($i = 1; $i &lt;= 10; $i++) {\n\t\t$current = $one + $two;\n\t\t\n\t\t$one = $two;\n\t\t$two = $current;\n\t\t\n\t\techo $current . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРазберите мое решение описанной задачи, а\n\t\tзатем самостоятельно, не подсматривая в мой\n\t\tкод, решите эту задачу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРешите задачу на нахождение ряда чисел, каждое\n\t\tиз которых равно сумме трех предыдущих, а\n\t\tпервые три числа равны <code class=\"number inline\">0</code>, <code class=\"number inline\">1</code>\n\t\tи <code class=\"number inline\">2</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/pyramids-loops-creating/","content":"\n\t\t\t\t<h1>Вывод пирамидок на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь выведем на экран следующую\n\tпирамидку:\n</p>\n<div class=\"monoblock\">\n\tx<br>\n\txx<br>\n\txxx<br>\n\txxxx<br>\n\txxxxx\n</div>\n<p>\n\tПриступим к решению задачи.\n</p>\n<p>\n\tДля начала давайте вспомним код из предыдущих\n\tуроков, выводящий строку <code class=\"string inline\">'xxxxxxxxxx'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '';\n\t\n\tfor ($i = 0; $i &lt; 10; $i++) {\n\t\t$str .= 'x';\n\t}\n\t\n\techo $str; // выведет 'xxxxxxxxxx'\n?&gt;</code>\n</div>\n<p>\n\tДля решения поставленной задачи на пирамидку\n\tпросто модифицируем приведенный код: при\n\tкаждом проходе цикла будем выводить на экран\n\tсодержимое переменной <code class=\"code inline\">$str</code> и тег <code class=\"code inline\">&lt;br&gt;</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '';\n\t\n\tfor ($i = 0; $i &lt; 5; $i++) {\n\t\t$str .= 'x';\n\t\techo $str . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран следующую пирамидку:\n\t</p>\n\t<div class=\"monoblock\">\n\t\txx<br>\n\t\txxxx<br>\n\t\txxxxxx<br>\n\t\txxxxxxxx<br>\n\t\txxxxxxxxxx\n\t</div>\n</div>\n\n<h2>Пирамидка с цифрами</h2>\n<p>\n\tДавайте теперь выведем на экран следующую\n\tпирамидку:\n</p>\n<div class=\"monoblock\">\n\t111<br>\n\t222<br>\n\t333<br>\n\t444<br>\n\t555<br>\n\t666<br>\n\t777<br>\n\t888<br>\n\t<code class=\"number inline\">999</code>\n</div>\n<p>\n\tПохожую задачу мы уже решали, когда выводили\n\tстроку <code class=\"string inline\">'111222333444555666777888999'</code>.\n\tНапомню этот код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 9; $i++) {\n\t\tfor ($j = 1; $j &lt;= 3; $j++) {\n\t\t\techo $i; // выводит '111', потом '222', потом '333' и так далее\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПо сути нам нужна такая же строка, но с <code class=\"code inline\">&lt;br&gt;</code>\n\tв нужных местах. Добавим их:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 9; $i++) {\n\t\tfor ($j = 1; $j &lt;= 3; $j++) {\n\t\t\techo $i;\n\t\t}\n\t\t\n\t\techo '&lt;br&gt;'; // выводим &lt;br&gt;, чтобы было в столбик\n\t}\n?&gt;</code>\n</div>\n\n<h2>Пирамидка с цифрами</h2>\n<p>\n\tВыведем теперь следующую пирамидку:\n</p>\n<div class=\"monoblock\">\n\t1<br>\n\t22<br>\n\t333<br>\n\t4444<br>\n\t55555<br>\n\t666666<br>\n\t7777777<br>\n\t88888888<br>\n\t<code class=\"number inline\">999999999</code>\n</div>\n<p>\n\tЗадача аналогична предыдущей, только внутренний\n\tцикл должен крутиться не <code class=\"number inline\">3</code> раза, а\n\tв соответствии с числом: если у нас единица\n\t- то повторяем цикл <code class=\"number inline\">1</code> раз, если двойка\n\t- два раза, если тройка - три раза.\n</p>\n<p>\n\tКак этого достичь: нужно в условии внутреннего\n\tцикла написать следующее: <code class=\"code inline\">$j <= $i</code>.\n\tВ этом случае если $i равен <code class=\"number inline\">1</code>, то\n\tэто все равно, что в условии написать <code class=\"code inline\">$j\n\t<= 1</code>, а если $i равен 2 - то <code class=\"code inline\">$j <=\n\t2</code> и так далее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 9; $i++) {\n\t\tfor ($j = 1; $j &lt;= $i; $j++) {\n\t\t\techo $i;\n\t\t}\n\t\t\n\t\techo '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЯ думаю, вы уже обратили внимание, что в\n\tэтой пирамидке мы не используем накопление\n\tв строку, которое мы разбирали ранее. Можно\n\tи с накоплением, но это получится чуть сложнее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 9; $i++) {\n\t\t$str = ''; // каждый раз зачищаем строку\n\t\t\n\t\tfor ($j = 1; $j &lt;= $i; $j++) {\n\t\t\t$str .= $i;\n\t\t}\n\t\t\n\t\techo $str . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран следующую пирамидку:\n\t</p>\n\t<div class=\"monoblock\">\n\t\t1<br>\n\t\t333<br>\n\t\t55555<br>\n\t\t7777777<br>\n\t\t<code class=\"number inline\">999999999</code>\n\t</div>\n</div>\n\n<h2>Перевернутые пирамидки</h2>\n<p>\n\tНаучимся теперь делать перевернутые пирамидки.\n\tСделаем, к примеру, вот такую:\n</p>\n<div class=\"monoblock\">\n\txxxxx<br>\n\txxxx<br>\n\txxx<br>\n\txx<br>\n\tx\n</div>\n<p>\n\tДля решения задачи необходимо запустить два\n\tвложенных цикла, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 5; $i &gt;= 1; $i--) {\n\t\t$str = '';\n\t\t\n\t\tfor ($j = 0; $j &lt; $i; $j++) {\n\t\t\t$str .= 'x';\n\t\t}\n\t\t\n\t\techo $str . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран следующую пирамидку:\n\t</p>\n\t<div class=\"monoblock\">\n\t\txxxxxxxxxx<br>\n\t\txxxxxxxx<br>\n\t\txxxxxx<br>\n\t\txxxx<br>\n\t\txx\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран следующую пирамидку:\n\t</p>\n\t<div class=\"monoblock\">\n\t\t999999999<br>\n\t\t88888888<br>\n\t\t7777777<br>\n\t\t666666<br>\n\t\t55555<br>\n\t\t4444<br>\n\t\t333<br>\n\t\t22<br>\n\t\t<code class=\"number inline\">1</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/string-accumulation-array-filling/","content":"\n\t\t\t\t<h1>Заполнение массивов с накоплением строки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте заполним массив следующим образом:\n\tв первый элемент запишем <code class=\"string inline\">'x'</code>, во второй\n\t<code class=\"string inline\">'xx'</code>, в третий <code class=\"string inline\">'xxx'</code> и так\n\tдалее. Задача аналогична пирамидке, разница\n\tв том, что мы не будем выводить формируемую\n\tстроку на экран, а будем записывать ее в\n\tмассив, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t$str = '';\n\t\n\tfor ($i = 0; $i &lt; 5; $i++) {\n\t\t$str .= 'x';\n\t\t$arr[] = $str;\n\t}\n\t\n\tvar_dump($arr); // выведет ['x', 'xx', 'xxx', 'xxxx', 'xxxxx']\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">['xx', 'xxxx', 'xxxxxx', 'xxxxxxxx', 'xxxxxxxxxx']</code>\n\t</div>\n</div>\n\n<h2>Заполнение массива числами</h2>\n<p>\n\tДавайте теперь заполним массив следующим\n\tобразом: в первый элемент запишем <code class=\"number inline\">1</code>,\n\tво второй <code class=\"number inline\">22</code>, в третий <code class=\"number inline\">333</code>\n\tи так далее. Данная задача также аналогична\n\tпирамидке. Реализуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\tfor ($i = 1; $i &lt; 10; $i++) {\n\t\t$str = '';\n\t\t\n\t\tfor ($j = 0; $j &lt; $i; $j++) {\n\t\t\t$str .= $i;\n\t\t}\n\t\t\n\t\t$arr[] = $str;\n\t}\n\t\n\tvar_dump($arr);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">['11111', '22222', '33333', '44444', '55555']</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/loops/practicum/","content":"\n\t\t\t\t<h1>Отработка циклов PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tВыведите с помощью цикла столбец чисел от\n\t\t<code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите с помощью цикла столбец чисел от\n\t\t<code class=\"number inline\">100</code> до <code class=\"number inline\">1</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите с помощью цикла столбец четных чисел\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив <code class=\"number inline\">10</code>-ю иксами с помощью\n\t\tцикла.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив числами от <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code>\n\t\tс помощью цикла.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. С помощью цикла выведите\n\t\tтолько те элементы массива, которые больше\n\t\tнуля и меньше <code class=\"number inline\">10</code>-ти.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. С помощью цикла проверьте,\n\t\tчто в нем есть элемент со значением <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. С помощью цикла найдите\n\t\tсумму элементов этого массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. С помощью цикла найдите\n\t\tсумму квадратов элементов этого массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Найдите среднее арифметическое\n\t\tего элементов (сумма элементов, делить на\n\t\tколичество).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите скрипт, который будет находить факториал\n\t\tчисла. Факториал - это произведение всех\n\t\tцелых чисел, меньше данного, и его самого.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/multidimensionality/multi-arrays/","content":"\n\t\t\t\t<h1>Многомерные массивы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЭлементы массива могут быть не только строками\n\tи числами, но и массивами. В этом случае\n\tу нас получится массив массивов или <dfn>многомерный\n\tмассив</dfn>. В следующем примере массив <code class=\"code inline\">$arr</code>\n\tсостоит из трех элементов, в свою очередь\n\tявляющихся массивами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']];\n?&gt;</code>\n</div>\n<p>\n\tПерепишем в более понятном виде:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['a', 'b', 'c'],\n\t\t['d', 'e', 'f'],\n\t\t['g', 'h', 'i'],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tВ зависимости от уровня вложенности массивы\n\tмогут быть двухмерными - массив массивов,\n\tтрехмерными - массив массивов массивов (ну\n\tи так далее - четырехмерными, пятимерными и тп).\n</p>\n<p>\n\tПриведенный выше массив является двухмерным,\n\tтак как внутри одного массива расположены\n\tдругие подмассивы и уже в этих подмассивах\n\tнет других массивов. Чтобы вывести какой-либо\n\tэлемент из двухмерного массива следует писать\n\tуже не одну пару квадратных скобок, а две:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['a', 'b', 'c'],\n\t\t['d', 'e', 'f'],\n\t\t['g', 'h', 'i'],\n\t];\n\t\n\techo $arr[0][1]; // выведет 'b'\n\techo $arr[1][2]; // выведет 'f'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['a', 'b', 'c'],\n\t\t['d', 'e', 'f'],\n\t\t['g', 'h', 'i'],\n\t\t['j', 'k', 'l'],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите с его помощью элементы с текстом\n\t\t<code class=\"string inline\">'l'</code>, <code class=\"string inline\">'e'</code>, <code class=\"string inline\">'g'</code> и <code class=\"string inline\">'a'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [[1, 2], [3, 4], [5, 6]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму всех его элементов.\n\t</p>\n</div>\n\n<h2>Трехмерный массив</h2>\n<p>\n\tВот пример трехмерного массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t['a', 'b'],\n\t\t\t['c', 'd'],\n\t\t],\n\t\t[\n\t\t\t['e', 'f'],\n\t\t\t['g', 'h'],\n\t\t],\n\t\t[\n\t\t\t['i', 'j'],\n\t\t\t['k', 'l'],\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДля вывода элементов из такого массива уже\n\tнеобходимо написать три квадратные скобки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $arr[0][0][0]; // выведет 'a'\n\techo $arr[2][1][0]; // выведет 'k'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t[1, 2],\n\t\t\t[3, 4],\n\t\t],\n\t\t[\n\t\t\t[5, 6],\n\t\t\t[7, 8],\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму всех элементов приведенного массива.\n\t</p>\n</div>\n\n<h2>Ассоциативные массивы</h2>\n<p>\n\tМногомерные массивы также могут быть ассоциативными,\n\tнапример, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'user1' =&gt; [\n\t\t\t'name' =&gt; 'name1',\n\t\t\t'age'  =&gt; 31,\n\t\t],\n\t\t'user2' =&gt; [\n\t\t\t'name' =&gt; 'name2',\n\t\t\t'age'  =&gt; 32,\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте с помощью этого массива выведем на\n\tэкран, к примеру, имя второго юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $arr['user2']['name']; // выведет 'name2'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'boys'  =&gt; [1 =&gt; 'Коля', 2 =&gt; 'Вася', 3 =&gt; 'Петя'],\n\t\t'girls' =&gt; [1 =&gt; 'Даша', 2 =&gt; 'Маша', 3 =&gt; 'Лена'],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите с помощью этого массива имя первого\n\t\tмальчика и имя второй девочки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'ru' =&gt; ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'],\n\t\t'en' =&gt; ['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите с помощью этого массива английское\n\t\tназвание среды.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t'name'   =&gt; 'user1',\n\t\t\t'age'    =&gt; 30,\n\t\t\t'salary' =&gt; 1000,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'user2',\n\t\t\t'age'    =&gt; 31,\n\t\t\t'salary' =&gt; 2000,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'user3',\n\t\t\t'age'    =&gt; 32,\n\t\t\t'salary' =&gt; 3000,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите с помощью этого массива сумму зарплат\n\t\tпервого и третьего юзера.\n\t</p>\n</div>\n\n<h2>Произвольные массивы</h2>\n<p>\n\tМногомерные массивы не обязательно должны\n\tбыть такими, как мы рассмотрели выше. Посмотрите,\n\tнапример, на следующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [['a', 'b', [1, 2, 3], [4, 5]], ['d', ['e', 'f']]];\n?&gt;</code>\n</div>\n<p>\n\tЕсли переписать его в более понятном виде,\n\tто мы увидим, что этот массив \"неправильный\".\n\tВ нем рядом с обычными элементами располагаются\n\tмассивы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t'a', 'b', [1, 2, 3], [4, 5],\n\t\t],\n\t\t[\n\t\t\t'd', ['e', 'f'],\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [[1, 2, 3, [4, 5, [6, 7]]], [8, [9, 10]]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму всех элементов приведенного\n\t\tмассива. Обращайтесь к каждому элементу\n\t\tпо отдельности, без цикла.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/multidimensionality/multi-arrays-iteration/","content":"\n\t\t\t\t<h1>Перебор многомерных массивов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся делать перебор многомерных\n\tмассивов с помощью циклов. Пусть у нас дан\n\tследующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['a', 'b', 'c'],\n\t\t['d', 'e', 'f'],\n\t\t['g', 'h', 'i'],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, этот массив двухмерный, а\n\tэто значит, что для его перебора нужно два\n\tвложенных цикла <code class=\"code inline\">foreach</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $sub) {\n\t\tforeach ($sub as $elem) {\n\t\t\techo $elem;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [[1, 2, 3], [4, 5, 6, 7], [8, 9]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью двух вложенных циклов найдите сумму\n\t\tэлементов этого массива.\n\t</p>\n</div>\n\n<h2>Трехмерный массив</h2>\n<p>\n\tА вот для перебора трехмерного массива уже\n\tнужно использовать три вложенных цикла. Пусть\n\tдля примера у нас дан вот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t['a', 'b'],\n\t\t\t['c', 'd'],\n\t\t],\n\t\t[\n\t\t\t['e', 'f'],\n\t\t\t['g', 'h'],\n\t\t],\n\t\t[\n\t\t\t['i', 'j'],\n\t\t\t['k', 'l'],\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем все его элементы на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $sub) {\n\t\tforeach ($sub as $subsub) {\n\t\t\tforeach ($subsub as $elem) {\n\t\t\t\techo $elem;\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t[1, 2, 3],\n\t\t\t[6, 7, 8],\n\t\t\t[3, 8, 4],\n\t\t\t[6, 7, 9],\n\t\t],\n\t\t[\n\t\t\t[9, 1, 2],\n\t\t\t[4, 5, 6],\n\t\t],\n\t\t[\n\t\t\t[9, 1, 2],\n\t\t\t[4, 5, 6],\n\t\t\t[5, 6, 3],\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью трех вложенных циклов найдите сумму\n\t\tэлементов этого массива.\n\t</p>\n</div>\n\n<h2>Работа с ключами</h2>\n<p>\n\tРабота с ключами при переборе многомерных\n\tмассивов осуществляется также, как и при\n\tпереборе одномерных. Пусть для примера дан\n\tвот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'user1' =&gt; [\n\t\t\t'name' =&gt; 'name1',\n\t\t\t'age'  =&gt; 31,\n\t\t],\n\t\t'user2' =&gt; [\n\t\t\t'name' =&gt; 'name2',\n\t\t\t'age'  =&gt; 32,\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте переберем его вложенными циклами\n\tи выведем его элементы с ключами в формате\n\t<i>ключ ключ элемент</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $key1 =&gt; $sub) {\n\t\tforeach ($sub as $key2 =&gt; $elem) {\n\t\t\techo $key1 . ' ' . $key2 . ' ' . $elem . '&lt;br&gt;';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t'name'   =&gt; 'user1',\n\t\t\t'age'    =&gt; 30,\n\t\t\t'salary' =&gt; 1000,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'user2',\n\t\t\t'age'    =&gt; 31,\n\t\t\t'salary' =&gt; 2000,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'user3',\n\t\t\t'age'    =&gt; 32,\n\t\t\t'salary' =&gt; 3000,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите элементы этого массива в формате\n\t\t<i>ключ-значение</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'group1'  =&gt; ['user11', 'user12', 'user13', 'user43'],\n\t\t'group2'  =&gt; ['user21', 'user22', 'user23'],\n\t\t'group3'  =&gt; ['user31', 'user32', 'user33'],\n\t\t'group4'  =&gt; ['user41', 'user42', 'user43'],\n\t\t'group5'  =&gt; ['user51', 'user52'],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью двух вложенных циклов выведите\n\t\tэлементы этого массива в формате <i>имя группы\n\t\t- имя юзера</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/multidimensionality/multi-arrays-filling/","content":"\n\t\t\t\t<h1>Заполнение многомерных массивов PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь мы хотим в цикле создать какой-нибудь\n\tмногомерный массив с числами.\n</p>\n<p>\n\tНапример, вот такой двухмерный массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n?&gt;</code>\n</div>\n<p>\n\tРешим поставленную задачу, применив два вложенных\n\tцикла. Внешний цикл будет создавать подмассивы,\n\tа внутренний - заполнять эти подмассивы числами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\tfor ($i = 0; $i &lt; 3; $i++) {\n\t\tfor ($j = 0; $j &lt; 3; $j++) {\n\t\t\t$arr[$i][$j] = $j + 1; // заполняем подмассив числами\n\t\t}\n\t}\n\t\n\tvar_dump($arr);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью двух вложенных циклов\n\t\tследующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью двух вложенных циклов\n\t\tследующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">[['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x']]</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью трех вложенных циклов\n\t\tследующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">[\n\t[\n\t\t[1, 2, 3, 4, 5],\n\t\t[1, 2, 3, 4, 5],\n\t],\n\t[\n\t\t[1, 2, 3, 4, 5],\n\t\t[1, 2, 3, 4, 5],\n\t],\n\t[\n\t\t[1, 2, 3, 4, 5],\n\t\t[1, 2, 3, 4, 5],\n\t],\n]</code>\n\t</div>\n</div>\n\n<h2>Заполнение числами по порядку</h2>\n<p>\n\tВ предыдущих примерах все числа в подмассивах\n\tбыли одинаковыми. Давайте теперь сделаем\n\tтак, чтобы числа возрастали, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n?&gt;</code>\n</div>\n<p>\n\tДля этого нужно сделать специальную переменную-счетчик,\n\tкоторая будет увеличивать свое значение на\n\t<code class=\"number inline\">1</code> при каждой итерации внутреннего\n\tцикла. Значение этого счетчика мы и будем\n\tзаписывать в массив, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t$k = 1; // счетчик\n\t\n\tfor ($i = 0; $i &lt; 3; $i++) {\n\t\tfor ($j = 0; $j &lt; 3; $j++) {\n\t\t\t$arr[$i][$j] = $k; // записываем счетчик\n\t\t\t$k++; // увеличиваем счетчик\n\t\t}\n\t}\n\t\n\tvar_dump($arr);\n?&gt;</code>\n</div>\n<p>\n\tМожно уменьшить код, занеся определение счетчика\n\tв первый цикл, а <code class=\"code inline\">k++</code> - во второй:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\tfor ($i = 0, $k = 1; $i &lt; 3; $i++) {\n\t\tfor ($j = 0; $j &lt; 3; $j++, $k++) {\n\t\t\t$arr[$i][$j] = $k;\n\t\t}\n\t}\n\t\n\tvar_dump($arr);\n?&gt;</code>\n</div>\n<p>\n\tМожно также сделать увеличение счетчика после\n\tприсваивания:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [];\n\t\n\tfor ($i = 0, $k = 1; $i &lt; 3; $i++) {\n\t\tfor ($j = 0; $j &lt; 3; $j++) {\n\t\t\t$arr[$i][$j] = $k++;\n\t\t}\n\t}\n\t\n\tvar_dump($arr);\n?&gt;</code>\n</div>\n<p class=\"notice\">\n\tОбратите внимание на то, что в данном случае должно быть\n\tобязательно <code class=\"code inline\">k++</code>, а не <code class=\"code inline\">++k</code>, так как второй вариант\n\tсначала выполнит увеличение счетчика, а уже потом запись\n\tв массив (то есть в результате массив начнется с двойки,\n\tа не с единицы).\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью двух вложенных циклов\n\t\tследующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[[1, 2], [3, 4], [5, 6], [7, 8]]\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью двух вложенных циклов\n\t\tследующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью трех вложенных циклов\n\t\tследующий трехмерный массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n?&gt;</code>\n\t</div>\n</div>\n\n<!--\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\n\nfor (let i = 0; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t\tk++;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\nlet k = 1;\n\nfor (let i = 0; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\nlet k = 1;\n\nfor (let i = 0; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t\tk--;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\nlet k;\n\nfor (let i = 0; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t\tk++;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\n\nfor (let i = 0, k = 1; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\n\nfor (let i = 0, k = 1; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0, k++; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\n\nfor (let i = 0, k = 1; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++; k++) {\n\t\tarr[i][j] = k;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\n\nfor (let i = 0, k = 1; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = ++k;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\nlet k = 1;\n\nfor (let i = 0; i &lt; 3; i++) {\n\tarr[k] = [];\n\t\n\tfor (let j = 0; j &lt; 3; j++) {\n\t\tarr[i][j] = k;\n\t\tk++;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tАвтор следующего кода хотел сделать массив\n\t\t[[1, <code class=\"number inline\">2</code>, 3], [4, <code class=\"number inline\">5</code>, 6], [7,\n\t\t<code class=\"number inline\">8</code>, 9]]:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">let arr = [];\n\nfor (let i = 0, k = 1; i &lt; 3; i++) {\n\tarr[i] = [];\n\t\n\tfor (let j = 0; j &lt; 3; k++) {\n\t\tarr[i][j] = k;\n\t}\n}\n\nconsole.log(arr);</code>\n\t</div>\n\t<p>\n\t\tНаписанный код, однако, не делает задуманного.\n\t\tНайдите и исправьте ошибку автора.\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/multidimensionality/array-associative-arrays/","content":"\n\t\t\t\t<h1>Массив ассоциативных массивов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОчень часто в PHP появляются массивы, содержащие\n\tнабор неких сущностей, например, список пользователей\n\tили список продуктов.\n</p>\n<p>\n\tВот пример такого массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = [\n\t\t[\n\t\t\t'name'   =&gt; 'user1',\n\t\t\t'age'    =&gt; 31,\n\t\t\t'salary' =&gt; 1000,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'user2',\n\t\t\t'age'    =&gt; 32,\n\t\t\t'salary' =&gt; 2000,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'user3',\n\t\t\t'age'    =&gt; 33,\n\t\t\t'salary' =&gt; 3000,\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, здесь мы имеем дело с массивом\n\tассоциативных массивов. Не смотря на то,\n\tчто этот массив двухмерный, как правило для\n\tего перебора используется один <code class=\"code inline\">foreach</code>,\n\tперебирающий подмассивы. А части самих подмассивов\n\tпросто получают по ключу и записывают в нужном\n\tпорядке и формате.\n</p>\n<p>\n\tДавайте для примера выведем столбец наших\n\tработников в некотором формате:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($users as $user) {\n\t\techo $user['name'] . ': ' . $user['salary'] . '$, ' . $user['age'] . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$products = [\n\t\t[\n\t\t\t'name'   =&gt; 'мясо',\n\t\t\t'price'  =&gt; 100,\n\t\t\t'amount' =&gt; 5,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'овощи',\n\t\t\t'price'  =&gt; 200,\n\t\t\t'amount' =&gt; 6,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'фрукты',\n\t\t\t'price'  =&gt; 300,\n\t\t\t'amount' =&gt; 7,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите с помощью этого массива столбец\n\t\tпродуктов в каком-нибудь придуманном вами формате.\n\t</p>\n</div>\n\n<h2>Добавление элементов</h2>\n<p>\n\tДавайте добавим в наш массив еще одного юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users[] = [\n\t\t'name'   =&gt; 'name4',\n\t\t'age'    =&gt; 34,\n\t\t'salary' =&gt; 4000,\n\t];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте в массив с продуктами из предыдущей\n\t\tзадачи еще один продукт.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/multidimensionality/multi-arrays-conversion/","content":"\n\t\t\t\t<h1>Конвертация многомерных массивов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть список юзеров, хранящийся\n\tв следующей структуре:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = [\n\t\t[\n\t\t\t'id' =&gt; 11,\n\t\t\t'name' =&gt; 'name11',\n\t\t\t'surname' =&gt; 'surname11',\n\t\t],\n\t\t[\n\t\t\t'id' =&gt; 14,\n\t\t\t'name' =&gt; 'name14',\n\t\t\t'surname' =&gt; 'surname14',\n\t\t],\n\t\t[\n\t\t\t'id' =&gt; 17,\n\t\t\t'name' =&gt; 'name17',\n\t\t\t'surname' =&gt; 'surname17',\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте напишем код, который переформатирует\n\tнаш массив вот в такой:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t11 =&gt; [\n\t\t'id' =&gt; 11,\n\t\t'name' =&gt; 'name11',\n\t\t'surname' =&gt; 'surname11',\n\t],\n\t14 =&gt; [\n\t\t'id' =&gt; 14,\n\t\t'name' =&gt; 'name14',\n\t\t'surname' =&gt; 'surname14',\n\t],\n\t17 =&gt; [\n\t\t'id' =&gt; 17,\n\t\t'name' =&gt; 'name17',\n\t\t'surname' =&gt; 'surname17',\n\t],\n]</code>\n</div>\n<p>\n\tРешим поставленную задачу с помощью цикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = [];\n\t\n\tforeach ($users as $user) {\n\t\t$result[$user['id']] = $user;\n\t}\n\t\n\tvar_dump($result);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан список городов и их стран, хранящийся\n\t\tв следующей структуре:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t[\n\t\t'country' =&gt; 'Россия',\n\t\t'city' =&gt;    'Москва',\n\t],\n\t[\n\t\t'country' =&gt; 'Беларусь',\n\t\t'city' =&gt;    'Минск',\n\t],\n\t[\n\t\t'country' =&gt; 'Россия',\n\t\t'city' =&gt;    'Питер',\n\t],\n\t[\n\t\t'country' =&gt; 'Россия',\n\t\t'city' =&gt;    'Владивосток',\n\t],\n\t[\n\t\t'country' =&gt; 'Украина',\n\t\t'city' =&gt;    'Львов',\n\t],\n\t[\n\t\t'country' =&gt; 'Беларусь',\n\t\t'city' =&gt;    'Могилев',\n\t],\n\t[\n\t\t'country' =&gt; 'Украина',\n\t\t'city' =&gt;    'Киев',\n\t],\n]</code>\n\t</div>\n\t<p>\n\t\tНапишите код, которой переделает структуру\n\t\tданных вот в такую:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t'Россия'=&gt; [\n\t\t'Москва', 'Питер', 'Владивосток',\n\t],\n\t'Беларусь'=&gt; [\n\t\t'Минск', 'Могилев'\n\t],\n\t'Украина'=&gt; [\n\t\t'Киев', 'Львов'\n\t],\n]</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан список событий за определенные даты,\n\t\tхранящийся в следующей структуре:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name1'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-31',\n\t\t'event' =&gt; 'name2'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name3'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-30',\n\t\t'event' =&gt; 'name4'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name5'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-31',\n\t\t'event' =&gt; 'name6'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name7'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-30',\n\t\t'event' =&gt; 'name8'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-30',\n\t\t'event' =&gt; 'name9'\n\t],\n]</code>\n\t</div>\n\t<p>\n\t\tНапишите код, которой переделает структуру\n\t\tданных вот в такую:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t'2019-12-29'=&gt; ['name1', 'name3', 'name5', 'name7'],\n\t'2019-12-30'=&gt; ['name4', 'name8', 'name9'],\n\t'2019-12-31'=&gt; ['name2', 'name6'],\n]</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан список событий за определенные даты,\n\t\tхранящийся в следующей структуре:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t'2019-12-29'=&gt; ['name1', 'name2', 'name3', 'name4'],\n\t'2019-12-30'=&gt; ['name5', 'name6', 'name7'],\n\t'2019-12-31'=&gt; ['name8', 'name9'],\n]</code>\n\t</div>\n\t<p>\n\t\tНапишите код, которой переделает структуру\n\t\tданных вот в такую:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name1'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name2'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name3'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-29',\n\t\t'event' =&gt; 'name4'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-30',\n\t\t'event' =&gt; 'name5'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-30',\n\t\t'event' =&gt; 'name6'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-30',\n\t\t'event' =&gt; 'name7'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-31',\n\t\t'event' =&gt; 'name8'\n\t],\n\t[\n\t\t'date'  =&gt; '2019-12-31',\n\t\t'event' =&gt; 'name9'\n\t],\n]</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/multidimensionality/convenient-data-storage/","content":""},{"url":"/ru/php/book/prime/inbuilt/math/","content":"\n\t\t\t\t<h1>Математические функции в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<h2>Работа со степенью и корнем</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/math/sqrt/\"><code class=\"code inline\">sqrt</code></a>\n\t<a href=\"/ru/php/manual/math/pow/\"><code class=\"code inline\">pow</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВозведите <code class=\"number inline\">2</code> в <code class=\"number inline\">10</code> степень.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите квадратный корень из <code class=\"number inline\">245</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [4, 2, 5, 19, 13, 0, 10];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите корень из суммы квадратов его элементов.\n\t\tДля решения воспользуйтесь циклом <code class=\"code inline\">foreach</code>.\n\t</p>\n</div>\n\n<h2>Работа с функциями округления</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/math/round/\"><code class=\"code inline\">round</code></a>\n\t<a href=\"/ru/php/manual/math/ceil/\"><code class=\"code inline\">ceil</code></a>\n\t<a href=\"/ru/php/manual/math/floor/\"><code class=\"code inline\">floor</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите квадратный корень из <code class=\"number inline\">379</code>.\n\t\tРезультат округлите до целых, до десятых,\n\t\tдо сотых.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите квадратный корень из <code class=\"number inline\">587</code>.\n\t\tОкруглите результат в большую и меньшую сторону,\n\t\tзапишите результаты округления в ассоциативный\n\t\tмассив с ключами <code class=\"string inline\">'floor'</code> и <code class=\"string inline\">'ceil'</code>.\n\t</p>\n</div>\n\n<h2>Работа с min и max</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/math/min/\"><code class=\"code inline\">min</code></a>\n\t<a href=\"/ru/php/manual/math/max/\"><code class=\"code inline\">max</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [4, -2, 5, 19, -130, 0, 10];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите минимальное и максимальное число.\n\t</p>\n</div>\n\n<h2>Работа с рандомом</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/math/mt_rand/\"><code class=\"code inline\">mt_rand</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран случайное целое число от\n\t\t<code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла заполните массив <code class=\"number inline\">10</code>-ю\n\t\tслучайными целыми числами.\n\t</p>\n</div>\n\n<h2>Работа с модулем</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/math/abs/\"><code class=\"code inline\">abs</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны переменные <code class=\"code inline\">$a</code> и <code class=\"code inline\">$b</code>. Найдите\n\t\tнайдите модуль разности <code class=\"code inline\">$a</code> и <code class=\"code inline\">$b</code>.\n\t\tПроверьте работу скрипта самостоятельно для\n\t\tразличных <code class=\"code inline\">$a</code> и <code class=\"code inline\">$b</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/inbuilt/string/","content":"\n\t\t\t\t<h1>Строковые функции PHP</h1>\n\t\t\t\t<div class=\"content\">\n<h2>Работа с регистром символов</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strtolower/\"><code class=\"code inline\">strtolower</code></a>\n\t<a href=\"/ru/php/manual/string/strtoupper/\"><code class=\"code inline\">strtoupper</code></a>\n\t<a href=\"/ru/php/manual/string/ucfirst/\"><code class=\"code inline\">ucfirst</code></a>\n\t<a href=\"/ru/php/manual/string/lcfirst/\"><code class=\"code inline\">lcfirst</code></a>\n\t<a href=\"/ru/php/manual/string/ucwords/\"><code class=\"code inline\">ucwords</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'php'</code>. Сделайте из нее\n\t\tстроку <code class=\"string inline\">'PHP'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'PHP'</code>. Сделайте из нее\n\t\tстроку <code class=\"string inline\">'php'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'london'</code>. Сделайте из\n\t\tнее строку <code class=\"string inline\">'London'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'London'</code>. Сделайте из\n\t\tнее строку <code class=\"string inline\">'london'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'london is the capital of\n\t\tgreat britain'</code>. Сделайте из нее строку\n\t\t<code class=\"string inline\">'London Is The Capital Of Great Britain'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'LONDON'</code>. Сделайте из\n\t\tнее строку <code class=\"string inline\">'London'</code>.\n\t</p>\n</div>\n\n<h2>Работа с strlen</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strlen/\"><code class=\"code inline\">strlen</code></a>\n</div>\t\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'html css php'</code>. Найдите\n\t\tколичество символов в этой строке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана переменная <code class=\"code inline\">$password</code>, в которой\n\t\tхранится пароль пользователя. Если количество\n\t\tсимволов пароля больше <code class=\"number inline\">5</code>-ти и меньше\n\t\t<code class=\"number inline\">10</code>-ти, то выведите пользователю сообщение\n\t\tо том, что пароль подходит, иначе сообщение\n\t\tо том, что нужно придумать другой пароль.\n\t</p>\n</div>\n\t\n<h2>Работа с substr</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/substr/\"><code class=\"code inline\">substr</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'html css php'</code>. Вырежьте\n\t\tиз нее и выведите на экран слово <code class=\"string inline\">'html'</code>,\n\t\tслово <code class=\"string inline\">'css'</code> и слово <code class=\"string inline\">'php'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Вырежьте и выведите на экран\n\t\tпоследние <code class=\"number inline\">3</code> символа этой строки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Проверьте, что она начинается\n\t\tна <code class=\"string inline\">'http://'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Проверьте, что она начинается\n\t\tна <code class=\"string inline\">'http://'</code> или на <code class=\"string inline\">'https://'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Проверьте, что она заканчивается\n\t\tна <code class=\"string inline\">'.png'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Проверьте, что она заканчивается\n\t\tна <code class=\"string inline\">'.png'</code> или на <code class=\"string inline\">'.jpg'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Если в этой строке более <code class=\"number inline\">5</code>-ти\n\t\tсимволов - вырежьте из нее первые <code class=\"number inline\">5</code>\n\t\tсимволов, добавьте троеточие в конец и выведите\n\t\tна экран. Если же в этой строке <code class=\"number inline\">5</code>\n\t\tи менее символов - просто выведите эту строку\n\t\tна экран.\n\t</p>\n</div>\n\n<h2>Работа с str_replace</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/str_replace/\"><code class=\"code inline\">str_replace</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'31.12.2013'</code>. Замените\n\t\tвсе точки на дефисы.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Замените в ней все буквы <code class=\"string inline\">'a'</code>\n\t\tна цифру <code class=\"number inline\">1</code>, буквы <code class=\"string inline\">'b'</code> - на\n\t\t<code class=\"number inline\">2</code>, а буквы <code class=\"string inline\">'c'</code> - на <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с буквами и цифрами, например,\n\t\t<code class=\"string inline\">'1a2b3c4b5d6e7f8g9h0'</code>. Удалите из\n\t\tнее все цифры. То есть в нашем случае должна\n\t\tполучится строка <code class=\"string inline\">'abcbdefgh'</code>.\n\t</p>\n</div>\n\n<h2>Работа с strtr</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strtr/\"><code class=\"code inline\">strtr</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"code inline\">$str</code>. Замените в ней все\n\t\t<code class=\"string inline\">'a'</code> на цифру <code class=\"number inline\">1</code>, буквы <code class=\"string inline\">'b'</code>\n\t\t- на <code class=\"number inline\">2</code>, а буквы <code class=\"string inline\">'c'</code> - на <code class=\"number inline\">3</code>.\n\t\tРешите задачу двумя способами работы с функцией\n\t\t<code class=\"code inline\">strtr</code> (массив замен и две строки замен).\n\t</p>\n</div>\n\n<h2>Работа с substr_replace</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/substr_replace/\"><code class=\"code inline\">substr_replace</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"code inline\">$str</code>. Вырежьте из нее\n\t\tподстроку с <code class=\"number inline\">3</code>-го символа (отсчет с\n\t\tнуля), <code class=\"number inline\">5</code> штук и вместо нее вставьте\n\t\t<code class=\"string inline\">'!!!'</code>.\n\t</p>\n</div>\n\n<h2>Работа с strpos, strrpos</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strpos/\"><code class=\"code inline\">strpos</code></a>\n\t<a href=\"/ru/php/manual/string/strrpos/\"><code class=\"code inline\">strrpos</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'abc abc abc'</code>. Определите\n\t\tпозицию первой буквы <code class=\"string inline\">'b'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'abc abc abc'</code>. Определите\n\t\tпозицию последней буквы <code class=\"string inline\">'b'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'abc abc abc'</code>. Определите\n\t\tпозицию первой найденной буквы <code class=\"string inline\">'b'</code>,\n\t\tесли начать поиск не с начала строки, а с\n\t\tпозиции <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'aaa aaa aaa aaa aaa'</code>.\n\t\tОпределите позицию второго пробела.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, что в строке есть две точки подряд.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, что строка начинается на <code class=\"string inline\">'http://'</code>.\n\t</p>\n</div>\n\n<h2>Работа с explode, implode</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/explode/\"><code class=\"code inline\">explode</code></a>\n\t<a href=\"/ru/php/manual/array/implode/\"><code class=\"code inline\">implode</code></a>\n</div>\t\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'html css php'</code>. Запишите\n\t\tкаждое слово этой строки в отдельный элемент\n\t\tмассива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с элементами <code class=\"string inline\">'html'</code>, <code class=\"string inline\">'css'</code>,\n\t\t<code class=\"string inline\">'php'</code>. С помощью <code class=\"code inline\">implode</code> создайте\n\t\tстроку из этих элементов, разделенных запятыми.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ переменной <code class=\"code inline\">$date</code> лежит дата в формате\n\t\t<i>год-месяц-день</i>. Преобразуйте эту дату\n\t\tв формат <i>день.месяц.год</i>.\n\t</p>\n</div>\n\n<h2>Работа с str_split</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/str_split/\"><code class=\"code inline\">str_split</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'1234567890'</code>. Разбейте\n\t\tее на массив с элементами <code class=\"string inline\">'12'</code>, <code class=\"string inline\">'34'</code>,\n\t\t<code class=\"string inline\">'56'</code>, <code class=\"string inline\">'78'</code>, <code class=\"string inline\">'90'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'1234567890'</code>. Разбейте\n\t\tее на массив с элементами <code class=\"string inline\">'1', <code class=\"string inline\">'2'</code>,\n\t\t<code class=\"string inline\">'3'</code>, <code class=\"string inline\">'4'</code>, <code class=\"string inline\">'5'</code>, <code class=\"string inline\">'6'</code>,\n\t\t<code class=\"string inline\">'7'</code>, <code class=\"string inline\">'8'</code>, <code class=\"string inline\">'9'</code>, <code class=\"string inline\">'0'</code></code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'1234567890'</code>. Сделайте\n\t\tиз нее строку <code class=\"string inline\">'12-34-56-78-90'</code> не\n\t\tиспользуя цикл.\n\t</p>\n</div>\n\t\n<h2>Работа с trim, ltrim, rtrim</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/trim/\"><code class=\"code inline\">trim</code></a>\n\t<a href=\"/ru/php/manual/string/ltrim/\"><code class=\"code inline\">ltrim</code></a>\n\t<a href=\"/ru/php/manual/string/rtrim/\"><code class=\"code inline\">rtrim</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Очистите ее от концевых пробелов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'/php/'</code>. Сделайте из нее\n\t\tстроку <code class=\"string inline\">'php'</code>, удалив концевые слеши.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'слова слова слова.'</code>.\n\t\tВ конце этой строки может быть точка, а может\n\t\tи не быть. Сделайте так, чтобы в конце этой\n\t\tстроки гарантировано стояла точка. То есть:\n\t\tесли этой точки нет - ее надо добавить, а\n\t\tесли есть - ничего не делать. Задачу решите\n\t\tчерез <code class=\"code inline\">rtrim</code> без всяких ифов.\n\t</p>\n</div>\n\n<h2>Работа с strrev</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strrev/\"><code class=\"code inline\">strrev</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'12345'</code>. Сделайте из нее\n\t\tстроку <code class=\"string inline\">'54321'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, является ли слово <i>палиндромом</i>\n\t\t(одинаково читается во всех направлениях,\n\t\tпримеры таких слов: madam, otto, kayak, nun,\n\t\tlevel).\n\t</p>\n</div>\n\t\n<h2>Работа с str_shuffle</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/str_shuffle/\"><code class=\"code inline\">str_shuffle</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Перемешайте символы этой строки\n\t\tв случайном порядке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте строку из <code class=\"number inline\">6</code>-ти случайных\n\t\tмаленьких латинских букв так, чтобы буквы\n\t\tне повторялись. Нужно сделать так, чтобы\n\t\tв нашей строке могла быть любая латинская\n\t\tбуква, а не ограниченный набор.\n\t</p>\n</div>\n\n<h2>Работа с number_format</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/number_format/\"><code class=\"code inline\">number_format</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'12345678'</code>. Сделайте из\n\t\tнее строку <code class=\"string inline\">'12 <code class=\"number inline\">345</code> 678'</code>.\n\t</p>\n</div>\n\n<h2>Работа с str_repeat</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/str_repeat/\"><code class=\"code inline\">str_repeat</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью одного цикла и функции <code class=\"code inline\">str_repeat</code>\n\t\tвыведите на экран следующую пирамидку:\n\t</p>\n\t<div class=\"monoblock\">\n\t\tx<br>\n\t\txx<br>\n\t\txxx<br>\n\t\txxxx<br>\n\t\txxxxx<br>\n\t\txxxxxx<br>\n\t\txxxxxxx<br>\n\t\txxxxxxxx<br>\n\t\txxxxxxxxx\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью одного цикла и функции <code class=\"code inline\">str_repeat</code>\n\t\tвыведите на экран следующую пирамидку:\n\t</p>\n\t<div class=\"monoblock\">\n\t\t1<br>\n\t\t22<br>\n\t\t333<br>\n\t\t4444<br>\n\t\t55555<br>\n\t\t666666<br>\n\t\t7777777<br>\n\t\t88888888<br>\n\t\t<code class=\"number inline\">999999999</code>\n\t</div>\n</div>\n\n<h2>Работа с strip_tags и htmlspecialchars</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/htmlspecialchars/\"><code class=\"code inline\">htmlspecialchars</code></a>\n\t<a href=\"/ru/php/manual/string/strip_tags/\"><code class=\"code inline\">strip_tags</code></a>\n</div>\t\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'html, &lt;b&gt;php&lt;/b&gt;, js'</code>.\n\t\tУдалите теги из этой строки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"code inline\">$str</code>. Удалите все теги\n\t\tиз этой строки, кроме тегов &lt;b&gt; и &lt;i&gt;.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'html, &lt;b&gt;php&lt;/b&gt;, js'</code>.\n\t\tВыведите ее на экран <code class=\"string inline\">'как есть'</code>: то\n\t\tесть браузер не должен преобразовать &lt;b&gt;\n\t\tв жирный.\n\t</p>\n</div>\n\n<h2>Работа с chr и ord</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/chr/\"><code class=\"code inline\">chr</code></a>\n\t<a href=\"/ru/php/manual/string/ord/\"><code class=\"code inline\">ord</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУзнайте код символов <code class=\"string inline\">'a'</code>, <code class=\"string inline\">'b'</code>,\n\t\t<code class=\"string inline\">'c'</code>, пробела.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИзучите <a href=\"http://www.asciitable.com/\">таблицу\n\t\tASCII</a> Определите границы, в которых располагаются\n\t\tбуквы английского алфавита.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран символ с кодом <code class=\"number inline\">33</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в переменную <code class=\"code inline\">$str</code> случайный\n\t\tсимвол - большую букву латинского алфавита.\n\t\tДля этого с помощью таблицы ASCII определите\n\t\tкакие целые числа соответствуют большим буквам\n\t\tлатинского алфавита.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в переменную <code class=\"code inline\">$str</code> случайную\n\t\tстроку <code class=\"code inline\">$len</code> длиной, состоящую из маленьких\n\t\tбукв латинского алфавита.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана буква английского алфавита. Узнайте,\n\t\tона маленькая или большая.\n\t</p>\n</div>\n\n<!--\n<h2>Работа с str_word_count</h2>\n<div class=\"ref\">\n\t\n\t<a href=\"/ru/php/manual/string/str_word_count/\"><code class=\"code inline\">str_word_count</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n\t\n<h2>Работа с substr_count</h2>\n<div class=\"ref\">\n\t\n\t<a href=\"/ru/php/manual/string/substr_count/\"><code class=\"code inline\">substr_count</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n\t\n<h2>Работа с count_chars</h2>\n<div class=\"ref\">\n\t\n\t<a href=\"/ru/php/manual/string/count_chars/\"><code class=\"code inline\">count_chars</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n-->\n\n<h2>Работа с strchr, strrchr</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strchr/\"><code class=\"code inline\">strchr</code></a>\n\t<a href=\"/ru/php/manual/string/strrchr/\"><code class=\"code inline\">strrchr</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'ab-cd-ef'</code>. С помощью\n\t\tфункции <code class=\"code inline\">strchr</code> выведите на экран строку\n\t\t<code class=\"string inline\">'-cd-ef'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'ab-cd-ef'</code>. С помощью\n\t\tфункции <code class=\"code inline\">strrchr</code> выведите на экран\n\t\tстроку <code class=\"string inline\">'-ef'</code>.\n\t</p>\n</div>\n\n<h2>Работа с strstr</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/string/strstr/\"><code class=\"code inline\">strstr</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'ab--cd--ef'</code>. С помощью\n\t\tфункции <code class=\"code inline\">strstr</code> выведите на экран строку\n\t\t<code class=\"string inline\">'--cd--ef'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/inbuilt/array/","content":"\n\t\t\t\t<h1>Функции для массивов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<h2>Работа с in_array</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/in_array/\"><code class=\"code inline\">in_array</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПроверьте, что в нем есть элемент со значением\n\t\t<code class=\"number inline\">3</code>.\n\t</p>\n</div>\n\n<h2>Работа с array_sum и array_product</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_sum/\"><code class=\"code inline\">array_sum</code></a>\n\t<a href=\"/ru/php/manual/array/array_product/\"><code class=\"code inline\">array_product</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму элементов данного массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите произведение (умножение) элементов\n\t\tданного массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью функций <a href=\"/ru/php/manual/array/array_sum/\"><code class=\"code inline\">array_sum</code></a>\n\t\tи <a href=\"/ru/php/manual/array/count/\"><code class=\"code inline\">count</code></a>\n\t\tнайдите среднее арифметическое элементов\n\t\t(сумма элементов делить на их количество)\n\t\tданного массива.\n\t</p>\n</div>\n\n<h2>Работа с range</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/range/\"><code class=\"code inline\">range</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив, заполненный числами от <code class=\"number inline\">1</code>\n\t\tдо <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив, заполненный буквами от <code class=\"string inline\">'a'</code>\n\t\tдо <code class=\"string inline\">'z'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте строку <code class=\"string inline\">'1-2-3-4-5-6-7-8-9'</code>\n\t\tне используя цикл.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите сумму чисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>\n\t\tне используя цикл.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите произведение чисел от <code class=\"number inline\">1</code> до\n\t\t<code class=\"number inline\">10</code> не используя цикл.\n\t</p>\n</div>\n\n<h2>Работа с array_merge</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_merge/\"><code class=\"code inline\">array_merge</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны массивы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr1 = [1, 2, 3];\n\t$arr2 = ['a', 'b', 'c'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСделайте из них массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[1, 2, 3, 'a', 'b', 'c']\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Работа с array_slice</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_slice/\"><code class=\"code inline\">array_slice</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">array_slice</code> сделайте\n\t\tиз него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[2, 3, 4]\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Работа с array_splice</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_splice/\"><code class=\"code inline\">array_splice</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">array_splice</code> сделайте\n\t\tиз него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[1, 4, 5]\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">array_splice</code> сделайте\n\t\tиз него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[2, 3, 4]\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">array_splice</code> сделайте\n\t\tиз него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[1, 2, 3, 'a', 'b', 'c', 4, 5]\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">array_splice</code> сделайте\n\t\tиз него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[1, 'a', 'b', 2, 3, 4, 'c',  5, 'e']\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Работа с array_keys, array_values, array_combine</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_keys/\"><code class=\"code inline\">array_keys</code></a>\n\t<a href=\"/ru/php/manual/array/array_values/\"><code class=\"code inline\">array_values</code></a>\n\t<a href=\"/ru/php/manual/array/array_combine/\"><code class=\"code inline\">array_combine</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЗапишите в массив <code class=\"code inline\">$keys</code> ключи из этого\n\t\tмассива, а в <code class=\"code inline\">$values</code> – значения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массивы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr1 = ['a', 'b', 'c'];\n\t$arr2 = [1, 2, 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСоздайте с их помощью следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3]\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Работа с array_flip, array_reverse</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_flip/\"><code class=\"code inline\">array_flip</code></a>\n\t<a href=\"/ru/php/manual/array/array_reverse/\"><code class=\"code inline\">array_reverse</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПоменяйте в нем местами ключи и значения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСделайте из него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[5, 4, 3, 2, 1]\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Работа с array_search</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_search/\"><code class=\"code inline\">array_search</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', '-', 'b', '-', 'c', '-', 'd'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите позицию первого элемента <code class=\"string inline\">'-'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', '-', 'b', '-', 'c', '-', 'd'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите позицию первого элемента <code class=\"string inline\">'-'</code>\n\t\tи удалите его с помощью функции <code class=\"code inline\">array_splice</code>.\n\t</p>\n</div>\n\t\n<h2>Работа с array_replace</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_replace/\"><code class=\"code inline\">array_replace</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПоменяйте элемент с ключом <code class=\"number inline\">0</code> на <code class=\"string inline\">'!'</code>,\n\t\tа элемент с ключом <code class=\"number inline\">3</code> - на <code class=\"string inline\">'!!'</code>.\n\t</p>\n</div>\n\n<h2>Работа с сортировку</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/sort/\"><code class=\"code inline\">функции для сортировки</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['3'=&gt;'a', '1'=&gt;'c', '2'=&gt;'e', '4'=&gt;'b'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПопробуйте на нем различные типы сортировок.\n\t</p>\n</div>\n\t\n<h2>Работа с array_rand</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_rand/\"><code class=\"code inline\">array_rand</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран случайный ключ из данного\n\t\tмассива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран случайный элемент данного\n\t\tмассива.\n\t</p>\n</div>\n\n<h2>Работа с shuffle</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/shuffle/\"><code class=\"code inline\">shuffle</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПеремешайте его элементы в случайном порядке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив числами от <code class=\"number inline\">1</code> до <code class=\"number inline\">25</code>\n\t\tс помощью <code class=\"code inline\">range</code>, а затем перемешайте\n\t\tего элементы в случайном порядке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив, заполненный буквами от <code class=\"string inline\">'a'</code>\n\t\tдо <code class=\"string inline\">'z'</code> так, чтобы буквы шли в случайном\n\t\tпорядке и не повторялись.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте строку длиной <code class=\"number inline\">6</code> символов,\n\t\tсостоящую из маленьких английских букв, расположенных\n\t\tв случайном порядке. Буквы не должны повторяться.\n\t</p>\n</div>\n\n<h2>Работа с array_unique</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_unique/\"><code class=\"code inline\">array_unique</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'b', 'a'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tУдалите из этого массива повторяющиеся элементы.\n\t</p>\n</div>\n\n<h2>Начало и конец массива</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_shift/\"><code class=\"code inline\">array_shift</code></a>\n\t<a href=\"/ru/php/manual/array/array_pop/\"><code class=\"code inline\">array_pop</code></a>\n\t<a href=\"/ru/php/manual/array/array_unshift/\"><code class=\"code inline\">array_unshift</code></a>\n\t<a href=\"/ru/php/manual/array/array_push/\"><code class=\"code inline\">array_push</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран его первый и последний\n\t\tэлемент, причем так, чтобы в исходном массиве\n\t\tони исчезли.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДобавьте ему в начало элемент <code class=\"number inline\">0</code>, а\n\t\tв конец - элемент <code class=\"number inline\">6</code>.\n\t</p>\n</div>\n\n<h2>Заполнение массива</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_pad/\"><code class=\"code inline\">array_pad</code></a>\n\t<a href=\"/ru/php/manual/array/array_fill/\"><code class=\"code inline\">array_fill</code></a>\n\t<a href=\"/ru/php/manual/array/array_fill_keys/\"><code class=\"code inline\">array_fill_keys</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСделайте из него следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t['a', 'b', 'c', '-', '-', '-']\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив <code class=\"number inline\">10</code>-ю буквами <code class=\"string inline\">'x'</code>.\n\t</p>\n</div>\n\n<h2>Работа с array_chunk</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_chunk/\"><code class=\"code inline\">array_chunk</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив, заполненный целыми числами\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">20</code>. С помощью функции\n\t\t<code class=\"code inline\">array_chunk</code> разбейте этот массив на\n\t\t<code class=\"number inline\">5</code> подмассивов по пять элементов в каждом.\n\t</p>\n</div>\n\n<h2>Работа с array_count_values</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_count_values/\"><code class=\"code inline\">array_count_values</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'b', 'a'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПодсчитайте сколько раз встречается каждая\n\t\tиз букв.\n\t</p>\n</div>\n\n<h2>Работа с array_map</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_map/\"><code class=\"code inline\">array_map</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСоздайте новый массив, в котором будут лежать\n\t\tквадратные корни данных элементов.\n\t</p>\n</div>\n\n<h2>Работа с array_intersect, array_diff</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/array/array_intersect/\"><code class=\"code inline\">array_intersect</code></a>\n\t<a href=\"/ru/php/manual/array/array_diff/\"><code class=\"code inline\">array_diff</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массивы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr1 = [1, 2, 3, 4, 5];\n\t$arr2 = [3, 4, 5, 6, 7];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЗапишите в новый массив элементы, которые\n\t\tесть и в том, и в другом массиве.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массивы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr1 = [1, 2, 3, 4, 5];\n\t$arr2 = [3, 4, 5, 6, 7];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЗапишите в новый массив элементы, которые\n\t\tне присутствуют в обоих массивах одновременно.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/inbuilt/time/","content":"\n\t\t\t\t<h1>Функции для времени-даты в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<h2>Работа с timestamp</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/time/time/\"><code class=\"code inline\">time</code></a>\n\t<a href=\"/ru/php/manual/time/mktime/\"><code class=\"code inline\">mktime</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите текущее время в формате <code class=\"code inline\">timestamp</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите <code class=\"number inline\">1</code> марта <code class=\"number inline\">2025</code> года\n\t\tв формате <code class=\"code inline\">timestamp</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите <code class=\"number inline\">31</code> декабря текущего года\n\t\tв формате <code class=\"code inline\">timestamp</code>. Скрипт должен\n\t\tработать независимо от года, в котором он запущен.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество секунд, прошедших с <code class=\"number inline\">13</code>:12:59\n\t\t<code class=\"number inline\">15</code>-го марта <code class=\"number inline\">2000</code> года до настоящего\n\t\tмомента времени.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество целых часов, прошедших\n\t\tс <code class=\"number inline\">7</code>:23:48 текущего дня до настоящего\n\t\tмомента времени.\n\t</p>\n</div>\n\n<h2>Функция date</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/time/date/\"><code class=\"code inline\">date</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на экран текущий год, месяц, день,\n\t\tчас, минуту, секунду.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите текущую дату-время в форматах <i>2025-12-31</i>,\n\t\t<i>31.12.2025</i>, <i>31.12.13</i>, <i>12:59:59</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью функций mktime и date выведите\n\t\t<code class=\"number inline\">12</code> февраля <code class=\"number inline\">2025</code> года в формате\n\t\t<i>12.02.2025</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив дней недели. С помощью этого\n\t\tмассива и функции <code class=\"code inline\">date</code> выведите на\n\t\tэкран название текущего дня недели. Узнайте\n\t\tкакой день недели был <code class=\"string inline\">06.06.2006</code>,\n\t\tв ваш день рождения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте массив месяцев. С помощью этого\n\t\tмассива и функции <code class=\"code inline\">date</code> выведите на\n\t\tэкран название текущего месяца.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите количество дней в текущем месяце.\n\t\tСкрипт должен работать независимо от месяца,\n\t\tв котором он запущен.\n\t</p>\n</div>\n\n<h2>Функция strtotime</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/time/strtotime/\"><code class=\"code inline\">strtotime</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана дата в формате <i>2025-12-31</i>. С\n\t\tпомощью функции <code class=\"code inline\">strtotime</code> и функции\n\t\t<code class=\"code inline\">date</code> преобразуйте ее в формат <i>31-12-2025</i>.\n\t</p>\n</div>\n\n<h2>Прибавление и отнимание дат</h2>\n<div class=\"ref\">\n\t<a href=\"/ru/php/manual/time/date_create/\"><code class=\"code inline\">date_create</code></a>\n\t<a href=\"/ru/php/manual/time/date_modify/\"><code class=\"code inline\">date_modify</code></a>\n\t<a href=\"/ru/php/manual/time/date_format/\"><code class=\"code inline\">date_format</code></a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ переменной <code class=\"code inline\">$date</code> лежит дата в формате\n\t\t<i>2025-12-31</i>. Прибавьте к этой дате\n\t\t<code class=\"number inline\">2</code> дня, <code class=\"number inline\">1</code> месяц и <code class=\"number inline\">3</code> дня,\n\t\t<code class=\"number inline\">1</code> год. Отнимите от этой даты <code class=\"number inline\">3</code> дня.\n\t</p>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tУзнайте сколько дней осталось до Нового Года.\n\t\tСкрипт должен работать в любом году.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в переменной содержится некоторый год.\n\t\tНайдите все пятницы <code class=\"number inline\">13</code>-е в этом году.\n\t\tРезультат выведите в виде массива дат.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУзнайте какой день недели был <code class=\"number inline\">100</code>\n\t\tдней назад.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/inbuilt/practicum/","content":"\n\t\t\t\t<h1>Практика на использования изученных функций PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ следующих задачах вы должны применить комбинацию\n\tстандартных функций PHP, чтобы решить задачу.\n\tЦиклы использовать запрещено.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Найдите среднее арифметическое\n\t\tего элементов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите сумму чисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите столбец чисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив <code class=\"number inline\">10</code>-ю иксами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив <code class=\"number inline\">10</code>-ю случайными числами\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code> так, чтобы они не\n\t\tповторялись.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите факториал заданного числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано число. Найдите сумму цифр этого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Сделайте заглавным последний\n\t\tсимвол этой строки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Получите из него массив\n\t\tс квадратными корнями этих чисел.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните массив числами от <code class=\"number inline\">1</code> до <code class=\"number inline\">26</code>\n\t\tтак, чтобы ключами этих чисел были буквы\n\t\tанглийского алфавита:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t['a' =&gt; 1, 'b' =&gt; 2...]\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка <code class=\"string inline\">'1234567890'</code>. Найдите\n\t\tсумму цифр из этой строки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана некоторая строка с числами, например, такая:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1234567890';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите сумму пар чисел:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t12 + 34 + 56 + 78 + 90\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИспользуя комбинацию функций заполните массив\n\t\tследующим образом:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/creation-and-call/","content":"\n\t\t\t\t<h1>Основы работы с пользовательскими функциями в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами научимся создавать свои\n\tфункции, которые затем можно будет использовать\n\tподобно стандартным функциям PHP.\n</p>\n<p>\n\tДавайте рассмотрим синтаксис для создания\n\tсвоей функции.\n</p>\n<p>\n\tФункция создается с помощью команды <code class=\"code inline\">function</code>.\n\tДалее через пробел следует <i>имя функции</i>\n\tи <i>круглые скобки</i>, в которых пишется\n\tкакой-то код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\t// какой-то код\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте посмотрим на каком-нибудь примере.\n</p>\n<p>\n\tСделаем функцию с именем <code class=\"code inline\">func</code>, которая\n\tпри своем вызове будет выводить на экран\n\tвосклицательный знак:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\techo '!';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь вызовем нашу функцию. Для\n\tэтого необходимо написать ее имя и круглые скобки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\techo '!';\n\t}\n\t\n\t// Вызываем нашу функцию:\n\tfunc(); // выведет '!'\n?&gt;</code>\n</div>\n<p>\n\tМожно вызвать нашу функцию несколько раз\n\t- в этом случае каждый вызов функции будет\n\tсовершать новый вывод на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\techo '!';\n\t}\n\t\n\tfunc(); // выведет '!'\n\tfunc(); // выведет '!'\n\tfunc(); // выведет '!'\n?&gt;</code>\n</div>\n<p>\n\tФункции могут быть вызваны до места своего\n\tопределения:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(); // выведет '!'\n\t\n\tfunction func() {\n\t\techo '!';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, выводящую на экран ваше имя.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, выводящую на экран сумму\n\t\tчисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/parameters/","content":"\n\t\t\t\t<h1>Параметры функций в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри вызове функции мы пишем ее имя и пустые\n\tкруглые скобки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc();\n?&gt;</code>\n</div>\n<p>\n\tНа самом деле скобки не обязательно должны\n\tбыть пустыми - в них мы можем передавать\n\tпараметры.\n</p>\n<p>\n\tПусть, к примеру, мы хотим сделать функцию,\n\tкоторая параметром будет принимать число\n\tи выводить на экран квадрат этого числа.\n</p>\n<p>\n\tКак мы теперь будем вызывать нашу функцию:\n\tмы будем писать имя функции, круглые скобки,\n\tа в них - какое-то число, квадрат которого\n\tмы хотим получить.\n</p>\n<p>\n\tК примеру, вот так мы получим квадрат числа\n\t<code class=\"number inline\">2</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(2); // выведет 4\n?&gt;</code>\n</div>\n<p>\n\tА вот так - квадрат числа <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(3); // выведет 9\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь напишем реализацию нашей функции.\n</p>\n<p>\n\tМы знаем, что функция параметром должна принимать\n\tчисло. Значит, при определении функции в\n\tкруглых скобках мы должны написать какую-то\n\tпеременную, в которую будет попадать переданное\n\tчисло.\n</p>\n<p>\n\tНазвание переменной может быть любым, давайте,\n\tнапример, назовем ее <code class=\"code inline\">$num</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ эту переменную <code class=\"code inline\">$num</code> при вызове функции\n\tбудет попадать указанное в круглых скобках число:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(2); // в переменную $num попадет число 2\n\tfunc(3); // в переменную $num попадет число 3\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь сделаем так, чтобы наша функция\n\tвыводила квадрат переданного числа. Для этого\n\tперемножим переменную <code class=\"code inline\">$num</code> саму на\n\tсебя и выведем на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\techo $num * $num;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПроверим работу функции, вызвав ее с различными\n\tчислами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\techo $num * $num;\n\t}\n\t\n\tfunc(2); // выведет 4\n\tfunc(3); // выведет 9\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром принимает\n\t\tчисло и выводит на экран куб этого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром принимает\n\t\tчисло и проверяет, положительное это число\n\t\tили отрицательное. В первом случае пусть\n\t\tфункция выводит на экран текст <code class=\"string inline\">'+++'</code>,\n\t\tа во втором <code class=\"string inline\">'---'</code>.\n\t</p>\n</div>\n\n<h2>Несколько параметров</h2>\n<p>\n\tФункция может принимать не один параметр,\n\tа несколько. В этом случае их нужно перечислить\n\tчерез запятую. Давайте для примера сделаем\n\tфункцию, параметром принимающую два числа\n\tи выводящую на экран их сумму:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num1, $num2) {\n\t\techo $num1 + $num2;\n\t}\n\t\n\tfunc(1, 2); // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметрами принимает\n\t\t<code class=\"number inline\">3</code> числа и выводит на экран сумму этих\n\t\tчисел.\n\t</p>\n</div>\n\n<h2>Параметры-переменные</h2>\n<p>\n\tДавайте рассмотрим следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\techo $num * $num;\n\t}\n\t\n\tfunc(2);\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, в при вызове функции в нее\n\tпередается число <code class=\"number inline\">2</code>.\n</p>\n<p>\n\tНе обязательно параметром функции передавать\n\tименно число - можно передать и переменную,\n\tсодержащую нужное нам число:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\techo $num * $num;\n\t}\n\t\n\t$param = 2;\n\tfunc($param);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию <code class=\"code inline\">func</code>, которая параметром\n\t\tбудет принимать <code class=\"number inline\">3</code> числа и выводить\n\t\tна экран их сумму. С помощью этой функции\n\t\tвыведите на экран сумму значений следующих\n\t\tпеременных:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$param1 = 1;\n\t$param2 = 2;\n\t$param3 = 3;\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Необязательные параметры</h2>\n<p>\n\tПусть у нас есть функция, которая параметром\n\tпринимает имя и выводит его на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($name) {\n\t\techo 'ваше имя: ' . $name;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПроверим работу нашей функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc('Вася'); // выведет 'ваше имя: Вася'\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь сделаем так, чтобы имя было\n\tне обязательным: если оно будет введено,\n\tто выведется на экран, а если не введено\n\t- то пусть принимает значение <code class=\"string inline\">'Аноним'</code>.\n</p>\n<p>\n\tДля того, чтобы сделать параметр необязательным,\n\tдля него нужно определить <i>значение по\n\tумолчанию</i>. Для этого при определении\n\tпараметра нужно поставить знак <code class=\"code inline\">=</code> и\n\tжелаемое значение, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($name = 'Аноним') {\n\t\techo 'ваше имя: ' . $name;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПроверим теперь работу нашей функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t// Без параметра:\n\tfunc(); // выведет 'ваше имя: Аноним'\n\t\n\t// С параметром:\n\tfunc('Вася'); // выведет 'ваше имя: Вася'\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь наша функция принимает два параметра:\n\tимя и возраст:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($name, $age) {\n\t\techo 'ваше имя: ' . $name . ' возраст: ' . $age;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте сделаем так, чтобы возраст был необязателен:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($name, $age = 'неизвестен') {\n\t\techo 'ваше имя: ' . $name . ' возраст: ' . $age;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь сделаем так, чтобы и имя, и возраст\n\tбыли необязательны:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($name = 'Аноним', $age = 'неизвестен') {\n\t\techo 'ваше имя: ' . $name . ' возраст: ' . $age;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА вот сделать так, чтобы имя было необязательным,\n\tа возраст - нет, нельзя. Дело в том, что\n\tвсе необязательные параметры следует писать\n\tв конце. Смотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t// так не будет работать\n\tfunction func($name = 'Аноним', $age) {\n\t\techo 'ваше имя: ' . $name . ' возраст: ' . $age;\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num = 5) {\n\t\techo $num * $num;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЭта функция вызывается следующим образом:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(2);\n\tfunc(3);\n\tfunc();\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tРасскажите, каким будет результат каждого\n\t\tиз вызовов функции.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num1 = 0, $num2 = 0) {\n\t\techo $num1 + $num2;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tЭта функция вызывается следующим образом:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(2, 3);\n\tfunc(3);\n\tfunc();\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tРасскажите, каким будет результат каждого\n\t\tиз вызовов функции.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/return/","content":"\n\t\t\t\t<h1>Инструкция return в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть функция, которая выводит\n\tна экран квадрат переданного числа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\techo $num * $num;\n\t}\n\t\n\tfunc(3); // выведет 9\n?&gt;</code>\n</div>\n<p>\n\tПусть мы хотим не выводить значение на экран,\n\tа записать в какую-нибудь переменную, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = func(3); // в переменной $result теперь 9\n?&gt;</code>\n</div>\n<p>\n\tДля этого в PHP существует специальная инструкция\n\t<code class=\"code inline\">return</code>, которая позволяет указать\n\tзначение, которое возвращает функция. Под\n\tсловом <i>возвращает</i> понимают то значение,\n\tкоторое запишется в переменную, если ей присвоить\n\tвызванную функцию.\n</p>\n<p>\n\tИтак, давайте перепишем нашу функцию так,\n\tчтобы она не выводила результат на экран,\n\tа возвращала его в переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\t$result = func(3); // в переменной $result теперь 9\n?&gt;</code>\n</div>\n<p>\n\tПосле того, как данные записаны в переменную,\n\tих можно, например, вывести на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\t$result = func(3);\n\techo $result; // выведет 9\n?&gt;</code>\n</div>\n<p>\n\tА можно сначала как-то изменить эти данные,\n\tа затем вывести их на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\t$result = func(3);\n\t$result = $result + 1;\n\techo $result; // выведет 10\n?&gt;</code>\n</div>\n<p>\n\tМожно сразу выполнять какие-то действия с\n\tрезультатом работы функции перед записью\n\tв переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\t$result = func(3) + 1;\n\techo $result; // выведет 10\n?&gt;</code>\n</div>\n<p>\n\tА можно не записывать результат в переменную,\n\tа сразу вывести его на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\techo func(3); // выведет 9\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром принимает\n\t\tчисло, а возвращает куб этого числа. С помощью\n\t\tэтой функции найдите куб числа <code class=\"number inline\">3</code> и\n\t\tзапишите его в переменную <code class=\"code inline\">$result</code>.\n\t</p>\n</div>\n\n<h2>Использование функций в выражении</h2>\n<p>\n\tВ следующем примере с помощью функции <code class=\"code inline\">func</code>\n\tмы сначала найдем квадрат числа <code class=\"number inline\">2</code>,\n\tа затем - квадрат числа <code class=\"number inline\">3</code>, сложим\n\tэти значения и запишем в переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\t$result = func(2) + func(3);\n\techo $result; // выведет 13\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром принимает\n\t\tчисло, а возвращает квадратный корень из\n\t\tэтого числа. С помощью этой функции найдите\n\t\tкорень числа <code class=\"number inline\">3</code>, затем найдите корень\n\t\tчисла <code class=\"number inline\">4</code>. Просуммируйте полученные\n\t\tрезультаты и выведите их на экран.\n\t</p>\n</div>\n\n<h2>Функции в функциях</h2>\n<p>\n\tМожно также результат работы одной функции\n\tпередать параметром в другую, например, вот\n\tтак мы сначала найдем квадрат числа <code class=\"number inline\">2</code>,\n\tа затем квадрат результата:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\t$result = func(func(2));\n\techo $result; // выведет 16\n?&gt;</code>\n</div>\n<p>\n\tФункции, конечно же, не обязательно должны\n\tбыть одинаковыми.\n</p>\n<p>\n\tПусть, например, у нас есть функция, возвращающая\n\tквадрат числа, и функция, возвращающая куб числа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction square($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\tfunction cube($num) {\n\t\treturn $num * $num * $num;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте с помощью этих функций возведем число\n\t<code class=\"number inline\">2</code> в квадрат, а затем результат этой\n\tоперации возведем в куб:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = cube(square(2));\n\techo $result;\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь у нас есть функция, возвращающая\n\tквадрат числа, и функция, находящая сумму\n\tдвух чисел:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction square($num) {\n\t\treturn $num * $num;\n\t}\n\t\n\tfunction sum($num1, $num2) {\n\t\treturn $num1 + $num2;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНайдем с помощью этих функций сумму квадрата\n\tчисла <code class=\"number inline\">2</code> и сумму квадрата числа <code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = sum(square(2), square(3));\n\techo $result;\n?&gt;</code>\n</div>\n<!--\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть функция, возвращающая квадратный\n\t\tкорень из числа, и функция, округляющая дробь\n\t\tдо трех знаков в дробной части:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">function sqrt(num) {\n\treturn Math.sqrt(num);\n}\n\nfunction round(num) {\n\treturn num.toFixed(3);\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью этих функций найдите квадратный\n\t\tкорень из числа <code class=\"number inline\">2</code> и округлите его\n\t\tдо трех знаков в дробной части.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть функция, возвращающая квадратный\n\t\tкорень из числа, и функция, возвращающая\n\t\tсумму трех чисел:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">function sqrt(num) {\n\treturn Math.sqrt(num);\n}\n\nfunction sum(num1, num2, num3) {\n\treturn num1 + num2 + num3;\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью этих функций найдите сумму корней\n\t\tчисел <code class=\"number inline\">2</code>, <code class=\"number inline\">3</code> и <code class=\"number inline\">4</code> и запишите\n\t\tее в переменную <code class=\"code inline\">result</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть функция, округляющая дробь\n\t\tдо трех знаков в дробной части:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">function round(num) {\n\treturn num.toFixed(3);\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью этой функции модифицируйте предыдущую\n\t\tзадачу так, чтобы в переменную <code class=\"code inline\">result</code>\n\t\tзаписывалась дробь, округленная до <code class=\"number inline\">3</code>-х\n\t\tзнаков в дробной части.\n\t</p>\n</div>\n-->\n\n<h2>Тонкое место return</h2>\n<p>\n\tПосле того, как выполнится инструкция <code class=\"code inline\">return</code>\n\t- функция закончит свою работу. То есть:\n\t<i>после выполнения return больше никакой\n\tкод не выполнится.</i>\n</p>\n<p>\n\tСмотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num * $num;\n\t\t\n\t\techo '!'; // этот код никогда не выполнится\n\t}\n\t\n\t$result = func(3);\n?&gt;</code>\n</div>\n<p>\n\tЭто не значит, что в функции должен быть\n\tодин <code class=\"code inline\">return</code>. Но выполнится только\n\tодин из них.\n</p>\n<p>\n\tВ следующем примере в зависимости от значения\n\tпараметра выполнится либо первый, либо второй\n\t<code class=\"code inline\">return</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\tif ($num &gt;= 0) {\n\t\t\treturn '+';\n\t\t} else {\n\t\t\treturn '-';\n\t\t}\n\t}\n\t\n\techo func( 3); // выведет '+'\n\techo func(-3); // выведет '-'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЧто выведется на экран в результате выполнения\n\t\tследующего кода:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\treturn $num;\n\t\t\n\t\t$result = $num * $num;\n\t\treturn $result;\n\t}\n\t\n\techo func(3);\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tОбъясните почему.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЧто выведет каждый из <code class=\"code inline\">echo</code> в результате\n\t\tвыполнения следующего кода:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\tif ($num &lt;= 0) {\n\t\t\treturn abs($num);\n\t\t} else {\n\t\t\treturn $num * $num;\n\t\t}\n\t}\n\t\n\techo func(10);\n\techo func(-5);\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tОбъясните почему.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЧто выведет каждый из <code class=\"code inline\">echo</code> в результате\n\t\tвыполнения следующего кода:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\tif ($num &lt;= 0) {\n\t\t\treturn abs($num);\n\t\t}\n\t\t\n\t\treturn $num * $num;\n\t}\n\t\n\techo func(10);\n\techo func(-5);\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tОбъясните почему.\n\t</p>\n</div>\n\n<h2>Цикл и return</h2>\n<p>\n\tПусть у нас есть функция, возвращающая сумму\n\tчисел от <code class=\"number inline\">1</code> до <code class=\"number inline\">5</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\t$sum = 0;\n\t\t\n\t\tfor ($i = 1; $i &lt;= 5; $i++) {\n\t\t\t$sum += $i;\n\t\t}\n\t\t\n\t\treturn $sum;\n\t}\n\t\n\t$result = func();\n\techo $result; // выведет 15\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь мы расположим <code class=\"code inline\">return</code>\n\tвнутри цикла, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\t$sum = 0;\n\t\t\n\t\tfor ($i = 1; $i &lt;= 5; $i++) {\n\t\t\t$sum += $i;\n\t\t\treturn $sum;\n\t\t}\n\t}\n\t\n\t$result = func();\n\techo $result;\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае цикл прокрутится лишь одну\n\tитерацию и произойдет автоматический выход\n\tиз функции (ну и заодно из цикла). А за одну\n\tитерацию цикла в переменной <code class=\"code inline\">$sum</code> окажется\n\tлишь число <code class=\"number inline\">1</code>, а не вся нужная сумма.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tЧто выведется на экран в результате выполнения\n\t\tследующего кода:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\t$sum = 0;\n\t\t\n\t\tfor ($i = 1; $i &lt;= $num; $i++) {\n\t\t\t$sum += $i;\n\t\t\treturn $sum;\n\t\t}\n\t}\n\t\n\techo func(5);\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tОбъясните почему.\n\t</p>\n\t<p>\n\t\tЧто хотел сделать автор данного кода? Исправьте\n\t\tошибку автора.\n\t</p>\n</div>\n\n<h2>Применение return в цикле</h2>\n<p>\n\tТо, что <code class=\"code inline\">return</code> расположен внутри цикла,\n\tне всегда может быть ошибкой.\n</p>\n<p>\n\tВ следующем примере сделана функция, которая\n\tопределяет, сколько первых элементов массива\n\tнужно сложить, чтобы сумма стала больше или\n\tравна <code class=\"number inline\">10</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\t$length = count($arr);\n\t\t$sum = 0;\n\t\t\n\t\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\t\t$sum += $arr[$i];\n\t\t\t\n\t\t\t// Если сумма больше или равна 10:\n\t\t\tif ($sum &gt;= 10) {\n\t\t\t\treturn $i + 1; // выходим из цикла и из функции\n\t\t\t}\n\t\t}\n\t}\n\t\n\t$result = func([1, 2, 3, 4, 5]);\n\techo $result;\n?&gt;</code>\n</div>\n<p>\n\tА в следующем примере сделана функция, которая\n\tвычисляет, сколько целых чисел, начиная с\n\t<code class=\"number inline\">1</code>, нужно сложить, чтобы результат\n\tбыл больше <code class=\"number inline\">100</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func() {\n\t\t$sum = 0;\n\t\t$i = 1;\n\t\t\n\t\twhile (true) { // бесконечный цикл\n\t\t\t$sum += $i;\n\t\t\t\n\t\t\tif ($sum &gt;= 100) {\n\t\t\t\treturn $i; // цикл крутится пока не выйдет тут\n\t\t\t}\n\t\t\t\n\t\t\t$i++;\n\t\t}\n\t}\n\t\n\techo  func( );\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите функцию, которая параметром будет\n\t\tпринимать число и делить его на <code class=\"number inline\">2</code>\n\t\tстолько раз, пока результат не станет меньше\n\t\t<code class=\"number inline\">10</code>. Пусть функция возвращает количество\n\t\tитераций, которое потребовалось для достижения\n\t\tрезультата.\n\t</p>\n</div>\n\n<h2>Приемы работы с return</h2>\n<p>\n\tСуществуют некоторые приемы работы с <code class=\"code inline\">return</code>,\n\tупрощающие код.\n</p>\n<p>\n\tРассмотрим, к примеру, следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\tif ($num &gt;= 0) {\n\t\t\t$result = sqrt($num);\n\t\t} else {\n\t\t\t$result = 0;\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n\t\n\techo func(3);\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, в данном коде в зависимости\n\tот условия в переменную <code class=\"code inline\">$result</code> будет\n\tпопадать либо одно, либо другое значение.\n\tА последней строкой функции содержимое этой\n\tпеременной возвращается через <code class=\"code inline\">return</code>.\n</p>\n<p>\n\tДавайте перепишем этот код в более сокращенной\n\tформе, избавившись от ненужной здесь переменной\n\t<code class=\"code inline\">$result</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\tif ($num &gt;= 0) {\n\t\t\treturn sqrt($num);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\techo func(3);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана следующая функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num1, $num2) {\n\t\tif ($num1 &gt; 0 and $num2 &gt; 0) {\n\t\t\t$result = $num1 * $num2;\n\t\t} else {\n\t\t\t$result = $num1 - $num2;\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n\t\n\techo func(3, 4);\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПерепишите ее в сокращенной форме согласно\n\t\tизученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/examples/","content":"\n\t\t\t\t<h1>Примеры на создание функций в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ этом уроке мы с вами будем отрабатывать\n\tполученные ранее знания по пользовательским\n\tфункциям на практических задачах.\n</p>\n<p>\n\tПусть у нас дан какой-то произвольный массив\n\tс числами, например, такой:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4];\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь перед нами, к примеру, стоит\n\tзадача найти сумму квадратов элементов этого\n\tмассива. Пока не будем использовать пользовательские\n\tфункции, чтобы показать, какие проблемы возникнут\n\tв этом случае.\n</p>\n<p>\n\tДавайте напишем код, реализующий нашу задачу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4];\n\t\n\t// Код, находящий сумму:\n\t$sum = 0;\n\t\n\tforeach ($arr as $elem) {\n\t\t$sum += $elem * $elem;\n\t}\n\t\n\techo $sum;\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь у нас даны два массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr1 = [1, 2, 3, 4];\n\t$arr2 = [5, 6, 7, 8];\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь перед нами стоит задача найти\n\tсумму квадратов элементов и одного массива,\n\tи второго. В этом случае нам придется код,\n\tнаходящий сумму, повторить два раза: для\n\tпервого и для второго массива, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr1 = [1, 2, 3, 4];\n\t$arr2 = [5, 6, 7, 8];\n\t\n\t// Код, находящий сумму для первого массива:\n\t$sum1 = 0;\n\t\n\tforeach ($arr1 as $elem) {\n\t\t$sum1 += $elem;\n\t}\n\t\n\t// Код, находящий сумму для второго массива:\n\t$sum2 = 0;\n\t\n\tforeach ($arr2 as $elem) {\n\t\t$sum2 += $elem;\n\t}\n\t\n\t// Код, выводящий найденные суммы:\n\techo $sum1;\n\techo $sum2;\n?&gt;</code>\n</div>\n<p>\n\tКак мы видим, у нас возникает дублирование\n\tкода. Давайте избавимся от него, создав свою\n\tфункцию, находящую сумму элементов переданного\n\tпараметром массива.\n</p>\n<p>\n\tВот код этой функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getSquareSum($arr) {\n\t\t$sum = 0;\n\t\t\n\t\tforeach ($arr as $elem) {\n\t\t\t$sum += $elem;\n\t\t}\n\t\t\n\t\treturn $sum;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tИспользуем теперь нашу функцию для нахождения\n\tсуммы одного и второго массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getSquareSum($arr) {\n\t\t$sum = 0;\n\t\t\n\t\tforeach ($arr as $elem) {\n\t\t\t$sum += $elem;\n\t\t}\n\t\t\n\t\treturn $sum;\n\t}\n\t\n\t$arr1 = [1, 2, 3, 4];\n\t$arr2 = [5, 6, 7, 8];\n\t\n\techo getSquareSum($arr1);\n\techo getSquareSum($arr2);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите функцию, которая будет находить\n\t\tсумму квадратных корней элементов массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте функцию <code class=\"code inline\">getDivisors</code>, которая\n\t\tпараметром будет принимать число и возвращать\n\t\tмассив его делителей, то есть целых чисел,\n\t\tна которое делится наше число.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию <code class=\"code inline\">delElem</code>, которая\n\t\tпараметрами будет принимать значение и массив\n\t\tи удалять из массива все элементы с таким\n\t\tзначением.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/flags/","content":"\n\t\t\t\t<h1>Флаги в функциях PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть код, проверяющий число на\n\tпростоту:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$num = 31;\n\t$flag = true;\n\t\n\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\tif ($num % $i === 0) {\n\t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tvar_dump($flag);\n?&gt;</code>\n</div>\n<p>\n\tДавайте оформим этот код в виде функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction isPrime($num) {\n\t\t$flag = true;\n\t\t\n\t\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\t\tif ($num % $i === 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $flag;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПроверим работу нашей функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump( isPrime(10) );\n\tvar_dump( isPrime(31) );\n?&gt;</code>\n</div>\n\n<h2>Упростим код</h2>\n<p>\n\tДавайте теперь посмотрим, как можно упростить\n\tработу с флагами, если мы используем их в\n\tфункции. На самом деле в случае с функцией\n\tпеременная <code class=\"code inline\">$flag</code> и команда <code class=\"code inline\">break</code>\n\tнам не понадобятся - вместо них все сделает\n\tкоманда <code class=\"code inline\">return</code>.\n</p>\n<p>\n\tДелается это следующим образом: внутри функции\n\tзапускаем наш цикл с ифом и, если мы попали\n\tв иф - возвращаем <code class=\"code inline\">false</code>, тем самым\n\tвыходя из цикла и из функции. А если цикл\n\tпрокрутился, но выхода из функции не случилось\n\t- после цикла возвращаем <code class=\"code inline\">true</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction isPrime($num) {\n\t\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\t\tif ($num % $i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЕще раз как это работает: если в массиве\n\tнайдется нужный элемент - мы выйдем из функции\n\t(и из цикла тоже) с помощью <code class=\"code inline\">return</code>.\n\tНо если в массиве не найдется нужный элемент\n\t- выхода из функции не произойдет и выполнение\n\tдойдет до команды <code class=\"code inline\">return true</code>. И получится,\n\tчто функция вернет <code class=\"code inline\">true</code> в знак того,\n\tчто число простое.\n</p>\n\n<h2>Проверка по массиву</h2>\n<p>\n\tДавайте теперь сделаем функцию, которая параметром\n\tбудет принимать массив, и проверять, что\n\tвсе элементы в этом массиве положительные.\n</p>\n<p>\n\tПусть функция возвращает <code class=\"code inline\">true</code>, если\n\tэто так, и <code class=\"code inline\">false</code>, если хотя бы один\n\tиз элементов массива отрицательный. Вот примеры\n\tтого, как должна работать наша функция:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump( isPositive([1, -2, 3, 4, -5]) ); // выведет false\n\tvar_dump( isPositive([1, 2, 3, 4, 5]) );   // выведет true\n?&gt;</code>\n</div>\n<p>\n\tРеализуем описанную функцию с помощью неявного\n\tиспользования флагов:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction isPositive($arr) {\n\t\tforeach ($arr as $elem) {\n\t\t\tif ($elem &lt; 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром будет\n\t\tпринимать массив с числами, и проверять,\n\t\tчто все элементы в этом массиве являются\n\t\tчетными числами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром будет\n\t\tпринимать число и проверять, что все цифры\n\t\tэто числа являются нечетными.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром будет\n\t\tпринимать массив и проверять, есть ли в этом\n\t\tмассиве два одинаковых элемента подряд.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/logical-operators/","content":"\n\t\t\t\t<h1>Логические операторы без if в функциях PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть функция с ифом. Вот она:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($a, $b) {\n\t\tif ($a &gt; $b) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы уже знаете из предыдущих уроков, конструкции\n\t<code class=\"code inline\">if</code>, возвращающие булевы значения,\n\tможно переписывать в сокращенной форме.\n</p>\n<p>\n\tДавайте сделаем это:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($a, $b) {\n\t\treturn $a &gt; $b;\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана следующая функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($a, $b) {\n\t\tif ($a === $b) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПерепишите ее код в сокращенной форме согласно\n\t\tизученной теории.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана следующая функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($a, $b) {\n\t\tif ($a !== $b) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПерепишите ее код в сокращенной форме согласно\n\t\tизученной теории.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана следующая функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($a, $b) {\n\t\tif ($a + $b &gt;= 10) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПерепишите ее код в сокращенной форме согласно\n\t\tизученной теории.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана следующая функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($num) {\n\t\tif ($num &gt;= 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПерепишите ее код в сокращенной форме согласно\n\t\tизученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/proper-using/","content":"\n\t\t\t\t<h1>Правильное использование функций PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас дан вот такой массив с четырехзначными\n\tчислами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['1524', '1321', '4563', '7144', '2879'];\n?&gt;</code>\n</div>\n<p>\n\tДавайте запишем в новый массив только те\n\tэлементы, сумма первых двух цифр в которых\n\tравна сумме вторых двух цифр.\n</p>\n<p>\n\tОчевидно, что для решения задачи необходимо\n\tперебирать циклом наш массив и проверять\n\tкаждый элемент. Давайте вынесем проверку\n\tв отдельную функцию, назвав ее <code class=\"code inline\">checkDigitsPairsSum</code>\n\t(<i>проверить суммы пар цифр</i>). Пусть\n\tэта функция параметром принимает четырехзначное\n\tчисло и проверяет суммы пар цифр. Если суммы\n\tравны, пусть функция возвращает <code class=\"code inline\">true</code>,\n\tа если не равны - <code class=\"code inline\">false</code>.\n</p>\n<p>\n\tНе будем пока реализовывать описанную функцию,\n\tа будем писать дальнейший код так, как будто\n\tу нас уже есть эта функция, а затем ее реализуем.\n\tИтак, если бы у нас была описанная функция,\n\tмы бы легко решили поставленную задачу вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = [];\n\t$arr = ['1524', '1321', '4563', '7144', '2879'];\n\t\n\tforeach ($arr as $elem) {\n\t\tif (checkDigitsPairsSum($elem)) { // используем нашу функцию\n\t\t\t$result[] = $elem;\n\t\t}\n\t}\n\t\n\tvar_dump($result);\n?&gt;</code>\n</div>\n<p>\n\tНапишем теперь реализацию нашей функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction checkDigitsPairsSum($num) {\n\t\t$sum1 = $num[0] + $num[1];\n\t\t$sum2 = $num[2] + $num[3];\n\t\t\n\t\tif ($sum1 === $sum2) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУпростим код функции, используя вместо конструкции\n\t<code class=\"code inline\">if</code> сокращенную логическую операцию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction checkDigitsPairsSum($num) {\n\t\t$sum1 = $num[0] + $num[1];\n\t\t$sum2 = $num[2] + $num[3];\n\t\t\n\t\treturn $sum1 === $sum2;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУпростим еще больше:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction checkDigitsPairsSum($num) {\n\t\treturn $num[0] + $num[1] === $num[2] + $num[3];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОкончательный код будет выглядеть так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = [];\n\t$arr = ['1524', '1321', '4563', '7144', '2879'];\n\t\n\tforeach ($arr as $elem) {\n\t\tif (checkDigitsPairsSum($elem)) {\n\t\t\t$result[] = $elem;\n\t\t}\n\t}\n\t\n\tvar_dump($result);\n\t\n\tfunction checkDigitsPairsSum($num) {\n\t\treturn $num[0] + $num[1] === $num[2] + $num[3];\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана функция, которая параметром принимает\n\t\tцелое число и возвращает сумму его цифр:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getDigitsSum($num) {\n\t\treturn array_sum(str_split($num, ''));\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью приведенной функции найдите все\n\t\tгода от <code class=\"number inline\">1</code> до <code class=\"number inline\">2030</code>, сумма цифр\n\t\tкоторых равна <code class=\"number inline\">13</code>.\n\t</p>\n</div>\n\n<h2>Преимущества</h2>\n<p>\n\tВынесение проверки в отдельную функцию сделало\n\tнаш код более понятным и очевидным. Для того,\n\tчтобы понять, что имеется ввиду, посмотрите\n\tна следующий цикл:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $elem) {\n\t\tif (checkDigitsPairsSum($elem)) {\n\t\t\t$result[] = $elem;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПри чтении кода сразу становится более-менее\n\tпонятно, что именно проверяется в условии\n\t- находится и проверяется какая-то сумма\n\tпар чисел.\n</p>\n<p>\n\tОчевидность нашего кода достигается удачно\n\tподобранным названием функции. Представьте\n\tсебе, что мы бы назвали нашу функцию просто\n\t<code class=\"code inline\">func</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $elem) {\n\t\tif (func($elem)) {\n\t\t\t$result[] = $elem;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, код теперь далеко не такой\n\tочевидный! Понадобится детально изучить код\n\tфункции <code class=\"code inline\">func</code>, чтобы понять, что же\n\tона такое делает.\n</p>\n\n<!--\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана функция, проверяющая числа на простоту:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction isPrime($num) {\n\t\tfor ($i = 2; $i &lt; $num; $i++) {\n\t\t\tif ($num % $i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью приведенной функции найдите все\n\t\tпростые числа в интервале от <code class=\"number inline\">1</code> до\n\t\t<code class=\"number inline\">100</code>.\n\t</p>\n</div>\n\n<div class=\"task\">\n\t<p>\n\t\tДана функция, которая параметром принимает\n\t\tцелое число и возвращает массив его собственных\n\t\tделителей (за исключением самого числа):\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getOwnDivisors($num) {\n\t\t$result = [];\n\t\t\n\t\tfor ($i = 1; $i &lt; $num; $i++) {\n\t\t\tif ($num % $i === 0) {\n\t\t\t\t$result[] = $num;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДан массив с числами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$nums = [12, 24, 35, 14];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПереберите этот массив и для каждого числа\n\t\tнайдите сумму его собственных делителей.\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/auxiliary-functions-combination/","content":"\n\t\t\t\t<h1>Комбинация вспомогательных функций PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас дана функция <code class=\"code inline\">getDigits</code>,\n\tвозвращающая цифры переданного числа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getDigits($num) {\n\t\treturn str_split($num, 1);\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть также дана функция <code class=\"code inline\">getAvg</code>, возвращающая\n\tсреднее элементов переданного массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getAvg($arr) {\n\t\tif (!empty($arr)) {\n\t\t\treturn array_sum($arr) / count($arr);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте найдем сумму цифр какого-нибудь числа,\n\tиспользуя комбинацию приведенных выше функций:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo getAvg(getDigits(12345));\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который будет находить среднее\n\t\tот делителей заданного числа.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/auxiliary-functions-inside-functions/","content":"\n\t\t\t\t<h1>Вспомогательные функции внутри других функций в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке я покажу вам, как решать более\n\tсложные задачи, используя комбинации вспомогательных\n\tфункций. Рассмотрим на примере задачи.\n</p>\n<p>\n\tПусть у нас дано число. Давайте получим все\n\tсобственные делители этого числа, являющиеся\n\tпростыми числами.\n</p>\n<p>\n\tПусть наше решение задачи будет представлять\n\tсобой реализацию вот этой функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getPrimeDivisors($num) {\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПисать весь код решения в нашей функции -\n\tэто не очень удачная идея. Так как наша задача\n\tдостаточно сложная, то ее можно разбить на\n\tподзадачи, сделав для решения каждой подзадачи\n\tотдельную вспомогательную функцию.\n</p>\n<p>\n\tНемного подумав, становится понятно, что\n\tбыло бы неплохо иметь функцию <code class=\"code inline\">getOwnDivisors</code>\n\tдля нахождения делителей числа и функцию\n\t<code class=\"code inline\">isPrime</code> для проверки числа на простоту.\n\tЕсли бы у нас были такие функции, то мы бы\n\tрешили нашу задачу следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getPrimeDivisors($num) {\n\t\t$result = [];\n\t\t$divs = getOwnDivisors($num);\n\t\t\n\t\tforeach ($divs as $div) {\n\t\t\tif (isPrime($div)) {\n\t\t\t\t$result[] = $div;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишете реализацию вспомогательных функций\n\t\tи решите поставленную задачу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/recursion/","content":"\n\t\t\t\t<h1>Работа с рекурсией в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ программировании есть такое понятие, как\n\t<dfn>рекурсия</dfn> - это когда функция вызывает\n\tсама себя. Давайте посмотрим на примере.\n\tВыведем с помощью рекурсии числа от <code class=\"number inline\">1</code>\n\tдо <code class=\"number inline\">10</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$i = 1;\n\t\n\tfunction func(){\n\t\techo $i;\n\t\t$i++;\n\t\t\n\t\tif ($i &lt;= 10){\n\t\t\tfunc(); // здесь функция вызывает сама себя\n\t\t}\n\t}\n\tfunc();\n?&gt;</code>\n</div>\n<p>\n\tДавайте обсудим, как работает этот код.\n</p>\n<p>\n\tУ нас есть глобальная переменная <code class=\"code inline\">$i</code>\n\tи функция <code class=\"code inline\">func</code>, внутри которой в консоль\n\tвыводится содержимое переменной <code class=\"code inline\">$i</code>,\n\tа затем делается <code class=\"code inline\">++</code>.\n</p>\n<p>\n\tЕсли наша переменная <code class=\"code inline\">$i</code> меньше или\n\tравна <code class=\"number inline\">10</code>, то функция вызывается повторно.\n\tТак как переменная <code class=\"code inline\">$i</code> - глобальная,\n\tто при каждом новом вызове функции в ней\n\tбудет заданное при предыдущем вызове значение\n\tпеременной <code class=\"code inline\">$i</code>.\n</p>\n<p>\n\tПолучится, что функция будет вызывать сама\n\tсебя до тех пор, пока <code class=\"code inline\">$i</code> не станет\n\tбольше <code class=\"number inline\">10</code>.\n</p>\n<p>\n\tУчтите, что в нашем случае нельзя функцию\n\tзапустить без <code class=\"code inline\">if</code> - если это сделать,\n\tто получится бесконечный вызов функций.\n</p>\n\n<h2>Пример с параметром</h2>\n<p>\n\tДавайте, с помощью рекурсии последовательно\n\tвыведем элементы массива. Пусть массив изначально\n\tпередается параметрам функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc([1, 2, 3]);\n?&gt;</code>\n</div>\n<p>\n\tДавайте пока без рекурсии используя функцию\n\t<a href=\"/ru/php/manual/array/array_shift/\"><code class=\"code inline\">array_shift</code></a>\n\tвыведем все элементы массива по очереди:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\tvar_dump(array_shift($arr)); // выведет 1\n\t\tvar_dump($arr); // выведет [2, 3] - массив уменьшился\n\t\t\n\t\tvar_dump(array_shift($arr)); // выведет 2\n\t\tvar_dump($arr); // выведет [3] - массив уменьшился\n\t\t\n\t\tvar_dump(array_shift($arr)); // выведет 3\n\t\tvar_dump($arr); // выведет [] - массив пуст\n\t}\n\t\n\tfunc([1, 2, 3]);\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, функция <code class=\"code inline\">array_shift</code>\n\tвырезает и возвращает первый элемент массива,\n\tпри этом сам массив уменьшается на этот элемент.\n</p>\n<p>\n\tДавайте теперь используем рекурсию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\tvar_dump(array_shift($arr));\n\t\tvar_dump($arr);\n\t\t\n\t\tif (count($arr) !== 0) {\n\t\t\tfunc($arr);\n\t\t}\n\t}\n\t\n\tfunc([1, 2, 3]);\n?&gt;</code>\n</div>\n<p>\n\tНа самом деле, конечно же, проще всего перебрать\n\tэлементы массива циклом. Приведенные примеры\n\tпока просто демонстрируют работу рекурсии\n\tна простых примерах (не жизненных). Более\n\tполезные примеры применения рекурсии просто\n\tболее сложные, мы их разберем чуть ниже.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4, 'e' =&gt; 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью рекурсии выведите элементы этого\n\t\tмассива на экран.\n\t</p>\n</div>\n\n<h2>Сумма элементов массива</h2>\n<p>\n\tДавайте теперь не будем выводить элементы\n\tмассива на экран, а найдем сумму элементов\n\tэтого массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getSum($arr) {\n\t\t$sum = array_shift($arr);\n\t\t\n\t\tif (count($arr) !== 0) {\n\t\t\t$sum += getSum($arr);\n\t\t}\n\t\t\n\t\treturn $sum;\n\t}\n\t\n\tvar_dump(getSum([1, 2, 3]));\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3, 'd' =&gt; 4, 'e' =&gt; 5];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью рекурсии найдите сумму элементов\n\t\tэтого массива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/recursion-multi-arrays/","content":"\n\t\t\t\t<h1>Рекурсия и многомерные структуры в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДан массив многомерный произвольного уровня\n\tвложенности, например, такой:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t1,\n\t\t[\n\t\t\t2, 7, 8\n\t\t],\n\t\t[\n\t\t\t3, 4, [5, [6, 7]],\n\t\t]\n\t];\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, данный массив имеет сложную\n\tструктуру, причем предполагается, что эта\n\tструктура может быть произвольной и уровни\n\tвложенности могут быть сколь угодно глубоко.\n</p>\n<p>\n\tПусть мы хотим вывести на экран все примитивные\n\t(то есть не массивы) элементы нашего массива.\n\tВ этом случае для перебора такого массива\n\tу нас просто не получится использовать циклы,\n\tтак как массив имеет неправильную структуру\n\tи неизвестный уровень вложенности.\n</p>\n<p>\n\tЗато для перебора такого массива очень удобно\n\tбудет использовать рекурсию.\n</p>\n<p>\n\tДля начала сделаем функцию, в которую параметром\n\tбудем передавать наш массив, а в функции\n\tсделаем цикл для перебора нашего массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\tforeach ($arr as $elem) {\n\t\t\techo $elem;\n\t\t}\n\t}\n\t\n\tfunc([1, [2, 7, 8], [3, 4, [5, [6, 7]]]]);\n?&gt;</code>\n</div>\n<p>\n\tСделанный нами цикл будет перебирать только\n\tэлементы основного массива. То есть вначале\n\tон выведет <code class=\"code inline\">1</code>, потом <code class=\"code inline\">[2, 7, 8]</code>,\n\tа потом <code class=\"code inline\">[3, 4, [5, [6, 7]]</code>.\n</p>\n<p>\n\tДавайте теперь будем разделять в цикле элементы-примитивы\n\tи элементы-массивы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\tforeach ($arr as $elem) {\n\t\t\tif (is_array($elem)) {\n\t\t\t\t// элемент - массив\n\t\t\t} else {\n\t\t\t\t// элемент - примитив\n\t\t\t\techo $elem;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunc([1, [2, 7, 8], [3, 4, [5, [6, 7]]]]);\n?&gt;</code>\n</div>\n<p>\n\tА теперь сделаем так, чтобы если наш элемент\n\t- массив, функция вызывала сама себя, передавая\n\tпараметром этот массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\tforeach ($arr as $elem) {\n\t\t\tif (is_array($elem)) {\n\t\t\t\tfunc($elem);\n\t\t\t} else {\n\t\t\t\techo $elem;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunc([1, [2, 7, 8], [3, 4, [5, [6, 7]]]]);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан многомерный массив произвольного уровня\n\t\tвложенности, например, такой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, [4, 5, [6, 7]], [8, [9, 10]]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью рекурсии выведите все примитивные\n\t\tэлементы этого массива на экран.\n\t</p>\n</div>\n\n<h2>Сумма элементов массива</h2>\n<p>\n\tДавайте найдем сумму примитивных элементов\n\tнашего массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\t$sum = 0;\n\t\t\n\t\tforeach ($arr as $elem) {\n\t\t\tif (is_array($elem)) {\n\t\t\t\t$sum += func($elem);\n\t\t\t} else {\n\t\t\t\t$sum += $elem;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $sum;\n\t}\n\t\n\tvar_dump(func([1, [2, 7, 8], [3, 4, [5, [6, 7]]]]));\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан многомерный массив произвольного уровня\n\t\tвложенности, например, такой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, [4, 5, [6, 7]], [8, [9, 10]]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью рекурсии найдите сумму элементов\n\t\tэтого массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан многомерный массив произвольного уровня\n\t\tвложенности, содержащий внутри себя строки,\n\t\tнапример, такой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью рекурсии слейте элементы этого\n\t\tмассива в одну строку:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'abcdefgjk'</code>\n\t</div>\n</div>\n\n<h2>Манипуляции с элементами</h2>\n<p>\n\tДавайте что-нибудь сделаем с перебираемыми\n\tэлементами массива, к примеру, запишем им\n\tв конец знак <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction func($arr) {\n\t\t$length = count($arr);\n\t\t\n\t\tfor ($i = 0; $i &lt; $length; $i++) {\n\t\t\tif (is_array($arr[$i])) {\n\t\t\t\t$arr[$i] = func($arr[$i]);\n\t\t\t} else {\n\t\t\t\t$arr[$i] = $arr[$i] . '!';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $arr;\n\t}\n\t\n\tvar_dump(func([1, [2, 7, 8], [3, 4, [5, 6]]]));\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан многомерный массив произвольного уровня\n\t\tвложенности, например, такой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, [2, 7, 8], [3, 4], [5, [6, 7]]];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВозведите все элементы-числа этого массива\n\t\tв квадрат.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/functions/practicum/","content":"\n\t\t\t\t<h1>Практика на функции PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая будет проверять\n\t\tпару чисел на дружественность. Дружественные\n\t\tчисла - два числа, для которых сумма всех\n\t\tсобственных делителей первого числа равна\n\t\tвторому числу и наоборот, сумма всех собственных\n\t\tделителей второго числа равна первому числу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИспользуя созданную вами функцию из предыдущей\n\t\tзадачи найдите все пары дружественных чисел\n\t\tв промежутке от <code class=\"number inline\">1</code> до <code class=\"number inline\">1000</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая будет проверять\n\t\tчисло на совершенность. Совершенное число\n\t\t- это число, сумма собственных делителей\n\t\tкоторого равна этому числу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите все счастливые билеты. Счастливый\n\t\tбилет - это билет, в котором сумма первых\n\t\tтрех цифр его номера равна сумме вторых трех\n\t\tцифр его номера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая параметром будет\n\t\tпринимать два числа и возвращать массив их\n\t\tобщих делителей.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая будет принимать\n\t\tстроку на русском языке, а возвращать ее транслит.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая будет принимать\n\t\tчисло, а возвращать это число прописью. Пусть\n\t\tфункция работает с числами до <code class=\"number inline\">999</code>.\n\t\tСмотрите пример:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(123); // выведет 'сто двадцать три'\n?&gt;</code>\n\t</div>\n</div>\n\n<!--\n<div class=\"task\">\n\t<p>\n\t\tСделайте функцию, которая будет устанавливать\n\t\tправильную форму существительного после числа.\n\t\tВот как должна работать эта функция:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(1, 'яблоко', 'яблока', 'яблок'); // выведет '1 яблоко'\n\tfunc(2, 'яблоко', 'яблока', 'яблок'); // выведет '2 яблока'\n\tfunc(3, 'яблоко', 'яблока', 'яблок'); // выведет '3 яблока'\n\tfunc(4, 'яблоко', 'яблока', 'яблок'); // выведет '4 яблока'\n\tfunc(5, 'яблоко', 'яблока', 'яблок'); // выведет '5 яблок'\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВот пример для для двухзначных чисел:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(11, 'яблоко', 'яблока', 'яблок'); // выведет '11 яблок'\n\tfunc(12, 'яблоко', 'яблока', 'яблок'); // выведет '12 яблок'\n\tfunc(21, 'яблоко', 'яблока', 'яблок'); // выведет '21 яблоко'\n\tfunc(23, 'яблоко', 'яблока', 'яблок'); // выведет '23 яблока'\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНаша функция должна работать для чисел любой\n\t\tдлины:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunc(1223421, 'яблоко', 'яблока', 'яблок'); // выведет '1223421 яблоко'\n?&gt;</code>\n\t</div>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/intro/","content":"\n\t\t\t\t<h1>Введение в регулярные выражения в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРегулярные выражения - это такие команды\n\tдля сложного поиска и замены. Они позволяют\n\tделать очень интересные вещи, но, к сожалению,\n\tдовольно тяжелы в освоении.\n</p>\n<p>\n\tСуществует несколько функций PHP для работы\n\tс регулярными выражениями. Мы начнем знакомится\n\tс ними на примере <code class=\"code inline\">preg_replace</code>. Эта\n\tфункция первым параметром принимает что менять,\n\tа вторым - на что менять, а третьим параметром\n\t- строку, в которой нужно заменять:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace(что менять, на что, строка);\n?&gt;</code>\n</div>\n<p>\n\tПри этом первым параметром наша функция принимает\n\tне просто строку, а <dfn>регулярное выражение</dfn>,\n\tпредставляющее собой строку с набором команд,\n\tрасположенных внутри символов решетки <code class=\"code inline\">#</code>.\n\tЭти решетки называются <i>ограничителями</i>\n\tрегулярных выражений.\n</p>\n <p>\n\tПосле ограничителей можно писать <dfn>модификаторы</dfn> -\n\tкоманды, которые изменяют общие свойства\n\tрегулярного выражения.\n</p>\n<p>\n\tСами регулярные выражения состоят из двух\n\tтипов символов: из тех, которые обозначают\n\tсами себя и из символов-команд, которые называются\n\t<dfn>специальные символы</dfn>.\n</p>\n<p>\n\tБуквы и цифры обозначают сами себя. В следующем\n\tпримере мы с помощью регулярного выражения\n\tзаменим букву <code class=\"string inline\">'a'</code> на <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#a#', '!', 'bab'); // вернет 'b!b'\n?&gt;</code>\n</div>\n<p>\n\tА вот точка является специальным символом\n\tи обозначает <i>любой символ</i>. В следующем\n\tпримере мы найдем строку по такому шаблону:\n\tбуква <code class=\"string inline\">'x'</code>, затем любой символ, затем\n\tопять буква <code class=\"string inline\">'x'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#x.x#', '!', 'xax eee'); // вернет '! eee'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'ahb acb aeb aeeb adcb axeb';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'ahb'</code>, <code class=\"string inline\">'acb'</code>, <code class=\"string inline\">'aeb'</code>\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'a'</code>, любой символ,\n\t\tбуква <code class=\"string inline\">'b'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'ahb acb aeb aeeb adcb axeb';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'abba'</code>, <code class=\"string inline\">'adca'</code>, <code class=\"string inline\">'abea'</code>\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'a'</code>, два любых\n\t\tсимвола, буква <code class=\"string inline\">'b'</code></i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/repeat-operators/","content":"\n\t\t\t\t<h1>Операторы повторения символов в регулярках</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tБывают ситуации, когда мы хотим указать,\n\tчто символ повторяется заданное количество\n\tраз. Если мы знаем точное число повторений,\n\tто можно просто написать его несколько раз\n\t- <code class=\"string inline\">#aaaa#</code>. Но что делать, если мы хотим\n\tсказать такое: <i>повторить один или более\n\tраз</i>?\n</p>\n<p>\n\tДля этого существуют операторы <dfn>(квантификаторы)</dfn>\n\tповторения: плюс <code class=\"code inline\">+</code> (один и более раз),\n\tзвездочка <code class=\"code inline\">*</code> (ноль или более раз) и\n\tвопрос <code class=\"code inline\">?</code> (ноль или один раз). Эти\n\tоператоры действуют на тот символ, который\n\tстоит перед ними.\n</p>\n<p>\n\tДавайте посмотрим на работу этих операторов\n\tна примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tНайдем все подстроки по шаблону <i>буква\n\t<code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> один или более\n\tраз, буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax xbx';\n\t$res = preg_replace('#xa+x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xx ! ! ! xbx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tНайдем все подстроки по шаблону <i>буква\n\t<code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> ноль или более\n\tраз, буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax xbx';\n\t$res = preg_replace('#xa*x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! xbx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tНайдем все подстроки по шаблону <i>буква\n\t<code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> ноль или один\n\tраз, буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xbx';\n\t$res = preg_replace('#xa?x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! xaax xbx'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abca abea';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'a'</code>, буква <code class=\"string inline\">'b'</code>\n\t\tодин или более раз, буква <code class=\"string inline\">'a'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abca abea';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'a'</code>, буква <code class=\"string inline\">'b'</code>\n\t\tноль или более раз, буква <code class=\"string inline\">'a'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abca abea';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'a'</code>, буква <code class=\"string inline\">'b'</code>\n\t\tодин раз или ниодного, буква <code class=\"string inline\">'a'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abca abea';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'aa'</code>, <code class=\"string inline\">'aba'</code>, <code class=\"string inline\">'abba'</code>,\n\t\t<code class=\"string inline\">'abbba'</code>, не захватив <code class=\"string inline\">'abca'</code>\n\t\tи <code class=\"string inline\">'abea'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/grouping-brackets/","content":"\n\t\t\t\t<h1>Группирующие скобки в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущих примерах операторы повторения\n\tдействовали только на один символ, который\n\tстоял перед ними. Что делать, если мы хотим\n\tподействовать им на несколько символов?\n</p>\n<p>\n\tДля этого существуют группирующие скобки\n\t<code class=\"string inline\">'('</code> и <code class=\"string inline\">')'</code>. Они работают так:\n\tесли что-то стоит в группирующих скобках\n\tи сразу после <code class=\"string inline\">')'</code> стоит оператор повторения\n\t- он подействует на все, что стоит внутри скобок.\n</p>\n<p>\n\tДавайте посмотрим на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере шаблон поиска выглядит\n\tтак: <i>буква <code class=\"string inline\">'x'</code>, далее строка <code class=\"string inline\">'ab'</code>\n\tодин или более раз, потом буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xabx xababx xaabbx';\n\t$res = preg_replace('#x(ab)+x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! xaabbx'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'ab abab abab abababab abea';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>строка <code class=\"string inline\">'ab'</code> повторяется\n\t\t<code class=\"number inline\">1</code> или более раз</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/escaping-special-characters/","content":"\n\t\t\t\t<h1>Экранировка спецсимволов в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПредположим, что мы хотим сделать так, чтобы\n\tспецсимвол обозначал сам себя. Для этого\n\tего нужно экранировать с помощью обратного\n\tслеша. Давайте посмотрим на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере автор регулярки хотел,\n\tчтобы шаблон поиска выглядел так: <i>буква\n\t<code class=\"string inline\">'a'</code>, затем плюс <code class=\"string inline\">'+'</code>, затем\n\tбуква <code class=\"string inline\">'x'</code></i>. Однако, автор кода\n\tне заэкранировал символ <code class=\"string inline\">'+'</code> и поэтому\n\tшаблон поиска самом деле он выглядит так:\n\t<i>буква <code class=\"string inline\">'a'</code> один или более раз, потом\n\tбуква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a+x ax aax aaax';\n\t$res = preg_replace('#a+x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'a+x ! ! !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tА сейчас автор заэкранировал плюс обратным\n\tслешем. Теперь шаблон поиска выглядит так,\n\tкак надо: <i>буква <code class=\"string inline\">'a'</code>, затем плюс\n\t<code class=\"string inline\">'+'</code>, затем буква <code class=\"string inline\">'x'</code></i>.\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a+x ax aax aaax';\n\t$res = preg_replace('#a\\+x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ax aax aaax'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон выглядит так: <i>буква\n\t<code class=\"string inline\">'a'</code>, затем точка <code class=\"string inline\">'.'</code>, затем\n\tбуква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a.x abx azx';\n\t$res = preg_replace('#a\\.x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! abx azx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tА следующем примере автор забыл заэкранировать\n\tслеш и под регулярку попали все подстроки,\n\tтак как незаэкранированная точка обозначает\n\tлюбой символ:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a.x abx azx';\n\t$res = preg_replace('#a.x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! !'</code>\n</div>\n\n<h2>Замечание</h2>\n<p>\n\tОбратите внимание на то, что если вы забудете\n\tобратный слеш для точки (когда она должна\n\tобозначать сама себя) - этого можно даже\n\tне заметить:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#a.x#', '!', 'a.x'); // вернет '!', как мы и хотели\n?&gt;</code>\n</div>\n<p>\n\tВизуально работает правильно (так как точка\n\tобозначает любой символ, в том числе и обычную\n\tточку <code class=\"string inline\">'.'</code>). Но если поменять строку,\n\tв которой происходят замены - мы увидим нашу\n\tошибку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#a.x#', '!', 'a.x abx azx'); // вернет '! ! !', а ожидалось '! abx azx'\n?&gt;</code>\n</div>\n\n<h2>Список специальных символов и обычных</h2>\n<p>\n\tЕсли экранировать обычный символ - ничего\n\tстрашного не случится - он все равно будет\n\tобозначать сам себя. Исключение - цифры,\n\tих нельзя экранировать.\n</p>\n<p>\n\tЧасто возникает сомнение, является ли данный\n\tсимвол специальным. Некоторые доходят до\n\tтого, что экранируют все подозрительные символы\n\tподряд. Однако, это плохая практика (захламляет\n\tрегулярку обратными слешами).\n</p>\n<p>\n\tЯвляются спецсимволами: <code class=\"code inline\">$ ^ . * + ? \\\n\t/ {} [] () |</code>\n</p>\n<p>\n\tНе являются спецсимволами: <code class=\"code inline\">@ : , ' \" ;\n\t- _ = < > % # ~ ` & !</code>\n</p>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a.a aba aea';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строку\n\t\t<code class=\"string inline\">'a.a'</code>, не захватив остальные.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2+3 223 2223';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строку\n\t\t<code class=\"string inline\">'2+3'</code>, не захватив остальные.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '23 2+3 2++3 2+++3 345 567';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'2+3'</code>, <code class=\"string inline\">'2++3'</code>, <code class=\"string inline\">'2+++3'</code>,\n\t\tне захватив остальные (+ может быть любое\n\t\tколичество).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '23 2+3 2++3 2+++3 445 677';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'23'</code>, <code class=\"string inline\">'2+3'</code>, <code class=\"string inline\">'2++3'</code>,\n\t\t<code class=\"string inline\">'2+++3'</code>, не захватив остальные.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'*q+'</code>, <code class=\"string inline\">'*qq+'</code>, <code class=\"string inline\">'*qqq+'</code>,\n\t\tне захватив остальные.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '[abc] {abc} abc (abc) [abc]';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tв квадратных скобках и заменят их на <code class=\"string inline\">'!'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/curly-braces/","content":"\n\t\t\t\t<h1>Фигурные скобки в регулярных выражения PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОператоры <code class=\"code inline\">+</code>, <code class=\"code inline\">*</code>, <code class=\"code inline\">?</code> хороши,\n\tоднако, с их помощью нельзя указать конкретное\n\tчисло повторений. В этом случае вам на помощь\n\tпридет оператор <code class=\"code inline\">{}</code>.\n</p>\n<p>\n\tРаботает он следующим образом: <code class=\"code inline\">{5}</code>\n\t- пять повторений, <code class=\"code inline\">{2,5}</code> - повторяется\n\tот двух до пяти (оба включительно), <code class=\"code inline\">{2,}</code>\n\t- повторяется два и более раз.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> один\n\tили два раза, буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax';\n\t$res = preg_replace('#xa{1,2}x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xx ! ! xaaax'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> два\n\tраза и более, буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax';\n\t$res = preg_replace('#xa{2,}x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xx xax ! !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> три\n\tраза, буква <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax';\n\t$res = preg_replace('#xa{3}x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xx xax xaax !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'a'</code> десять раз</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa aaaaaaaaaa aaa';\n\t$res = preg_replace('#a{10}#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'aaa ! aaa'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере автор кода хотел такой шаблон:\n\t<i>буква <code class=\"string inline\">'x'</code>, буква <code class=\"string inline\">'a'</code> три\n\tраза раза и меньше, буква <code class=\"string inline\">'x'</code></i>,\n\tно, к сожалению, такое - <code class=\"code inline\">{,3}</code> - не\n\tработает. Нужно указать явно:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax';\n\t$res = preg_replace('#xa{1,3}x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xx ! ! !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tНоль тоже допустим:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xax xaax xaaax';\n\t$res = preg_replace('#xa{0,3}x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! !'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abbbba abbbbba';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'abba'</code>, <code class=\"string inline\">'abbba'</code>, <code class=\"string inline\">'abbbba'</code>\n\t\tи только их.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abbbba abbbbba';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tвида <code class=\"string inline\">'aba'</code>, в которых <code class=\"string inline\">'b'</code> встречается\n\t\tменее трех раз (включительно).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa aba abba abbba abbbba abbbbba';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tвида <code class=\"string inline\">'aba'</code>, в которых <code class=\"string inline\">'b'</code> встречается\n\t\tболее четырех раз (включительно).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/greediness-limitation/","content":"\n\t\t\t\t<h1>Ограничение жадности в регулярках в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРегулярные выражения по умолчанию <dfn>жадные</dfn>.\n\tЭто значит, что они захватывают максимальное\n\tвозможное количество символов.\n</p>\n<p>\n\tДавайте разберем на примере. Пусть у нас\n\tесть вот такая строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aeeex zzz x kkk';\n?&gt;</code>\n</div>\n<p>\n\tПусть мы в этой строке хотим найти подстроку\n\t<code class=\"string inline\">'aeeex'</code> по следующему шаблону: <i>буква\n\t<code class=\"string inline\">'a'</code>, затем любой символ один или более\n\tраз, затем буква <code class=\"string inline\">'x'</code></i>.\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#a.+x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tМы ожидаем, что в переменную в результате\n\tзапишется строка <code class=\"string inline\">'! zzz x kkk'</code>. Однако,\n\tэто не так - в переменную попадает строка\n\t<code class=\"string inline\">'! kkk'</code>.\n</p>\n<p>\n\tВсе дело в том, что наша регулярка ищет все\n\tсимволы от буквы <code class=\"string inline\">'a'</code> до буквы <code class=\"string inline\">'x'</code>.\n\tНо в нашей строке две буквы <code class=\"string inline\">'x'</code>. Из-за\n\tжадности получается, что регулярка ищет до\n\tсамого последнего икса, тем самым захватывая\n\tне то, что мы ожидали.\n</p>\n<p>\n\tКонечно, зачастую такое поведение нам и нужно.\n\tНо конкретно в этом случае мы бы хотели отменить\n\tжадность и сказать регулярке, чтобы она искала\n\tдо первого икса.\n</p>\n<p>\n\tЧтобы ограничить жадность, нужно после оператора\n\tповторения поставить знак вопроса:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#a.+?x#', '!', $str);\n?&gt;</code>\n</div>\n<div class=\"notice\">\n\t<p>\n\t\tЖадность можно ограничивать всем операторам\n\t\tповторения, вот так: <code class=\"code inline\">*?</code>, <code class=\"code inline\">??</code>\n\t\tи <code class=\"code inline\">{}?</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aba accca azzza wwwwa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет все строки\n\t\tпо краям которых стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tи заменит каждую из них на <code class=\"string inline\">'!'</code>. Между\n\t\tбуквами a может быть любой символ (кроме\n\t\t<code class=\"string inline\">'a'</code>).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/characters-groups/","content":"\n\t\t\t\t<h1>Группы символов в регулярных выражениях PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСуществуют специальные команды, которые позволяют\n\tвыбрать сразу целые группы символов. Команда\n\t<code class=\"code inline\">\\d</code> означает цифру от <code class=\"number inline\">0</code> до <code class=\"number inline\">9</code>.\n\tКоманда <code class=\"code inline\">\\w</code> обозначает цифру, латинскую\n\tбукву или знак подчеркивания. Команда <code class=\"code inline\">\\s</code>\n\tобозначает пробел или пробельный символ:\n\tпробел, перевод строки, табуляцию. Можно\n\tинвертировать значение команды, написав большую\n\tбукву: например, если <code class=\"code inline\">\\d</code> - цифра,\n\tто <code class=\"code inline\">\\D</code> - не цифра.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tДавайте найдем все цифры:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1 12 123';\n\t$res = preg_replace('#\\d#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! !! !!!'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tОператоры повторения считают команды-группы\n\tодним целым, то есть группирующие скобки\n\tне нужны. В следующем примере шаблон поиска\n\tвыглядит так: <i>цифра от <code class=\"number inline\">0</code> до <code class=\"number inline\">9</code>\n\tодин или более раз</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1 12 123 abc @@@';\n\t$res = preg_replace('#\\d+#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! abc @@@'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере шаблон поиска выглядит\n\tтак: <i>все что угодно один или более раз,\n\tно не цифра от <code class=\"number inline\">0</code> до 9</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '123abc3@@';\n\t$res = preg_replace('#\\D+#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'123!3!'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>пробельный символ один раз</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1 12 123 abc @@@';\n\t$res = preg_replace('#\\s#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'1!12!123!abc!@@@'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>НЕ пробельный символ один или более раз</i>.\n\tВсе подстроки, разделенные пробелами, заменятся\n\tна <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1 12 123 abc @@@';\n\t$res = preg_replace('#\\S+#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>цифра или буква один или более раз</i>.\n\tВсе подстроки, состоящие из цифр и букв,\n\tзаменятся на <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1 12 123a Abc @@@';\n\t$res = preg_replace('#\\w+#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! @@@'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>НЕ цифра и НЕ буква один или более раз</i>.\n\tПод данное определение в нашем случае попадает\n\t<code class=\"string inline\">'@@@'</code> и все пробелы (они ведь тоже\n\tне цифры и не буквы). Обратите внимание на\n\tто, что в конце один <code class=\"string inline\">'!'</code> - в него\n\tпреобразовалась строка <code class=\"string inline\">' @@@'</code> - с\n\tпробелом впереди:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">$str = '1 12 123 Abc @@@';\n$res = str_replace(#\\W+#, '!');</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'1!12!123!Abc!'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a1a a2a a3a a4a a5a aba aca';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки,\n\t\tв которых <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними одна цифра</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a1a a22a a333a a4444a a55555a aba aca';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки,\n\t\tв которых <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними любое количество цифр</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa a1a a22a a333a a4444a a55555a aba aca';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки,\n\t\tв которых <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними любое количество цифр (в том\n\t\tчисле и ноль цифр, то есть строка <code class=\"string inline\">'aa'</code>)</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'avb a1b a2b a3b a4b a5b abb acb';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tследующего вида: <i>по краям стоят буквы\n\t\t<code class=\"string inline\">'a'</code> и <code class=\"string inline\">'b'</code>, а между ними - не\n\t\tчисло</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'ave a#b a2b a$b a4b a5b a-b acb';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tследующего вида: <i>по краям стоят буквы\n\t\t<code class=\"string inline\">'a'</code> и <code class=\"string inline\">'b'</code>, а между ними - не\n\t\tбуква и не цифра</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'ave a#a a2a a$a a4a a5a a-a aca';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая заменит все пробелы\n\t\tна <code class=\"string inline\">'!'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/characters-sets/","content":"\n\t\t\t\t<h1>Наборы символов в регулярных выражениях PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tГруппы символов <code class=\"code inline\">\\d</code> и <code class=\"code inline\">\\w</code> не\n\tочень гибкие. Даже такая простая задача,\n\tкак <i>найти все буквы, но не цифры</i> -\n\tне может быть решена ими. Для таких задач\n\tследует использовать квадратные скобки, представляющие\n\tсобой операцию <code class=\"code inline\">ИЛИ</code>.\n</p>\n<p>\n\tКвадратные скобки заменяют собой один символ,\n\tлюбой из перечисленных внутри. К примеру,\n\tвот так: <code class=\"code inline\">#x[abc]x#</code> - мы говорим, что\n\tпо краям должны стоять буквы икс, а внутри\n\t- один символ: или <code class=\"string inline\">'a'</code>, или <code class=\"string inline\">'b'</code>,\n\tили <code class=\"string inline\">'c'</code>.\n</p>\n<p>\n\tПосле квадратных скобок можно писать операторы\n\tповторения. К примеру, вот так: <code class=\"code inline\">#x[abc]+x#</code>\n\t- мы говорим, что внутри иксов может быть\n\tлюбое количество символов <code class=\"string inline\">'a'</code>, <code class=\"string inline\">'b'</code>\n\tи <code class=\"string inline\">'c'</code> - в любых комбинациях.\n</p>\n<p>\n\tМожно не только перечислять символы, но создавать\n\tгруппы символов, записывая между двумя символами\n\tдефис. К примеру, вот так: <code class=\"code inline\">#[a-d]#</code>\n\t- мы получаем все символы от <code class=\"string inline\">'a'</code> до\n\t<code class=\"string inline\">'d'</code>.\n</p>\n<p>\n\tДавайте посмотрим на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква от <code class=\"string inline\">'a'</code>\n\tдо <code class=\"string inline\">'z'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xbx xcx x@x';\n\t$res = preg_replace('#x[a-z]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква от <code class=\"string inline\">'a'</code>\n\tдо <code class=\"string inline\">'k'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xbx xmx x@x';\n\t$res = preg_replace('#x[a-k]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! xmx x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква от <code class=\"string inline\">'A'</code>\n\tдо <code class=\"string inline\">'Z'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xBx xcx x@x';\n\t$res = preg_replace('#x[A-Z]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xax ! xcx x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая цифра от <code class=\"number inline\">0</code> до 9</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax x1x x3x x5x x@x';\n\t$res = preg_replace('#x[0-9]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xax ! ! ! x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая цифра от <code class=\"number inline\">3</code> до 7</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax x1x x3x x5x x@x';\n\t$res = preg_replace('#x[3-7]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xax x1x ! ! x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква от <code class=\"string inline\">'a'</code>\n\tдо <code class=\"string inline\">'z'</code> или цифра от <code class=\"number inline\">1</code> до 9</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax x1x x3x x5x x@x';\n\t$res = preg_replace('#x[a-z1-9]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква от <code class=\"string inline\">'a'</code>\n\tдо <code class=\"string inline\">'z'</code> или буква от <code class=\"string inline\">'A'</code> до\n\t<code class=\"string inline\">'Z'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xBx xcx x5x x@x';\n\t$res = preg_replace('#x[a-zA-Z]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! x5x x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква от <code class=\"string inline\">'a'</code>\n\tдо <code class=\"string inline\">'z'</code> или цифры <code class=\"number inline\">1</code>, 2</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xbx x1x x2x x3x';\n\t$res = preg_replace('#x[a-z12]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! x3x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами буквы от <code class=\"string inline\">'a'</code> до <code class=\"string inline\">'z'</code>\n\tв количестве от <code class=\"number inline\">1</code> и более</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xabesx xaadx x123x xa3x';\n\t$res = preg_replace('#x[a-z]+x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xx ! ! ! x123x xa3x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tСделаем так, чтобы количество букв могло\n\tбыть и ноль:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xx xabesx xaadx x123x xa3x';\n\t$res = preg_replace('#x[a-z]*x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! x123x xa3x'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aba aea aca aza axa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - буква <code class=\"string inline\">'b'</code>, <code class=\"string inline\">'e'</code>\n\t\tили <code class=\"string inline\">'x'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a1a a3a a7a a9a aba';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - цифра от <code class=\"number inline\">3</code>-х до <code class=\"number inline\">6</code>-ти</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aba aea afa aha aga';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - буква от a до g</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aba aea afa aha aga';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - буква от a до f и от j до z</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aAa aea aEa aJa a3a';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - буква от a до f и от A до D</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aAXa aeffa aGha aza ax23a a3sSa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - маленькие латинские буквы,\n\t\tне затронув остальных</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aAXa aeffa aGha aza ax23a a3sSa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - маленькие и большие латинские\n\t\tбуквы</i>, не затронув остальных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aAXa aeffa aGha aza ax23a a3sSa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет по следующему\n\t\tшаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - маленькие латинские буквы\n\t\tи цифры</i>, не затронув остальных.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/characters-sets-invertion/","content":"\n\t\t\t\t<h1>Инвертирование наборов символов в регулярках</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью шляпки <code class=\"code inline\">^</code> в начале квадратных\n\tскобок можно инвертировать желаемое. То есть,\n\tесли, к примеру, команда <code class=\"code inline\">[ab]</code> ищет\n\tбукву <code class=\"string inline\">'a'</code> или <code class=\"string inline\">'b'</code>, то команда\n\t<code class=\"code inline\">[^ab]</code> будет искать все символы, кроме\n\t<code class=\"string inline\">'a'</code> и <code class=\"string inline\">'b'</code>.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'x'</code>, затем НЕ буква <code class=\"string inline\">'a'</code>,\n\tне <code class=\"string inline\">'b'</code> и не <code class=\"string inline\">'c'</code>, потом буква\n\t<code class=\"string inline\">'z'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xaz xbz xcz xez';\n\t$res = preg_replace('#x[^abc]z#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xaz xbz xcz !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'x'</code>, затем НЕ маленькая латинская\n\tбуква, потом буква <code class=\"string inline\">'z'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xaz xbz x1z xCz';\n\t$res = preg_replace('#x[^a-z]z#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xaz xbz ! !'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>цифра <code class=\"string inline\">'1'</code>, затем символ\n\t\tне <code class=\"string inline\">'e'</code> и не <code class=\"string inline\">'x'</code>, цифра <code class=\"string inline\">'2'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'x'</code>, затем НЕ\n\t\tцифра от <code class=\"number inline\">2</code> до <code class=\"number inline\">7</code>, буква <code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'x'</code>, затем НЕ\n\t\tбольшая латинская буква от <code class=\"number inline\">1</code> и более\n\t\tраз, буква <code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'x'</code>, затем не\n\t\tбольшая и не маленькая латинская буква и не цифра\n\t\tот <code class=\"number inline\">1</code> до <code class=\"number inline\">5</code> от <code class=\"number inline\">1</code> и более\n\t\tраз, буква <code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/cyrillic-features/","content":"\n\t\t\t\t<h1>Особенности кириллицы в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКириллические символы не входят в группу\n\t<code class=\"code inline\">\\w</code>. Для их получения нужно использовать\n\tгруппу в квадратных скобках, вот так: <code class=\"code inline\">[а-я]</code>.\n\tНо даже с этой группой есть проблема - сюда\n\tне войдет буква <code class=\"string inline\">'ё'</code>. Для ее включения\n\tнужно сделать вот так: <code class=\"code inline\">[а-яё]</code>.\n</p>\n<p>\n\tКроме того, для корректной работы кириллицы\n\tв регулярке необходимо поставить модификатор\n\t<code class=\"code inline\">u</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'яяя ййй ёёё';\n\t$res = preg_replace('#[а-яё]#u', '!', $str);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'wйw wяw wёw wqw';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>по краям стоят буквы <code class=\"string inline\">'w'</code>,\n\t\tа между ними - буква кириллицы</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет все слова\n\t\tпо шаблону: <i>любая кириллическая буква\n\t\tлюбое количество раз</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/special-characters-inside-square-brackets/","content":"\n\t\t\t\t<h1>Спецсимволы внутри квадратных скобок в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСпецсимволы внутри <code class=\"code inline\">[]</code> становятся обычными\n\tсимволами. Это значит, что их не надо экранировать\n\tобратным слешем.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая буква <code class=\"string inline\">'a'</code>, <code class=\"string inline\">'b'</code>,\n\t<code class=\"string inline\">'c'</code>, либо точка</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xbx xcx xdx x.x x@x';\n\t$res = preg_replace('#x[abc.]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! xdx ! x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая маленькая латинская\n\tбуква или точка</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xbx xcx x@x';\n\t$res = preg_replace('#x[a-z.]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! x@x'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aba aea aca aza axa a.a a+a a*a';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\t<code class=\"string inline\">'a.a'</code>, <code class=\"string inline\">'a+a'</code>, <code class=\"string inline\">'a*a'</code>,\n\t\tне затронув остальных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xaz x.z x3z x@z x$z xrz';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'x'</code>, затем НЕ\n\t\tточка, НЕ собака, и НЕ доллар, а потом буква\n\t\t<code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/characters-groups-inside-square-brackets/","content":"\n\t\t\t\t<h1>Группы символов внутри квадратных скобок PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tГруппы символов <code class=\"code inline\">\\d</code>, <code class=\"code inline\">\\D</code>, <code class=\"code inline\">\\w</code>,\n\t<code class=\"code inline\">\\W</code>, <code class=\"code inline\">\\s</code>, <code class=\"code inline\">\\S</code> внутри <code class=\"code inline\">[]</code>\n\tбудут обозначать именно группы, то есть по-прежнему\n\tбудут командами.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>между иксами любая цифра, либо буква от\n\t<code class=\"string inline\">'a'</code> до <code class=\"string inline\">'f'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xax xbx x1x x2x xhx x@x';\n\t$res = preg_replace('#x[\\da-f]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! xhx x@x'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска выглядит так:\n\t<i>буква <code class=\"string inline\">'x'</code>, затем не цифра, не точка,\n\tи не маленькая латинская буква, затем буква\n\t<code class=\"string inline\">'z'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xaz x1z xAz x.z x@z';\n\t$res = preg_replace('#x[^\\d.a-z]z#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'xaz x1z ! x.z !'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>цифра или точка от <code class=\"number inline\">1</code>\n\t\tи более раз</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>не цифра и не буква от <code class=\"string inline\">'a'</code>\n\t\tдо <code class=\"string inline\">'g'</code> от <code class=\"number inline\">3</code> до <code class=\"number inline\">7</code> раз</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/special-characters-exclusion-inside-square-brackets/","content":"\n\t\t\t\t<h1>Спецсимволы-исключения внутри квадратных скобок</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВы уже знаете, что спецсимволы внутри <code class=\"code inline\">[]</code>\n\tстановятся обычными символами. Есть, однако,\n\tисключения: если вам нужны квадратные скобки\n\tкак символы, то их нужно экранировать обратным\n\tслешем.\n</p>\n<p>\n\tДля примера в следующем коде шаблон поиска\n\tвыглядит так: <i>между иксами стоит квадратная\n\tскобка</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'x]x xax x[x x1x';\n\t$res = preg_replace('#x[\\[\\]]x#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! xax ! x1x'</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'x[]z x{}z x.z x()z';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет все слова\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'x'</code>, затем любое\n\t\tколичество любых скобок, затем буква <code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '[abc] {abc} abc (abc) [abc]';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tв любых скобках и заменят их на <code class=\"string inline\">'!'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/hat-symbol-inside-square-brackets/","content":"\n\t\t\t\t<h1>Символ шляпки внутри квадратных скобок регулярок</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы знаете, шляпка внутри <code class=\"code inline\">[]</code> делает\n\tотрицание, будучи написанной в начале скобок.\n\tЗначит, она является спецсимволом внутри\n\tэтих скобок. Чтобы получить шляпку как символ,\n\tнужно или заэкранировать ее, или убрать с\n\tпервого места.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере шаблон поиска такой:\n\t<i>первый символ - это все кроме <code class=\"string inline\">'d'</code>,\n\tпотом две буквы <code class=\"string inline\">'x'</code></i>.\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx bxx ^xx dxx';\n\t$res = preg_replace('#[^d]xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! dxx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tА теперь шаблон поиска такой: <i>первый символ\n\t- это <code class=\"string inline\">'d'</code> или <code class=\"string inline\">'^'</code>, потом две\n\tбуквы <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx bxx ^xx dxx';\n\t$res = preg_replace('#[d^]xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'axx bxx ! !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tМожно не убирать шляпку с первого места,\n\tа просто заэкранировать ее с помощью обратного\n\tслеша, и она станет обозначать саму себя:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx bxx ^xx dxx';\n\t$res = preg_replace('#[\\^d]xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'axx bxx ! !'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '^xx axx ^zz bkk @ss';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>шляпка или собака, а затем\n\t\tдве латинских буквы</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '^xx axx ^zz bkk @ss';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>НЕ шляпка и не собака, а затем\n\t\tдве латинских буквы</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '^xx axx ^zz bkk';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>НЕ шляпка, а затем две латинских\n\t\tбуквы</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/hyphen-inside-square-brackets-features/","content":"\n\t\t\t\t<h1>Особенности дефиса внутри квадратных скобок</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДефис - тоже спецсимвол внутри <code class=\"code inline\">[]</code>\n\t(а вот снаружи - нет). Если вам нужен сам\n\tдефис как символ - то поставьте его там,\n\tгде он <i>не будет воспринят как разделитель\n\tгруппы</i>.\n</p>\n<p>\n\tПочему это важно: вы можете сделать группу\n\tсимволов, сами не заметив этого. К примеру,\n\tвот так - <code class=\"code inline\">[:-@]</code> - вы думаете, что\n\tвыбираете двоеточие, дефис и собаку, а на\n\tсамом деле получается группа символов между\n\t<code class=\"code inline\">:</code> и <code class=\"code inline\">@</code>. В эту группу входят\n\tследующие символы: <code class=\"code inline\">:</code>, <code class=\"code inline\">;</code>, <code class=\"code inline\">?</code>,\n\t<code class=\"code inline\"><</code>, <code class=\"code inline\">=</code>, <code class=\"code inline\">></code>.\n</p>\n<p>\n\tОткуда они взялись? Из таблицы <a href=\"http://www.asciitable.com/\">ASCII</a>\n\t- двоеточие имеет номер меньше, чем собака\n\t- и получается группа. То есть все группы\n\tполучаются по таблице ASCII (при желании\n\tэтим можно пользоваться).\n</p>\n<p>\n\tКак с этим бороться: поставьте символ дефиса\n\tтам, где он точно не будет воспринят как\n\tсимвол группы, например, в начале или в конце\n\t(то есть после <code class=\"code inline\">[</code> или перед <code class=\"code inline\">]</code>).\n</p>\n<p>\n\tМожно также заэкранировать дефис - тогда\n\tон будет обозначать сам себя независимо от\n\tпозиции. Например, вместо <code class=\"code inline\">[:-@]</code> написать\n\t<code class=\"code inline\">[:\\-@]</code> - и группы уже не будет, а\n\tбудут три символа - двоеточие, дефис и собака @.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере шаблон поиска такой:\n\t<i>цифра <code class=\"number inline\">1</code>, затем буква от <code class=\"string inline\">'a'</code>\n\tдо <code class=\"string inline\">'z'</code>, затем цифра 2</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1a2 1-2 1c2 1z2';\n\t$res = preg_replace('#1[a-z]2#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! 1-2 ! !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tДавайте теперь заэкранируем дефис. В результате\n\tшаблон поиска такой: <i>цифра <code class=\"number inline\">1</code>, затем\n\tбуква <code class=\"string inline\">'a'</code>, или дефис, или буква <code class=\"string inline\">'z'</code>,\n\tзатем цифра 2</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1a2 1-2 1c2 1z2';\n\t$res = preg_replace('#1[a\\-z]2#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! 1c2 !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tМожно просто переставить дефис, не экранируя его:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1a2 1-2 1c2 1z2';\n\t$res = preg_replace('#1[az-]2#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! 1c2 !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере шаблон поиска такой:\n\t<i>первый символ - это маленькие буквы или\n\tдефис <code class=\"string inline\">'-'</code>, потом две буквы <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx Axx -xx @xx';\n\t$res = preg_replace('#[a-z-]xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! Axx ! @xx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере шаблон поиска такой:\n\t<i>первый символ - это маленькие, большие\n\tбуквы или дефис <code class=\"string inline\">'-'</code>, потом две буквы\n\t<code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx Axx -xx @xx';\n\t$res = preg_replace('#[a-zA-Z-]xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! @xx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tМожно расположить дефис между двумя группами\n\t- там он точно еще не сделает еще одну группу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx 9xx -xx @xx';\n\t$res = preg_replace('#[a-z-0-9]xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! @xx'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xaz xBz xcz x-z x@z';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все строки по следующему шаблону:\n\t\t<i>буква <code class=\"string inline\">'x'</code>, большая или маленькая\n\t\tбуква или дефис, буква <code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'xaz x$z x-z xcz x+z x%z x*z';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все строки по следующему шаблону:\n\t\t<i>буква <code class=\"string inline\">'x'</code>, затем или доллар, или\n\t\tдефис или плюс, потом буква <code class=\"string inline\">'z'</code></i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/line-beginning-and-end/","content":"\n\t\t\t\t<h1>Начало и конец строки в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСуществуют специальные символы, которые обозначают\n\tначало <code class=\"code inline\">^</code> или конец строки <code class=\"code inline\">$</code>.\n\tДавайте посмотрим их работу на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска такой: <i>заменить\n\t<code class=\"string inline\">'aaa'</code> на <code class=\"string inline\">'!'</code> только, если оно\n\tстоит в начале строки</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa aaa aaa';\n\t$res = preg_replace('#^aaa#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! aaa aaa'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска такой: <i>заменить\n\t<code class=\"string inline\">'aaa'</code> на <code class=\"string inline\">'!'</code> только, если оно\n\tстоит в конце строки</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa aaa aaa';\n\t$res = preg_replace('#aaa$#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'aaa aaa !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tКогда в начале регулярки стоит <code class=\"code inline\">^</code>,\n\tа в конце - <code class=\"code inline\">$</code>, то таким образом мы\n\tпроверяем всю строку целиком на соответствие\n\tрегулярке.\n</p>\n<p>\n\tВ следующем примере шаблон поиска такой:\n\t<i>буква <code class=\"string inline\">'a'</code> повторяется один или\n\tболее раз, заменить всю строку на <code class=\"string inline\">'!'</code>\n\tтолько она состоит из одних букв <code class=\"string inline\">'a'</code></i>.\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa';\n\t$res = preg_replace('#^a+$#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'!'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abc def xyz';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет первую\n\t\tподстроку из букв.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abc def xyz';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет последнюю\n\t\tподстроку из букв.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/or-command/","content":"\n\t\t\t\t<h1>Команда 'или' в регулярных выражениях PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы с вами разберем команду\n\t<code class=\"code inline\">|</code>, которая представляет собой более\n\tмощный вариант <code class=\"code inline\">ИЛИ</code> по сравнению с\n\tкомандой <code class=\"code inline\">[]</code>. Данная команда позволяет\n\tразделить регулярку на несколько частей.\n\tПри этом искомое может попасть либо под одну\n\tчасть регулярки, либо под другую. Давайте\n\tпосмотрим на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска такой: <i>три\n\tбуквы <code class=\"string inline\">'a'</code> или три буквы <code class=\"string inline\">'b'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa bbb abb';\n\t$res = preg_replace('#a{3}|b{3}#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! abb'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска такой: <i>три\n\tбуквы <code class=\"string inline\">'a'</code> или от <code class=\"number inline\">1</code> и более\n\tбукв <code class=\"string inline\">'b'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa bbb bbbb bbbbb axx';\n\t$res = preg_replace('#a{3}|b+#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ! axx'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ данном примере шаблон поиска такой: <i>одна\n\tили более буквы или три цифры</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a ab abc 1 12 123';\n\t$res = preg_replace('#[a-z]+|\\d{3}#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! 1 12 !'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВертикальная черта может делить регулярку\n\tне на две части, а на любое количество частей:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa bbb ccc ddd';\n\t$res = preg_replace('#a+|b+|c+#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! ddd'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tЕсли вертикальная черта стоит внутри круглых\n\tскобок, то <code class=\"string inline\">'или'</code> работает только внутри\n\tэтих скобок. Для примера давайте найдем строки\n\tпо следующему шаблону: <i>в начале стоит\n\tили <code class=\"string inline\">'a'</code>, или <code class=\"string inline\">'b'</code> один или более\n\tраз, а потом две буквы <code class=\"string inline\">'x'</code></i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'axx bxx bbxx exx';\n\t$res = preg_replace('#(a|b+)xx#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! ! exx'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aeeea aeea aea axa axxa axxxa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - или буква <code class=\"string inline\">'e'</code> любое\n\t\tколичество раз или буква <code class=\"string inline\">'x'</code> любое\n\t\tколичество раз</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aeeea aeea aea axa axxa axxxa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>по краям стоят буквы <code class=\"string inline\">'a'</code>,\n\t\tа между ними - или буква <code class=\"string inline\">'e'</code> два раза\n\t\tили буква <code class=\"string inline\">'x'</code> любое количество раз</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/word-beginning-and-end/","content":"\n\t\t\t\t<h1>Конец или начало слова в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКоманда <code class=\"code inline\">\\b</code> обозначает начало или конец\n\tслова, а <code class=\"code inline\">\\B</code>, соответственно, - не\n\tначало и не конец слова. Что такое слово?\n\tНа первый взгляд кажется, что это нечто,\n\tограниченное пробелами, но это не совсем так.\n</p>\n<p>\n\tПосмотрите на следующую строку: <code class=\"string inline\">'мама\n\tмыла раму'</code>. Подстрока <code class=\"string inline\">'мыла'</code> -\n\tэто слово (по обоим краям пробелы), однако\n\tи <code class=\"string inline\">'мама'</code>, и <code class=\"string inline\">'раму'</code> тоже слова,\n\tкоторые стоят в начале и в конце строки.\n</p>\n<p>\n\tДавайте посмотрим на практическое применение\n\tданной команды.\n</p>\n<p>\n\tВ следующем примере шаблон поиска такой:\n\t<i>начало слова, маленькие латинские буквы\n\tодин или более раз, конец слова</i>. Таким\n\tобразом, регулярка найдет все слова и заменит\n\tих на <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('#\\b[a-z]+\\b#', '!', 'axx bxx xxx exx'); // выведет '! ! ! !'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa xaa aaa xbb aaa';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНапишите регулярку, которая найдет строки\n\t\tпо шаблону: <i>буква <code class=\"string inline\">'x'</code> в начале\n\t\tслова</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/limiters/","content":"\n\t\t\t\t<h1>Ограничители регулярок в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ качестве ограничителей могут выступать\n\tне только <code class=\"code inline\">#</code>, но и любые другие символы\n\t(только не буквы и не цифры).\n</p>\n<p>\n\tК примеру, возьмем в качестве ограничителей\n\tсимволы амперсандов:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('&а+&', '!', 'строка');\n?&gt;</code>\n</div>\n<p>\n\tЕсли используются скобки, тогда левый ограничитель\n\t- это открывающая скобка, а правый - закрывающая:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('(а+)', '!', 'строка');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИспользуйте в качестве ограничителей символ\n\t\tтильды <code class=\"code inline\">~</code>.\n\t</p>\n</div>\n\n<h2>Экранировка ограничителей</h2>\n<p>\n\tЕсли символ не является специальным, то,\n\tкогда вы используете его в качестве ограничителя,\n\tего нужно будет экранировать в самой регулярке.\n\tПосмотрим на примере.\n</p>\n<p>\n\tПусть у нас в качестве ограничителей выступают\n\tрешетки, а внутри регулярки мы ищем символ\n\tамперсанда. Так как амперсанд не является\n\tспецсимволовм, то мы его не экранируем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('#a&b#', '!', 'a&b'); // выведет '!'\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь ограничители - амперсанды и\n\tвнутри регулярки нам также нужен амперсанд.\n\tВ таком случае амперсанд внутри приходится\n\tэкранировать, иначе это вызовет ошибку PHP:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('&a\\&b&', '!', 'a&b'); // выведет '!'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИсправьте ошибку, допущенную в следующем коде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('#a#b#', '!', 'a#b');\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/backslash/","content":"\n\t\t\t\t<h1>Проблема обратного слеша в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОбратный слеш является спецсимволом PHP.\n\tЭто значит, что в строке, если мы хотим,\n\tчтобы слеш обозначал сам себя, мы должны\n\tего удвоить:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '\\\\ \\\\\\\\ \\\\\\\\\\\\'; // на самом деле строка '\\ \\\\ \\\\\\'\n?&gt;</code>\n</div>\n<p>\n\tОбратный слеш также является и спецсимволом\n\tрегулярок. Это значит, что внутри регулярки,\n\tчтобы слеш обозначал сам себя, его нужно\n\tнаписать аж четыре раза:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('#\\\\\\\\#', '!', '\\\\ \\\\\\\\ \\\\\\\\\\\\'); // выведет '! ! !!'\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь напишем регулярку, в которой\n\tшаблон поиска будет такой: <i>обратный слеш\n\tодин или более раз</i> В таком случае мы\n\tнапишем оператор <b>+</b> аж для <code class=\"number inline\">4</code>\n\tсимволов перед ним без группировки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_replace('#\\\\\\\\+#', '!', '\\\\ \\\\\\\\ \\\\\\\\\\\\'); //выведет '! ! !'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a\\\\b c\\\\d e\\\\f';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите в этой строке все подстроки по шаблону\n\t\t<i>буква, обратный слеш, буква</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a\\\\b c\\\\\\\\d e\\\\\\\\\\\\f';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите в этой строке все подстроки по шаблону\n\t\t<i>буква, обратный слеш любое количество\n\t\tраз, буква</i>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/string-checking/","content":"\n\t\t\t\t<h1>Проверка строки с помощью регулярки на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПоиском и заменой возможности регулярок далеко\n\tне исчерпаны. Существует также функция <code class=\"code inline\">preg_match</code>,\n\tкоторая проверяет, есть ли в строке совпадение\n\tс регуляркой. Первым параметром функция принимает\n\tрегулярное выражение, а вторым - строку для\n\tпоиска.\n</p>\n<p>\n\tПри этом, если совпадений будет много, -\n\tфункция найдет только первое и закончит свою\n\tработу. Поэтому функция выводит либо <code class=\"number inline\">1</code>,\n\tлибо <code class=\"number inline\">0</code> и используется для ответа на\n\tвопрос '<i>есть искомое в строке или нет</i>'.\n\tВернет один - значит есть (а сколько раз\n\t- неясно), вернет ноль - значит нет.\n</p>\n<p>\n\tДавайте посмотрим на примерах. Проверим,\n\tесть ли в строке подстрока, состоящая из\n\tбукв <code class=\"string inline\">'a'</code>, повторенных один или более раз:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_match('#a+#', 'eee aaa bbb'); // выведет 1\n?&gt;</code>\n</div>\n<p>\n\tА теперь в нашей строке нет искомого, и функция\n\tвыведет <code class=\"number inline\">0</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_match('#a+#', 'eee bbb'); // выведет 0\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, есть ли в строке <code class=\"number inline\">3</code> цифры\n\t\tподряд.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, начинается ли переданная строка\n\t\tс <code class=\"path inline\">http</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, начинается ли переданная строка\n\t\tс <code class=\"path inline\">http</code> или с <code class=\"path inline\">https</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, заканчивается ли переданная строка\n\t\tрасширением <code class=\"path inline\">txt</code>, <code class=\"path inline\">html</code> или <code class=\"path inline\">php</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, заканчивается ли переданная строка\n\t\tрасширением <code class=\"path inline\">jpg</code> или <code class=\"path inline\">jpeg</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/auto-testing/","content":"\n\t\t\t\t<h1>Автоматическое тестирование регулярок в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте напишем код, который позволит нам\n\tудобно тестировать написанные нами регулярки\n\tсразу на нескольких строках.\n</p>\n<p>\n\tПусть наша регулярка для тестов хранится\n\tв следующей переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#\\d{3,}#';\n?&gt;</code>\n</div>\n<p>\n\tДавайте сделаем массив строк для проверок:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr[] = 'aaa 123 bbb';\n\t$arr[] = 'aaa 12345 bbb';\n\t$arr[] = 'aaa 12x bbb';\n\t$arr[] = 'aaa 12 bbb';\n?&gt;</code>\n</div>\n<p>\n\tПереберем этот массив циклом, проверяя каждый\n\tэлемент нашей регуляркой:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $str) {\n\t\techo $str . ' ' . preg_match($reg, $str) . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tСоберем весь код вместе и получим удобную\n\tзаготовку для тестирования регулярок:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg   = '#\\d{3,}#'; // ваша регулярка\n\t\n\t$arr[] = 'aaa 123 bbb';   // 1\n\t$arr[] = 'aaa 12345 bbb'; // 1\n\t$arr[] = 'aaa 12x bbb';   // 0\n\t$arr[] = 'aaa 12 bbb';    // 0\n\t\n\tforeach ($arr as $str) {\n\t\techo $str . ' ' . preg_match($reg, $str) . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть вам нужно проверить, что в строке есть\n\t\tдробное число. Используя предложенный скрипт,\n\t\tпроверьте вашу регулярку на различных строках.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/whole-string-checking/","content":"\n\t\t\t\t<h1>Проверка всей строки через регулярки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЧасто <code class=\"code inline\">preg_match</code> используется для\n\tпроверки на соответствие регулярному выражению\n\tвсей строки. В таком случае в начале регулярки\n\tследует поставить шляпку <code class=\"code inline\">^</code>, а в конце\n\t- доллар <code class=\"code inline\">$</code>. Этим мы говорим, что под\n\tшаблон должна попасть вся строка.\n</p>\n<p>\n\tДавайте для примера узнаем, состоит ли строка\n\tцеликом из букв <code class=\"string inline\">'a'</code>, или нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo preg_match('#^a+$#', 'aaaa'); // выведет 1\n\techo preg_match('#^a+$#', 'aaab'); // выведет 0\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, является ли переданная строка\n\t\tявляется доменом. Используйте для тестов\n\t\tследующие строки:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr[] = 'site.ru';          // +\n\t$arr[] = 'site.com';         // +\n\t$arr[] = 'my-site.com';      // +\n\t$arr[] = 'my-cool-site.com'; // +\n\t$arr[] = 'my_site.com';      // +\n\t$arr[] = 'site123.com';      // +\n\t$arr[] = 'site.travel';      // +\n\t$arr[] = 'si$te.com';        // -\n\t$arr[] = 'site.r';           // -\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, является ли переданная строка\n\t\tявляется емейлом. Используйте для тестов\n\t\tследующие строки:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr[] = 'addr@mail.ru';    // +\n\t$arr[] = 'addr123@mail.ru'; // +\n\t$arr[] = 'my-addr@mail.ru'; // +\n\t$arr[] = 'my_addr@mail.ru'; // +\n\t$arr[] = 'addr@site.ru';    // +\n\t$arr[] = 'addr.ru';         // -\n\t$arr[] = 'addr@.ru';        // -\n\t$arr[] = 'my@addr@mail.ru'; // -\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/searching-pockets/","content":"\n\t\t\t\t<h1>Карманы при поиске через регулярки на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторая строка, содержащая\n\tдомен:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'eee site.ru bbb';\n?&gt;</code>\n</div>\n<p>\n\tДавайте найдем этот домен и разделим его\n\tна части: отделим имя домена от его зоны.\n\tДля этого мы используем специальные <dfn>карманы</dfn>\n\tрегулярных выражений.\n</p>\n<p>\n\tКарманы представляют собой элементы массива,\n\tв которые можно положить части найденного\n\tрегуляркой. В нашем случае в первый карман\n\tмы можем положить имя домена, а во второй\n\t- его зону.\n</p>\n<p>\n\tДавайте сделаем это. Для начала напишем регулярку,\n\tкоторая находит домен в строке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#[a-z0-9_-]+\\.[a-z]{2,}#';\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь в нашей регулярке обозначим,\n\tкакие части в какой карман должны попадать.\n\tЭто делается с помощью круглых скобок. Давайте\n\tвыделим с их помощью часть регулярки, которая\n\tищет имя домена, и ту часть, которая ищет\n\tдоменную зону:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#([a-z0-9_-]+)\\.([a-z]{2,})#';\n?&gt;</code>\n</div>\n<p>\n\tТеперь в функции <code class=\"code inline\">preg_match</code> в качестве\n\tтретьего параметра укажем переменную (имя любое):\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_match($reg, $str, $res);\n?&gt;</code>\n</div>\n<p>\n\tВ указанную переменную попадет массив с найденными\n\tкарманами. При этом в нулевом элементе массива\n\tбудет лежать найденная строка, в первом элементе\n\t- первый карман, во втором элементе - второй\n\tкарман и так далее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_match($reg, $str, $res);\n\tvar_dump($res); // выведет ['site.ru', 'site', 'ru']\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с датой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2025-12-31';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПоложите год, месяц и день в отдельные карманы.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с именем файла:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'index.html';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПоложите имя файла и его расширение в отдельные\n\t\tкарманы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/searching-all-matches/","content":"\n\t\t\t\t<h1>Поиск всех совпадений через регулярки на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью функции <code class=\"code inline\">preg_match_all</code> можно\n\tузнать количество всех совпадений с регулярным\n\tвыражением:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a aa aaa bbb';\n\techo preg_match_all('#a+#', $str); // выведет 3\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка. Узнайте, сколько чисел в этой строке.\n\t</p>\n</div>\n\n<h2>Карманы</h2>\n<p>\n\tС помощью нашей функции можно разделить все\n\tнайденные совпадения на карманы. Давайте\n\tпосмотрим, как это делается.\n</p>\n<p>\n\tПусть, например, у нас есть строка с доменами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'site.ru site123.com my-site.net';\n?&gt;</code>\n</div>\n<p>\n\tДавайте напишем регулярное выражение на поиск\n\tдомена, отделив имя и зону в отдельные карманы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#([a-z0-9_-])+\\.([a-z]{2,})#';\n?&gt;</code>\n</div>\n<p>\n\tРезультат попадет в третий параметр функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_match_all($reg, $str, $res);\n\tvar_dump($res);\n?&gt;</code>\n</div>\n<p>\n\tВ результате мы получим двухмерный массив.\n\tВ нулевой элемент этого массива попадет содержимое\n\tнулевых карманов (то есть то, что попало\n\tпод всю регулярку), во второй элемент - содержимое\n\tпервых карманов и так далее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[\n\t\t['site.ru', 'site123.com', 'my-site.net'],\n\t\t['site', 'site123', 'my-site'],\n\t\t['ru', 'com', 'net'],\n\t]\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с датами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2023-10-29 2024-11-30 2025-12-31';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все даты, отделив год, месяц и день\n\t\tв отдельные карманы.\n\t</p>\n</div>\n\n<h2>Изменение поведения preg_match_all</h2>\n<p>\n\tС помощью четвертого параметра функции можно\n\tпоменять способ группировки карманов. Подробную\n\tинформацию об этом посмотрите по ссылке <a\n\thref=\"http://www.php.su/functions/?preg-match-all\">http://www.php.su/functions/?preg-match-all</a>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tв первый подмассив попала первая дата с ее\n\t\tкарманами, во второй подмассив - вторая с\n\t\tее карманами и так далее.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/non-preserving-brackets/","content":"\n\t\t\t\t<h1>Несохраняющие скобки в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСкобки <code class=\"code inline\">()</code> выполняют две функции -\n\tгруппировка символов и функцию кармана. А\n\tчто делать, если нам нужно сгруппировать,\n\tно в карман не класть?\n</p>\n<p>\n\tДля решения такой проблемы придуманы специальные\n\t<dfn>несохраняющие скобки</dfn> <code class=\"code inline\">(?: )</code>\n\t- они группируют, но не кладут в карман.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВ следующем примере первые скобки нам нужны\n\tдля группировки, а вторые - для кармана.\n\tОднако, и те, и другие скобки сохраняют данные\n\tв карман:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abab123';\n\t$reg = '#(ab)+([1-9]+)#';\n\tpreg_match_all($reg, $str, $res);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в наших карманах будет следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($res[0]); // выведет 'abab123'\n\tvar_dump($res[1]); // выведет 'ab'\n\tvar_dump($res[2]); // выведет '123'\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tСделаем так, чтобы первая пара скобок только\n\tгруппировала, но не клала в карман:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'abab123';\n\t$reg = '#(?:ab)+([1-9]+)#';\n\tpreg_match_all($reg, $str, $res);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в первом кармане будет наше число:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($res[1]); // выведет '123'\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДаны подстроки, разделенные на две части\n\t\tпроизвольным количеством пар <code class=\"string inline\">$@</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa$@bbb aaa$@$@bbb aaa$@$@$@bbb';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите каждую из таких подстрок и для каждой\n\t\tнайденной подстроки положите в первый карман\n\t\tто, что стоит до разделителя, а во второй\n\t\tкарман - то, что стоит после разделителя.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/replace-pockets/","content":"\n\t\t\t\t<h1>Карманы при замене через регулярки на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри работе с функцией <code class=\"code inline\">preg_replace</code>,\n\tесли мы что-то положим в карман в регулярке,\n\tто в строке замены мы можем вставить содержимое\n\tэтого кармана написав знак доллара $ и номер\n\tкармана. Например, <code class=\"code inline\">$0</code> - нулевой карман,\n\t<code class=\"code inline\">$1</code> - первый карман, <code class=\"code inline\">$2</code> - второй\n\tкарман и так далее.\n</p>\n<p>\n\tЗачем это нужно и как этим пользоваться давайте\n\tпосмотрим на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tДавайте найдем все числа и вместо них вставим\n\tэти же числа, но в фигурных скобках. Для этого\n\tвсе найденные числа мы будем заменять на\n\tних самих же, но в фигурных скобках:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1 23 456 xax';\n\t$res = preg_replace('#(\\d+)#', '{$1}', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'{1} {23} {456} xax'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tДавайте найдем все строки, представляющие\n\tсобой числа с иксами вокруг и заменим эти\n\tчисла на них же, но с <code class=\"string inline\">'!'</code> знаками вокруг:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'x1x x23x x456x xax';\n\t$res = preg_replace('#x(\\d+)x#', '!$1!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'!1! !23! !456! xax'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tДавайте решим следующую задачу: даны строки\n\tвида <code class=\"string inline\">'aaa@bbb'</code> - буквы, потом собака,\n\tпотом буквы. Нужно поменять местами буквы\n\tдо <code class=\"string inline\">'@'</code> и после. Реализуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa@bbb ccc@ddd';\n\t$res = preg_replace('#([a-z]+)@([a-z]+)#', '$2@$1', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'bbb@aaa ddd@ccc'</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12 34 56 78';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПоменяйте местами цифры во всех двухзначных\n\t\tчислах.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с датой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '31.12.2025';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПреобразуйте эту дату в <code class=\"string inline\">'2025.12.31'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/expression-pockets/","content":"\n\t\t\t\t<h1>Карманы в регулярном выражении в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСодержимое карманов доступно не только в\n\tстроке замены, но в и самой регулярке: мы\n\tможем положить что-нибудь в карман, а затем\n\tпрямо в регулярке сказать, что здесь должно\n\tстоять содержимое этого кармана.\n</p>\n<p>\n\tСодержимое карманов доступно по их номерам,\n\tперед которыми стоит обратный слеш. Например,\n\tнулевой карман будет доступен вот так: <code class=\"code inline\">\\0</code>,\n\tпервый карман вот так - <code class=\"code inline\">\\1</code>, второй\n\t- <code class=\"code inline\">\\2</code> и так далее.\n</p>\n<p>\n\tУверен, что все написанное выше пока весьма\n\tтуманно для вас. Это не удивительно, так\n\tкакие карманы - самое малопонятное место\n\tрегулярок. Давайте будем разбираться на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПусть у нас есть вот такая строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aa bb cd ef';\n?&gt;</code>\n</div>\n<p>\n\tДавайте найдем в ней все места, в которых\n\tстоят две любые одинаковые буквы подряд.\n\tДля решения задачи будем искать любую букву,\n\tкласть ее в карман, а затем проверять, идет\n\tли следующем символом содержимое этого кармана:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#([a-z])\\1#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! cd ef'</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПусть у нас есть вот такая строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'asxca buzxb csgd';\n?&gt;</code>\n</div>\n<p>\n\tДавайте найдем в ней все слова, в которых\n\tодинаковы первая и последняя буквы. Для решения\n\tзадачи напишем следующий шаблон: <i>буква,\n\tзатем еще одна или более букв, а затем такая\n\tже буква как первая</i>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#([a-z])[a-z]+\\1#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменную запишется следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">'! ! csgd'</code>\n</div>\n\n<h2>Альтернативный синтаксис</h2>\n<p>\n\tВместо <code class=\"code inline\">\\1</code> можно писать <code class=\"code inline\">\\g1</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#([a-z])[a-z]+\\g1#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tМожно также писать <code class=\"code inline\">\\g{1}</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#([a-z])[a-z]+\\g{1}#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tВ фигурных скобках можно указывать отрицательные\n\tчисла. В этом случае карманы будут отсчитываться\n\tс конца:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#([a-z])([a-z])\\g{-2}#', '!', $str);\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa bbb ccc xyz';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все подстроки, в которых есть три\n\t\tодинаковые буквы подряд.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'a aa aaa abab bbbb';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все подстроки, в которых есть две\n\t\tи более одинаковые буквы подряд.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa aaa bbb bbb ccc ddd';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все подстроки, в которых есть два\n\t\tодинаковых слова подряд.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/named-pockets/","content":"\n\t\t\t\t<h1>Именованные карманы в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть с помощью <code class=\"code inline\">preg_match</code>, мы хотим\n\tразбить дату на день, месяц и год. Используем\n\tдля этого карманы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2025-10-29';\n\t$reg = '#(\\d{4})-(\\d{2})-(\\d{2})#';\n\t\n\tpreg_match($reg, $str, $match);\n\tvar_dump($match); // выведет ['2025-10-29', '2025', '10', '29']\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, в результате мы получаем массив,\n\tв котором в нулевом элементе будет вся дата,\n\tв первом - год, во втором - месяц, в третьем\n\t- день.\n</p>\n<p>\n\tИногда, однако, было бы удобно получить содержимое\n\tкарманов в виде ассоциативного массива. То\n\tесть в нашем случае было бы неплохо получить\n\tвот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t'year'  =&gt; '2025',\n\t'month' =&gt; '10',\n\t'day'   =&gt; '29'\n]</code>\n</div>\n<p>\n\tДля этого в регулярках существует специальный\n\tсинтаксис. Вот он: <code class=\"code inline\">(?&lt;name&gt;pattern)</code>,\n\tгде <code class=\"code inline\">pattern</code> - это регулярка, а <code class=\"code inline\">name</code>\n\t- это имя кармана.\n</p>\n<p>\n\tДавайте перепишем нашу регулярку для даты\n\tчерез именованные карманы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2025-10-29';\n\t$reg = '#(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})#';\n\t\n\tpreg_match($reg, $str, $match);\n\tvar_dump($match);\n?&gt;</code>\n</div>\n<p>\n\tВ результате у нас получится ассоциативный\n\tмассив, в котором ключами будут имена карманов,\n\tа значениями - то, что в них попало:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t'year'  =&gt; '2025',\n\t'month' =&gt; '10',\n\t'day'   =&gt; '29',\n]</code>\n</div>\n<p>\n\tНа самом деле в массиве с результатом значения\n\tкарманов будут доступны как по имени, так\n\tи по порядковому номеру. То есть, к примеру,\n\tгод будет доступен по ключу <code class=\"string inline\">'year'</code>\n\tи по номеру <code class=\"number inline\">1</code>, месяц - по ключу <code class=\"string inline\">'month'</code>\n\tи по номеру <code class=\"number inline\">2</code> и так далее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">[\n\t'year'  =&gt; '2025',\n\t'month' =&gt; '10',\n\t'day'   =&gt; '29',\n\t\n\t1       =&gt; '2025',\n\t2       =&gt; '10',\n\t3       =&gt; '29'\n]</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка со временем:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12:59:59';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПоложите часы, минуты и секунды в отдельные\n\t\tименованные карманы.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите функцию, которая в массиве с результатом\n\t\tудалит все нумерованные карманы, оставив\n\t\tтолько именованные.\n\t</p>\n</div>\n\n<h2>Альтернативный синтаксис</h2>\n<p>\n\tМожно также использовать синтаксис <code class=\"code inline\">(?P&lt;name&gt;pattern)</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#(?P&lt;year&gt;\\d{4})-(?P&lt;month&gt;\\d{2})-(?P&lt;day&gt;\\d{2})#';\n?&gt;</code>\n</div>\n<p>\n\tДоступен также синтаксис <code class=\"code inline\">(?'name'pattern)</code>.\n\tОн более короткий, однако, внешние кавычки\n\tрегулярного выражение придется сделать двойными,\n\tчтобы не было конфликта:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = \"#(?'year'\\d{4})-(?'month'\\d{2})-(?'day'\\d{2})#\";\n?&gt;</code>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/expression-named-pockets/","content":"\n\t\t\t\t<h1>Именованные карманы внутри регулярки PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВсмомним, как мы пользовались карманами в\n\tсамом регулярном выражении:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#([a-z])\\1#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tИногда бывают ситуации, когда удобнее обращаться\n\tк карману не по его номеру, а по имени. Для\n\tэтого нам нужно дать карману имя:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#(?&lt;letter&gt;[a-z])#', '!', $str);\n?&gt;</code>\n</div>\n<p>\n\tТеперь мы можем обратиться к этому карману\n\tчерез синтаксис <code class=\"code inline\">\\g&lt;name&gt;</code>, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = preg_replace('#(?&lt;letter&gt;[a-z])\\g&lt;letter&gt;#', '!', $str);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '12:59:59 12:59:12 09:45:09';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tНайдите все подстроки со временем, в которых\n\t\tчас совпадает с секундами.\n\t</p>\n</div>\n\n<h2>Альтернативный синтаксис</h2>\n<p>\n\tОписанные именованные карманы имеют еще несколько\n\tальтернативных синтаксисов: <code class=\"code inline\">(?P=name)</code>,\n\t<code class=\"code inline\">\\g{name}</code>, <code class=\"code inline\">\\g'name'</code>, <code class=\"code inline\">\\k&lt;name&gt;</code>,\n\t<code class=\"code inline\">\\k'name'</code>, <code class=\"code inline\">\\k{name}</code>.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/common-pockets-number/","content":"\n\t\t\t\t<h1>Общий номер карманов в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим следующую ситуацию. Пусть у нас\n\tесть переменная с годом, который может изменяться\n\tот <code class=\"number inline\">1990</code> до <code class=\"number inline\">2099</code>.\n</p>\n<p>\n\tПусть мы хотим получать последние две цифры\n\tгода в карман. Напишем соответствующую регулярку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#19(9\\d)|20(\\d\\d)#';\n?&gt;</code>\n</div>\n<p>\n\tНас, однако, здесь поджидает одно неудобство.\n\tДело в том, что для годов прошлого века две\n\tцифры будут попадать в первый карман, а для\n\tгодов второго века - во второй. Посмотрим\n\tна примерах.\n</p>\n<p>\n\tВот первый вариант:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '1991';\n\tpreg_match($reg, $str, $res);\n\tvar_dump($res); // [1 =&gt; '91']\n?&gt;</code>\n</div>\n<p>\n\tА вот второй вариант:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2021';\n\tpreg_match($reg, $str, $res);\n\tvar_dump($res); // [2 =&gt; '21']\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь мы хотим записать найденные\n\tцифры года в переменную. Нас ждет проблема,\n\tведь мы не знаем точно, с каким ключом забирать\n\tданные из кармана:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$year = $res[1]; // нужен ключ или 1, или 2\n?&gt;</code>\n</div>\n<p>\n\tМожно решить проблему через условие:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($res[1])){\n\t\t$year = $res[1];\n\t} else{\n\t\t$year = $res[2];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОднако, есть решение попроще. Можно использовать\n\tспециальную команду <code class=\"code inline\">(?| )</code>. Все карманы,\n\tкоторые находятся внутри нее будут иметь\n\tодин номер.\n</p>\n<p>\n\tДавайте исправим нашу регулярку\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$reg = '#(?|19(9\\d)|20(\\d\\d))#';\n?&gt;</code>\n</div>\n<p>\n\tИ теперь наш год точно будет в кармане с\n\tномером один:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$year = $res[1];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны строки с датами, в которых год может\n\t\tизменяться от <code class=\"number inline\">1990</code> до <code class=\"number inline\">2099</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t'31-12-2025',\n\t\t'30-11-1995',\n\t\t'29-10-1990',\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДля каждой даты положите день в первый карман,\n\t\tмесяц во второй, а последние две цифры года\n\t\t- в третий.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/conditional-subpatterns/","content":"\n\t\t\t\t<h1>Работа с условными подмасками в регулярках PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНаша задача: данна строка представляющая\n\tсобой цифры, которые могут быть обрамлены\n\t<code class=\"string inline\">'!'</code> либо нет. С помощью регулярного\n\tвыражения необходимо поймать эти цифры возможно\n\tс <code class=\"string inline\">'!'</code>. Для решения задачи удобно использовать\n\tкарманы. <code class=\"string inline\">'!'</code> - положим в карман и\n\tскажем, что он может быть, может не быть.\n\tУкажем, что может быть любое количество цифр\n\tи дальше идет содержимое кармана. Если содержимое\n\tнайдется, то получим - <code class=\"string inline\">'!'</code>, если не\n\tнайдется, то будут пустые кавычки. Пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">preg_match('#(!?)\\d+\\1#', '!123!', $match);\nvar_dump($match);</code>\n</div>\n<p>\n\tКак побочный эффект видим содержимое первого\n\tкармана. Если восклицательных знаков не будет,\n\tмы все равно найдем содержимое кармана. Обратите\n\tвнимание на то, что нельзя вынести <code class=\"string inline\">'!'</code>\n\tзнак за скобки.\n</p>\n<p>\n\tПредставим себе ситуацию: мы говорим что\n\tу нас могут быть цифры, но обрамленные не\n\tкакими-то одинаковыми символами а парами(уголками,\n\tскобками фигурными...). Задачу с помощью\n\tкарманов уже не решить. Для решения такой\n\tзадачи существует специальная команда регулярок,\n\tкоторые называются условными подмазками.\n</p>\n<p>\n\tПример. Ложим первый уголок карман и говорим\n\t- этот карман может быть и может не быть.\n\tВосклицательный знак находится снаружи. Дальше\n\tпишем цифры - любое количество. Дальше записываем\n\tусловие - если найдено содержимое первого\n\tкармана, то получим <code class=\"string inline\">'>'</code>, если не найдено,\n\tто условие не сработает:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">preg_match('#(&lt;)?\\d+(?(1)&gt;)#', '123', $match);\nvar_dump($match);</code>\n</div>\n<p>\n\tТаким образом и работают условия в регулярных\n\tвыражениях.\n</p>\n<p>\n\tУсловия существуют двух типов: первое - когда\n\tпросто мы проверяем карман на существование\n\tи что-то делаем; второе - представляет собой\n\tи в противном случае. Незабываем указывать\n\tномер кармана. Давайте посмотрим пример,\n\tкогда говорим <code class=\"string inline\">'если'</code>. Если есть первый\n\tкарман то должно стоять то, в противном случае\n\tдолжен стоять <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">preg_match('#(&lt;)?\\d+(?(1)&gt;|!)#', '&lt;123&gt;', $match);\nvar_dump($match);</code>\n</div>\n\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/positive-and-negative-viewing/","content":"\n\t\t\t\t<h1>Позитивный и негативный просмотр в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда нужно решить задачу такого типа: найти\n\tстроку <code class=\"string inline\">'aaa'</code> и заменить ее на <code class=\"string inline\">'!'</code>,\n\t<i>но только если после <code class=\"string inline\">'aaa'</code> стоит\n\t<code class=\"string inline\">'x'</code></i>, а сам <code class=\"string inline\">'x'</code> при этом\n\tне заменять. Если мы попытаемся решить задачу\n\t'в лоб', то у нас ничего не выйдет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#aaax#', '!', 'aaax'); // будет '!', а надо '!x'\n?&gt;</code>\n</div>\n\n<h2>Просмотр вперед</h2>\n<p>\n\tДля решения задачи нужен способ сказать,\n\tчто <code class=\"string inline\">'x'</code> не следует заменять. Делается\n\tэто с помощью специальных скобок <code class=\"code inline\">(?= )</code>,\n\tкоторые просто смотрят, но не забирают с собой.\n</p>\n<p>\n\tЭти скобки называются <dfn>позитивный просмотр\n\tвперед</dfn>. Позитивный - так как <code class=\"string inline\">'x'</code>\n\t(в нашем случае) должен быть - только тогда\n\tпроизойдет замена.\n</p>\n<p>\n\tДавайте применим эти скобки для решения нашей\n\tзадачи:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#aaa(?=x)#', '!', 'aaax'); // вернет '!x'\n?&gt;</code>\n</div>\n<p>\n\tЕсть и <dfn>негативный просмотр вперед</dfn>\n\t- <code class=\"code inline\">(?! )</code> - он, наоборот, говорит, что\n\tчего-то должно не быть. В следующем примере\n\tзамена произойдет, только если после <code class=\"string inline\">'aaa'</code>\n\tне стоит <code class=\"string inline\">'x'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#aaa(?!x)#', '!', 'aaab'); // вернет '!b'\n?&gt;</code>\n</div>\n\n<h2>Просмотр назад</h2>\n<p>\n\tАналогичным образом есть <dfn>позитивный просмотр\n\tназад</dfn> - <code class=\"code inline\">(?&lt;= )</code>. В следующем\n\tпримере замена произойдет, только если перед\n\t<code class=\"string inline\">'aaa'</code> стоит <code class=\"string inline\">'x'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#(?&lt;=x)aaa#', '!', 'xaaa'); // вернет 'x!'\n?&gt;</code>\n</div>\n<p>\n\tИ есть также <dfn>негативный просмотр назад</dfn>\n\t- <code class=\"code inline\">(?&lt;! )</code>. В следующем примере замена\n\tпроизойдет, только если перед <code class=\"string inline\">'aaa'</code>\n\tне стоит <code class=\"string inline\">'x'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#(?&lt;!x)aaa#', '!', 'baaa'); // вернет 'b!'\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДана строка, содержащая имена функций:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'func1() func2() func3()';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПолучите массив имен функций из строки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с тегом:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '&lt;a href=\"\" class=\"eee\" id=\"zzz\"&gt;';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПолучите массив имен атрибутов этого тега.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с переменными:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '$aaa $bbb $ccc';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПолучите массив имен переменных из этой строки\n\t\t(без доллара).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/replace-callback/","content":"\n\t\t\t\t<h1>Замена с коллбэком через регулярки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть следующая строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2+3= 3+5= 7+8=';\n?&gt;</code>\n</div>\n<p>\n\tПусть нам нужно найти все конструкции вида\n\t<i>число+число=</i> и сделать так, чтобы\n\tпосле равно появился результат сложения.\n</p>\n<p>\n\tДля решения подобной задачи удобно воспользоваться\n\tфункцией <code class=\"code inline\">preg_replace_callback</code>, которая\n\tработает аналогично функции <code class=\"code inline\">preg_replace</code>\n\t- находит и заменяет по регулярному выражению,\n\tно позволяет выполнять дополнительные манипуляции\n\tс найденными кусочками.\n</p>\n<p>\n\tПервым параметром функция принимает регулярку,\n\tвторым - на что меняем, третьим - строку,\n\tв которой осуществляется замена.\n</p>\n<p>\n\tПри этом во второй параметр следует передавать\n\tфункцию-коллбэк, которая будет вызвана для\n\tкаждого найденного совпадения.\n</p>\n<p>\n\tПервым параметром коллбэка нужно указать\n\tпеременную, в которую будет попадать найденное.\n\tЭта переменная будет представлять собой массив\n\tкарманов найденного.\n</p>\n<p>\n\tДавайте попробуем на практике. Напишем, код,\n\tкоторый поймает наши подстроки, при этом\n\tположив первое число в первый карман, а второе\n\t- во второй:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2+3= 3+5= 7+8=';\n\t\n\tpreg_replace_callback('#(\\d+)\\+(\\d+)=#', function($match) {\n\t\tvar_dump($match);\n\t}, $str);\n?&gt;</code>\n</div>\n<p>\n\tВ результате наш <code class=\"code inline\">var_dump</code> сработает\n\tтри раза, по очереди выведя следующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">['2+3=', '2', '3']\n['3+5=', '3', '5']\n['7+8=', '7', '7']</code>\n</div>\n<p>\n\tИдем дальше. Каждое совпадение будет заменено\n\tна то, что возвращает коллбэк через <code class=\"code inline\">return</code>.\n\tДавайте для примера заменим каждую из искомых\n\tподстрок на знак <code class=\"string inline\">'!'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2+3= 3+5= 7+8=';\n\t\n\t$res = preg_replace_callback('#(\\d+)\\+(\\d+)=#', function($match) {\n\t\treturn '!';\n\t}, $str);\n\t\n\techo $res; // выведет '! ! !'\n?&gt;</code>\n</div>\n<p>\n\tА теперь заменим каждую подстроку на сумму\n\tпары чисел в ней:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2+3= 3+5= 7+8=';\n\t\n\t$res = preg_replace_callback('#(\\d+)\\+(\\d+)=#', function($match) {\n\t\treturn $match[1] + $match[2];\n\t}, $str);\n\t\n\techo $res; // выведет '5 8 13'\n?&gt;</code>\n</div>\n<p>\n\tПолучается, что наша задача почти решена.\n\tОсталось сделать так, чтобы перед суммой\n\tчисел оставалась искомая подстрока. Для этого\n\tбудем вставлять перед суммой содержимое нулевого\n\tкармана:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '2+3= 3+5= 7+8=';\n\t\n\t$res = preg_replace_callback('#(\\d+)\\+(\\d+)=#', function($match) {\n\t\treturn $match[0] . ($match[1] + $match[2]);\n\t}, $str);\n\t\n\techo $res; // выведет '2+3=5 3+5=8 7+8=13'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана строка с целыми числами. С помощью регулярки\n\t\tпреобразуйте строку так, чтобы вместо этих\n\t\tчисел стояли их квадраты.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/replacements-numbers/","content":"\n\t\t\t\t<h1>Количество замен в preg_replace в PHP</h1>\n\t\t\t\t<div class=\"content\">\n\n\n<h2>Количество замен в preg_replace</h2>\n<p>\n\tФункция <code class=\"code inline\">preg_replace</code> имеет <code class=\"number inline\">4</code>-тый\n\tнеобязательный параметр, который указывает,\n\tсколько замен произвести:\n</p>\n\n<div class=\"example-block\">\n\t<highlight><code class=\"language-php\">\n\t\t{:}##\n\t\t\t~echo preg_replace('#a+#', <code class=\"string inline\">'!'</code>, <code class=\"string inline\">'a aa aaa aaaa'</code>, 2); //выведет <code class=\"string inline\">'! ! aaa aaaa'</code>##\n\t\t{/}\n\t</code></highlight>\n</div>\n<p class=\"code-comment\">\n\tФункция произвела <b>только две замены</b>, все остальное не заменилось (<code class=\"string inline\">'aaa'</code> и <code class=\"string inline\">'aaaa'</code> попали под регулярку но не поменялись на <code class=\"string inline\">'!'</code>).\n</p>\n\n<div class=\"example-block\">\n\t<highlight><code class=\"language-php\">\n\t\t{:}##\n\t\t\t~echo preg_replace('#a+#', <code class=\"string inline\">'!'</code>, <code class=\"string inline\">'a aa aaa aaaa'</code>, 3); //выведет <code class=\"string inline\">'! ! ! aaaa'</code>##\n\t\t{/}\n\t</code></highlight>\n</div>\n<p class=\"code-comment\">\n\tНу, а теперь <code class=\"number inline\">3</code> замены. Принцип, я думаю, ясен.\n</p>\n<p class=\"code-comment\">\n\t<b>Вариант применения:</b> вы хотите для СЕО выделить важные слова в тег \n\t<a href=\"/html/strong.html\">&lt;strong&gt;</a>, но не все, \n\tа только первые несколько штук (иначе будет перебор).\n</p>\n\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/addditional-functions/","content":"\n\t\t\t\t<h1>Еще функции для работы с регулярками в PHP</h1>\n\t\t\t\t<div class=\"content\">\n\n<h2>Еще функции для работы с регулярками</h2>\n<h3>preg_quote</h3>\n<p>\n\t<b>preg_quote(строка, [доп. символы])</b>\n\t- экранирует спец. символы регулярных выражений\n\tв строке. Зачем это нужно? Например, вы формируете\n\tрегулярку динамически <code class=\"string inline\">'#'</code>.$var.'#'\n\t- и хотите быть уверенными, что туда не попадут\n\tспецсимволы. Иногда полезно.\n</p>\n<p>\n\tВторой параметр нужен для добавления своих\n\tсимволов для экранировки.\n</p>\n\n<h3>preg_grep</h3>\n<p>\n\t<b>preg_grep(регулярка, массив)</b> – принимает\n\tмассив, а возвращает массив только с теми\n\tэлементами, которые подпадают под регулярку.\n</p>\n\n<h3>preg_split</h3>\n<p>\n\t<code class=\"code inline\">preg_split</code> - разбивает строку в массив\n\tпо регулярному выражению (типа explode, только\n\tс регуляркой).\n</p>\n\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/modifiers/","content":"\n\t\t\t\t<h1>Модификаторы регулярок в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, модификаторы представляют\n\tсобой команды, которые пишутся после правого\n\tограничителя регулярки. Давайте посмотрим,\n\tчто полезного можно сделать с их помощью.\n</p>\n\n<h2>Игнорирование регистра</h2>\n<p>\n\tПо умолчанию в регулярках регистр символов\n\tимеет значение. В следующем примере мы найдем\n\tтолько буквы в нижнем регистре:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-z]+#', '!', 'aaa bbb AAA'); // вернет '! ! AAA'\n?&gt;</code>\n</div>\n<p>\n\tМы можем изменить такое поведение регулярки,\n\tиспользовав модификатор <code class=\"code inline\">i</code>. Исправим\n\tнашу регулярку в соответствии с этим:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-z]+#i', '!', 'aaa bbb AAA'); // вернет '! ! !'\n?&gt;</code>\n</div>\n\n<h2>Комментарии в регулярке</h2>\n<p>\n\tМодификатор <code class=\"code inline\">x</code> разрешает расставлять\n\tв регулярке произвольные пробелы и переводы\n\tстрок. Кроме того, символ решетки становится\n\tсимволом однострочного комментария (соотвественно,\n\tограничители придется заменить на другие).\n</p>\n<p>\n\tДавайте посмотрим на примере. Пусть у нас\n\tесть вот такая регулярка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-z]+@[0-9]+#', '!', 'aaa@333');\n?&gt;</code>\n</div>\n<p>\n\tДавайте используем модификатор <code class=\"code inline\">x</code> и\n\tрасставим в для каждой части нашей регулярки\n\tпоясняющие комментарии:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('~\n\t\t[a-z]+ # буквы \n\t\t@      # символ собаки\n\t\t[0-9]+ # цифры\n\t~x', '!', 'aaa@333');\n?&gt;</code>\n</div>\n\n<h2>Работа с юникодом</h2>\n<p>\n\tМодификатор <code class=\"code inline\">u</code>, с которым вы уже сталкивались\n\tранее, заставляет регулярку корректно работать\n\tс юникодом. В частности, корректно обрабатывать\n\tкириллические строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[а-яё]#u', '!', 'яяя ййй ёёё');\n?&gt;</code>\n</div>\n\n<h2>Изменение жадности</h2>\n<p>\n\tМодификатор <code class=\"sql inline\">U</code> делает так, что все\n\tоператоры повторений станут по умолчанию\n\tнежадными, а добавление <code class=\"code inline\">?</code>, наоборот,\n\tбудет добавлять им жадности:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#x.+x#U', '!', 'xax xaax xaaax'); // вернет '! ! !'\n?&gt;</code>\n</div>\n\n<h2>Экранировка обычных символов</h2>\n<p>\n\tМодификатор <code class=\"sql inline\">X</code> делает так, что экранировка\n\tобычного символа приведет к ошибке. Без этого\n\tоператора обычные символы можно экранировать,\n\tони все равно будут обозначать сами себя\n\t(исключение: цифры, они станут карманами).\n\tПосмотрим на примере:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#x\\@x#X', '!', 'x@x'); // ошибка, @ не спецсимвол\n?&gt;</code>\n</div>\n\n<h2>Несколько модификаторов</h2>\n<p>\n\tПосле ограничителя можно писать несколько\n\tмодификаторов. Пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-z]+#iU', '!', 'aaa bbb');\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tУпростите следующий код, использовав соответствующий\n\t\tмодификатор:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-zA-Z]+#', '!', 'aaa BBB');\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, как меняют поведение регулярки\n\t\tмодификаторы в следующем коде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-z]+#Uu', '!', 'aaa bbb');\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, как меняют поведение регулярки\n\t\tмодификаторы в следующем коде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[a-z]+#Xx', '!', 'aaa bbb');\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, как меняют поведение регулярки\n\t\tмодификаторы в следующем коде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_replace('#[а-яё]+#ui', '!', 'яяя ЙЙЙ ёёё');\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/regular/multi-line-mode/","content":"\n\t\t\t\t<h1>Модификаторы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n\n<h3>Модификаторы m и s</h3>\n<p>\n\tПока мы не обращали внимание на то, что наши\n\tрегулярки могут обрабатывать не только однострочные\n\tстроки, но и многострочные (те, где есть\n\tenter-ы - переводы строк).\n</p>\n<div class=\"example-block\">\n\t<highlight><code class=\"language-php\">\n\t\t{:}##\n\t\t\t~$str = '##\n\t\t\t\t~~первая подстрока##\n\t\t\t\t~~вторая подстрока##\n\t\t\t~';##\n\t\t{/}\n\t</code></highlight>\n</div>\n<p>\n\tРегулярки имеют <b>два режима поиска и замены</b>:\n\tмногострочный и однострочный.\n</p>\n\n<p>\n\t<b>Многострочный</b> режим явно задается\n\tс помощью модификатора <code class=\"code inline\">m</code>, а <b>однострочный</b>\n\t- с помощью модификатора <code class=\"code inline\">s</code>.\n</p>\n<p>\n\tДавайте посмотрим <b>разницу</b> между этими\n\tрежимами:\n</p>\n\n<h4>Многострочный:</h4>\n<p>\n\tШляпка <b>^</b> соответствует <b>началу каждой\n\tподстроки</b>, а <b>$</b> - <b>концу</b>:\n</p>\n<div class=\"example-block\">\n\t<highlight><code class=\"language-php\">\n\t\t{:}##\n\t\t\t~$str = '##\n\t\t\t\t~~^первая подстрока$##\n\t\t\t\t~~^вторая подстрока$##\n\t\t\t~';##\n\t\t{/}\n\t</code></highlight>\n</div>\n<p>\n\tВместо <b>^</b> для начала всей строки следует\n\tиспользовать <b>\\A</b>, а вместо <b>$</b>\n\tдля конца всей строки - <b>\\z</b>.\n</p>\n<p>\n\t<b>Точка</b> совпадает с любым символом,\n\t<b>за исключением перевода строки</b> (точнее\n\tона не совпадает со \\n, а со \\r совпадает!).\n</p>\n\n<h4>Однострочный:</h4>\n<p>\n\tШляпка <b>^</b> соответствует началу <b>всей</b>\n\tстроки, а <b>$</b> - концу:\n</p>\n<div class=\"example-block\">\n\t<highlight><code class=\"language-php\">\n\t\t{:}##\n\t\t\t~$str = '^##\n\t\t\t\t~~первая подстрока##\n\t\t\t\t~~вторая подстрока##\n\t\t\t~$';##\n\t\t{/}\n\t</code></highlight>\n</div>\n<p>\n\tТочка совпадает с любым символом.\n</p>\n<p>\n\t<b>Внимание!!!</b> По умолчанию функции поиска\n\t<code class=\"code inline\">preg_match</code> и <code class=\"code inline\">preg_match_all</code>\n\tработают в многострочном режиме (будто добавлен\n\tмодификатор <code class=\"code inline\">m</code>), а поиска и замены\n\t<code class=\"code inline\">preg_replace</code> - в однострочном (будто\n\tдобавлен модификатор <code class=\"code inline\">s</code>)!\n</p>\n<p>\n\tИсправляйте добавлением соответствующего\n\tмодификатора (при необходимости).\n</p>\n\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/variables-insertion/","content":"\n\t\t\t\t<h1>Вставка переменных в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ PHP одинарные и двойные кавычки для строк\n\tна самом деле не совсем эквиваленты. Дело\n\tв том, что в строки в двойных кавычках можно\n\tвставлять переменные - и вместо этих переменных\n\tподставится их значение.\n</p>\n<p>\n\tДавайте попробуем на практике. Пусть у нас\n\tесть некоторая переменная:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa';\n?&gt;</code>\n</div>\n<p>\n\tДавайте для начала выполним вставку этой\n\tпеременной в какую-нибудь строку через операцию\n\tконкатенации:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa';\n\techo 'xxx ' . $str . ' yyy';\n?&gt;</code>\n</div>\n<p>\n\tА теперь изменим кавычки нашей строки на\n\tдвойные и выполним в нее вставку переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = 'aaa';\n\techo \"xxx $str yyy\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$name = 'user';\n\techo 'hello, ' . $name . '!';\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Массивы</h2>\n<p>\n\tМожно также выполнять вставку элементов массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\techo \"xxx $arr[0] yyy\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['1', '2', '3'];\n\techo 'aaa ' . $arr[0] . ' bbb ' . $arr[1];\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Ассоциативные массивы</h2>\n<p>\n\tА вот вставка элементов ассоциативных массивов\n\tпросто так работать не будет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a'=&gt;1, 'b'=&gt;2, 'c'=&gt;3];\n\techo \"xxx $arr['a'] yyy\"; // не работает\n?&gt;</code>\n</div>\n<p>\n\tДля вставки таких элементов их необходимо\n\tобернуть в фигурные скобки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a'=&gt;1, 'b'=&gt;2, 'c'=&gt;3];\n\techo \"xxx {$arr['a']} yyy\";\n?&gt;</code>\n</div>\n<p>\n\tЛибо можно снять одинарные кавычки с ключа\n\tпри вставке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a'=&gt;1, 'b'=2, 'c'=3];\n\techo \"xxx $arr[a] yyy\";\n?&gt;</code>\n</div>\n<p>\n\tИногда имеет смысл тупо записать элемент\n\tмассива в переменную, чтобы затем без проблем\n\tвыполнить вставку переменной в строку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c'];\n\t$elem = $arr['a'];\n\t\n\techo \"xxx $elem yyy\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n\techo 'text ' . $arr['a'] . ' text ' . $arr['b'] . ' text';\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/loop-variables-insertion/","content":"\n\t\t\t\t<h1>Цикл и вставка переменных в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВставку переменных в строки также удобно\n\tпроделывать в циклах:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 5; $i++) {\n\t\techo \"xxx $i yyy\";\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 10; $i++) {\n\t\tfor ($j = 1; $j &lt;= 10; $j++) {\n\t\t\techo 'nums: ' . $i . ' ' . $j . '&lt;br&gt;';\n\t\t}\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Массивы</h2>\n<p>\n\tМожно также вставлять элементы при переборе\n\tмассивов циклом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo \"xxx $elem yyy\";\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУпростите следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n\n\tforeach ($arr as $key =&gt; $elem) {\n\t\techo 'pair: ' . $elem . ' ' . $key . '&lt;br&gt;';\n\t}\n?&gt;</code>\n\t</div>\n</div>\n\n<h2>Многомерные массивы</h2>\n<p>\n\tДавайте посмотрим, как выполняются вставки\n\tпри переборе многомерных массивов. Пусть,\n\tк примеру, у нас есть вот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = [\n\t\t[\n\t\t\t'name' =&gt; 'user1',\n\t\t\t'age'  =&gt; 30,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user2',\n\t\t\t'age'  =&gt; 31,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user3',\n\t\t\t'age'  =&gt; 32,\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте переберем его циклом и сформируем\n\tстроки из его элементов:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($users as $user) {\n\t\techo $user['name'] . ': ' . $user['age'] . '&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУпростим наш код, используя вставки переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($users as $user) {\n\t\techo \"{$user['name']}: {$user['age']}&lt;br&gt;\";\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУпростим еще больше, убрав кавычки с ключей:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($users as $user) {\n\t\techo \"$user[name]: $user[age]&lt;br&gt;\";\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$products = [\n\t\t[\n\t\t\t'name'   =&gt; 'product1',\n\t\t\t'price'  =&gt; 100,\n\t\t\t'amount' =&gt; 5,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'product2',\n\t\t\t'price'  =&gt; 200,\n\t\t\t'amount' =&gt; 6,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'product3',\n\t\t\t'price'  =&gt; 300,\n\t\t\t'amount' =&gt; 7,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите с помощью этого массива столбец\n\t\tпродуктов в каком-нибудь придуманном вами формате.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/tags-generation/","content":"\n\t\t\t\t<h1>Генерация тегов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся формировать теги\n\tс использованием переменных. Пусть, к примеру,\n\tу нас есть следующая переменная:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$text = 'aaa';\n?&gt;</code>\n</div>\n<p>\n\tВыведем текст этой переменной в абзаце:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$text = 'aaa';\n\techo '&lt;p&gt;' . $text . '&lt;/p&gt;';\n?&gt;</code>\n</div>\n<p>\n\tУпростим код, используя вставку переменной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$text = 'aaa';\n\techo \"&lt;p&gt;$text&lt;/p&gt;\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны три переменные:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$text1 = 'aaa';\n\t$text2 = 'bbb';\n\t$text3 = 'ccc';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите каждую из этих переменных в отдельном\n\t\tабзаце.\n\t</p>\n</div>\n\n<h2>С атрибутами</h2>\n<p>\n\tДавайте теперь научимся формировать теги\n\tс атрибутами. Пусть для примера мы хотим\n\tсделать ссылку. При этом текст и адрес ссылки\n\tбудут хранится в соответствующих переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$text = 'link';\n\t$href = 'index.html';\n?&gt;</code>\n</div>\n<p>\n\tДавайте сформируем наш тег путем конкатенации\n\tпеременных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;a href=\"' . $href . '\"&gt;' . $text . '&lt;/a&gt;';\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь сформируем наш тег путем вставки\n\tпеременных. В этом случае, однако, нас ждет\n\tпроблема. Дело в том, что для вставки переменных\n\tмы должны сделать кавычки строки двойными.\n\tНо кавычки от атрибутов тегов тоже двойные\n\tи нас ждет конфликт:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo \"&lt;a href=\"$href\"&gt;$text&lt;/a&gt;\"; // не будет работать\n?&gt;</code>\n</div>\n<p>\n\tСамый простой вариант решения проблемы -\n\tэто заменить кавычки атрибута с двойных на\n\tодинарные:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo \"&lt;a href='$href'&gt;$text&lt;/a&gt;\";\n?&gt;</code>\n</div>\n<p>\n\tЭто, однако, не очень красиво - ведь кавычки\n\tатрибутов принято делать двойными. Поэтому\n\tисправим проблему, заэкранировав кавычки\n\tатрибутов обратными слешами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo \"&lt;a href=\\\"$href\\\"&gt;$text&lt;/a&gt;\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны три переменные:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$src1 = '1.png';\n\t$src2 = '2.png';\n\t$src3 = '3.png';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСформируйте с помощью этих переменных три\n\t\tтега <code class=\"code inline\">img</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/loop-tags-generation/","content":"\n\t\t\t\t<h1>Цикл и генерация тегов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся формировать теги\n\tв цикле. К примеру, давайте сделаем пять\n\tабзацев, заполнив их числами по возрастанию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 5; $i++) {\n\t\techo '&lt;p&gt;' . $i . '&lt;/p&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПерепишем наш код с использованием вставки\n\tпеременных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 5; $i++) {\n\t\techo \"&lt;p&gt;$i&lt;/p&gt;\";\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла сформируйте следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;1&lt;/li&gt;\n\t&lt;li&gt;2&lt;/li&gt;\n\t&lt;li&gt;3&lt;/li&gt;\n\t&lt;li&gt;4&lt;/li&gt;\n\t&lt;li&gt;5&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n\n<h2>Массивы</h2>\n<p>\n\tДавайте теперь сформируем теги, взяв их тексты\n\tиз массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n\t\n\tforeach ($arr as $elem) {\n\t\techo '&lt;p&gt;' . $elem . '&lt;/p&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПерепишем наш код через вставку переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $elem) {\n\t\techo \"&lt;p&gt;$elem&lt;/p&gt;\";\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['text1', 'text2', 'text3'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСформируйте с его помощью следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;select&gt;\n\t&lt;option&gt;text1&lt;/option&gt;\n\t&lt;option&gt;text2&lt;/option&gt;\n\t&lt;option&gt;text3&lt;/option&gt;\n&lt;/select&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/loop-tags-attributes-generation/","content":"\n\t\t\t\t<h1>Цикл и генерация тегов и атрибутов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся формировать в цикле\n\tтеги не только с текстом, но и с атрибутами.\n\tПусть, к примеру, у нас есть следующий массив\n\tс адресами и текстами ссылок:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['href'=&gt;'1.html', 'text'=&gt;'link1'],\n\t\t['href'=&gt;'2.html', 'text'=&gt;'link2'],\n\t\t['href'=&gt;'3.html', 'text'=&gt;'link3'],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте с помощью этого массива сформируем ссылки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $elem) {\n\t\techo '&lt;a href=\"' . $elem['href'] . '\"&gt;' . $elem['text'] . '&lt;/a&gt;&lt;br&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно переписать этот код с использованием\n\tвставок переменных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $elem) {\n\t\techo \"&lt;a href=\\\"{$elem['href']}\\\"&gt;{$elem['text']}&lt;/a&gt;&lt;br&gt;\";\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['href'=&gt;'page1.html', 'text'=&gt;'text1'],\n\t\t['href'=&gt;'page2.html', 'text'=&gt;'text2'],\n\t\t['href'=&gt;'page3.html', 'text'=&gt;'text3'],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСформируйте с его помощью следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;&lt;a href=\"page1.html\"&gt;text1&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"page2.html\"&gt;text2&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"page3.html\"&gt;text3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['value' =&gt; '1', 'text' =&gt; 'text1'],\n\t\t['value' =&gt; '2', 'text' =&gt; 'text2'],\n\t\t['value' =&gt; '3', 'text' =&gt; 'text3'],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСформируйте с его помощью следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;select&gt;\n\t&lt;option value=\"1\"&gt;text1&lt;/option&gt;\n\t&lt;option value=\"2\"&gt;text2&lt;/option&gt;\n\t&lt;option value=\"3\"&gt;text3&lt;/option&gt;\n&lt;/select&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/loop-html-tables-generation/","content":"\n\t\t\t\t<h1>Цикл и генерация HTML таблиц на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся формировать таблицы.\n\tПусть у нас дан следующий массив, содержащий\n\tтексты ячеек таблицы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['name' =&gt; 'user1', 'age' =&gt; 30, 'salary' =&gt; 500],\n\t\t['name' =&gt; 'user2', 'age' =&gt; 31, 'salary' =&gt; 600],\n\t\t['name' =&gt; 'user3', 'age' =&gt; 32, 'salary' =&gt; 700],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте с помощью цикла сформируем из этого\n\tмассива следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td&gt;user1&lt;/td&gt;\n\t\t\t&lt;td&gt;30&lt;/td&gt;\n\t\t\t&lt;td&gt;500&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td&gt;user2&lt;/td&gt;\n\t\t\t&lt;td&gt;31&lt;/td&gt;\n\t\t\t&lt;td&gt;600&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t\t&lt;tr&gt;\n\t\t\t&lt;td&gt;user3&lt;/td&gt;\n\t\t\t&lt;td&gt;32&lt;/td&gt;\n\t\t\t&lt;td&gt;700&lt;/td&gt;\n\t\t&lt;/tr&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;</code>\n</div>\n\n<h2>Вариант первый</h2>\n<p>\n\tСформируем таблицу с помощью одного цикла,\n\tвручную записав в теги <code class=\"code inline\">td</code> элементы\n\tподмассива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;table&gt;';\n\tforeach ($arr as $user) {\n\t\techo '&lt;tr&gt;';\n\t\t\n\t\techo \"&lt;td&gt;{$user['name']}&lt;/td&gt;\";\n\t\techo \"&lt;td&gt;{$user['age']}&lt;/td&gt;\";\n\t\techo \"&lt;td&gt;{$user['salary']}&lt;/td&gt;\";\n\t\t\n\t\techo '&lt;/tr&gt;';\n\t}\n\techo '&lt;/table&gt;';\n?&gt;</code>\n</div>\n<p>\n\tТакой способ даст нам более полный контроль,\n\tкак над порядком ячеек, так и над возможностью\n\tв каждую ячейку добавить какие-то дополнительные\n\tданные, например, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;table&gt;';\n\tforeach ($arr as $user) {\n\t\techo '&lt;tr&gt;';\n\t\t\n\t\techo \"&lt;td&gt;{$user['name']}&lt;/td&gt;\";\n\t\techo \"&lt;td&gt;{$user['age']} years&lt;/td&gt;\";\n\t\techo \"&lt;td&gt;{$user['salary']} dollars&lt;/td&gt;\";\n\t\t\n\t\techo '&lt;/tr&gt;';\n\t}\n\techo '&lt;/table&gt;';\n?&gt;</code>\n</div>\n\n<h2>Вариант второй</h2>\n<p>\n\tДавайте сформируем нашу таблицу с помощью\n\tдвух вложенных циклов:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;table&gt;';\n\tforeach ($arr as $row) {\n\t\techo '&lt;tr&gt;';\n\t\tforeach ($row as $cell) {\n\t\t\techo \"&lt;td&gt;$cell&lt;/td&gt;\";\n\t\t}\n\t\techo '&lt;/tr&gt;';\n\t}\n\techo '&lt;/table&gt;';\n?&gt;</code>\n</div>\n<p>\n\tТакой способ удобен тем, что не нужно прописывать\n\tкаждую ячейку таблицы отдельно. Однако, недостатком\n\tтакого подхода становится потеря контроля.\n</p>\n<p>\n\tВпрочем, контроль можно вернуть с помощью\n\tусловий, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;table&gt;';\n\tforeach ($arr as $row) {\n\t\techo '&lt;tr&gt;';\n\t\tforeach ($row as $key =&gt; $cell) {\n\t\t\tif ($key === 'salary') {\n\t\t\t\techo \"&lt;td&gt;$cell dollars&lt;/td&gt;\";\n\t\t\t} else {\n\t\t\t\techo \"&lt;td&gt;$cell&lt;/td&gt;\";\n\t\t\t}\n\t\t}\n\t\techo '&lt;/tr&gt;';\n\t}\n\techo '&lt;/table&gt;';\n?&gt;</code>\n</div>\n<p>\n\tМожно упросить наш код следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo '&lt;table&gt;';\n\tforeach ($arr as $row) {\n\t\techo '&lt;tr&gt;';\n\t\tforeach ($row as $key =&gt; $cell) {\n\t\t\tif ($key === 'salary') {\n\t\t\t\t$cell .= ' dollars';\n\t\t\t}\n\t\t\t\n\t\t\techo \"&lt;td&gt;$cell&lt;/td&gt;\";\n\t\t}\n\t\techo '&lt;/tr&gt;';\n\t}\n\techo '&lt;/table&gt;';\n?&gt;</code>\n</div>\n\n<h2>Практическая задача</h2>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$products = [\n\t\t[\n\t\t\t'name'   =&gt; 'product1',\n\t\t\t'price'  =&gt; 100,\n\t\t\t'amount' =&gt; 5,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'product2',\n\t\t\t'price'  =&gt; 200,\n\t\t\t'amount' =&gt; 6,\n\t\t],\n\t\t[\n\t\t\t'name'   =&gt; 'product3',\n\t\t\t'price'  =&gt; 300,\n\t\t\t'amount' =&gt; 7,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСформируйте с его помощью HTML таблицу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/php-breaking/","content":"\n\t\t\t\t<h1>Разрыв PHP кода</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторый HTML код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;p&gt;text&lt;/p&gt;</code>\n</div>\n<p>\n\tМы можем внутри этого кода делать вставки\n\tPHP кода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;p&gt;&lt;?php echo 'text'; ?&gt;&lt;/p&gt;</code>\n</div>\n<p>\n\tПри этом, если в нашем коде есть только команда\n\t<code class=\"code inline\">echo</code>, вместо нее мы можем использовать\n\tспециальный короткий тег PHP:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;p&gt;&lt;?= 'text' ?&gt;&lt;/p&gt;</code>\n</div>\n\n<h2>Переменная</h2>\n<p>\n\tПусть теперь у нас есть некоторый абзац,\n\tвыше которого определена переменная PHP:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$str = 'text';\n?&gt;\n&lt;p&gt;text&lt;/p&gt;</code>\n</div>\n<p>\n\tМы можем выполнить вставку нашей переменной\n\tвовнутрь абзаца:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$str = 'text';\n?&gt;\n&lt;p&gt;&lt;?php echo $str; ?&gt;&lt;/p&gt;</code>\n</div>\n<p>\n\tА можем упросить вставку переменной, используя\n\tкороткий PHP тег:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$str = 'text';\n?&gt;\n&lt;p&gt;&lt;?= $str ?&gt;&lt;/p&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны три переменные:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$str1 = 'text1';\n\t$str2 = 'text2';\n\t$str3 = 'text3';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tТакже даны три абзаца:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;</code>\n\t</div>\n\t<p>\n\t\tВыполните вставку текста переменных в соответствующие\n\t\tабзацы.\n\t</p>\n</div>\n\n<h2>Массив</h2>\n<p>\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;\n\n&lt;p&gt;&lt;?= $arr[0] ?&gt;&lt;/p&gt;\n&lt;p&gt;&lt;?= $arr[1] ?&gt;&lt;/p&gt;\n&lt;p&gt;&lt;?= $arr[2] ?&gt;&lt;/p&gt;\n&lt;p&gt;&lt;?= $arr[3] ?&gt;&lt;/p&gt;\n&lt;p&gt;&lt;?= $arr[4] ?&gt;&lt;/p&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$arr = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; 3];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tТакже даны три абзаца:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;</code>\n\t</div>\n\t<p>\n\t\tВыполните вставку элементов массива в соответствующие\n\t\tабзацы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/conditions-php-breaking/","content":"\n\t\t\t\t<h1>Условия и разрыв PHP кода</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторая переменная:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$test = true;\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем какой-нибудь кусочек HTML\n\tкода, если наша переменная равна <code class=\"code inline\">true</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif ($test) {\n\t\techo '&lt;p&gt;text&lt;/p&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожем переделать этот код на следующий, с\n\tразрывом PHP скобок:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if ($test) { ?&gt;\n\t&lt;p&gt;text&lt;/p&gt;\n&lt;?php } ?&gt;</code>\n</div>\n<p>\n\tТакое можно упростить еще больше, если воспользоваться\n\tальтернативным синтаксисом <code class=\"code inline\">if</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if ($test): ?&gt;\n\t&lt;p&gt;text&lt;/p&gt;\n&lt;?php endif; ?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана переменная:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$show = true;\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДан код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;p&gt;text1&lt;/p&gt;\n\t&lt;p&gt;text2&lt;/p&gt;\n\t&lt;p&gt;text3&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите приведенный HTML код, если переменная\n\t\t<code class=\"code inline\">show</code> равна <code class=\"code inline\">true</code>.\n\t</p>\n</div>\n\n<h2>Блок else</h2>\n<p>\n\tПусть теперь у нас также есть и блок <code class=\"code inline\">else</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if ($test) { ?&gt;\n\t&lt;p&gt;+++&lt;/p&gt;\n&lt;?php } else { ?&gt;\n\t&lt;p&gt;---&lt;/p&gt;\n&lt;?php } ?&gt;</code>\n</div>\n<p>\n\tМожем и его переписать через альтернативный\n\tсинтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if ($test): ?&gt;\n\t&lt;p&gt;+++&lt;/p&gt;\n&lt;?php else: ?&gt;\n\t&lt;p&gt;---&lt;/p&gt;\n&lt;?php endif; ?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана переменная:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$show = true;\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tДан код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;p&gt;text+&lt;/p&gt;\n\t&lt;p&gt;text+&lt;/p&gt;\n\t&lt;p&gt;text+&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;text-&lt;/p&gt;\n\t&lt;p&gt;text-&lt;/p&gt;\n\t&lt;p&gt;text-&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите первый див, если переменная <code class=\"code inline\">show</code>\n\t\tравна <code class=\"code inline\">true</code>, и второй див, если переменная\n\t\tравна <code class=\"code inline\">false</code>.\n\t</p>\n</div>\n\n<h2>Блок elseif</h2>\n<p>\n\tМожно также сделать несколько условий с помощью\n\t<code class=\"code inline\">elseif</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if ($test === 1) { ?&gt;\n\t&lt;p&gt;1&lt;/p&gt;\n&lt;?php } elseif ($test === 2) { ?&gt;\n\t&lt;p&gt;2&lt;/p&gt;\n&lt;?php } else { ?&gt;\n\t&lt;p&gt;?&lt;/p&gt;\n&lt;?php } ?&gt;</code>\n</div>\n<p>\n\tПерепишем через альтернативный синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if ($test === 1): ?&gt;\n\t&lt;p&gt;1&lt;/p&gt;\n&lt;?php elseif ($test === 2): ?&gt;\n\t&lt;p&gt;2&lt;/p&gt;\n&lt;?php else: ?&gt;\n\t&lt;p&gt;?&lt;/p&gt;\n&lt;?php endif; ?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны дивы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;p&gt;text1&lt;/p&gt;\n\t&lt;p&gt;text1&lt;/p&gt;\n\t&lt;p&gt;text1&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;text2&lt;/p&gt;\n\t&lt;p&gt;text2&lt;/p&gt;\n\t&lt;p&gt;text2&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;text-&lt;/p&gt;\n\t&lt;p&gt;text-&lt;/p&gt;\n\t&lt;p&gt;text-&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n\t<p>\n\t\tСделайте условие, которое будет показывать\n\t\tодин из дивов.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forming/loops-php-breaking/","content":"\n\t\t\t\t<h1>Циклы и разрыв PHP кода</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте сформируем в цикле несколько абзацев:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($i = 1; $i &lt;= 9; $i++) {\n\t\techo '&lt;p&gt;' . $i . '&lt;/p&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно переписать код с разрывом PHP:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php for ($i = 1; $i &lt;= 9; $i++) { ?&gt;\n\t&lt;p&gt;&lt;?= $i ?&gt;&lt;/p&gt;\n&lt;?php } ?&gt;</code>\n</div>\n<p>\n\tДля простоты можно воспользоваться альтернативным\n\tсинтаксисом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php for ($i = 1; $i &lt;= 9; $i++): ?&gt;\n\t&lt;p&gt;&lt;?= $i ?&gt;&lt;/p&gt;\n&lt;?php endfor; ?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте с помощью цикла следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;1&lt;/li&gt;\n\t&lt;li&gt;2&lt;/li&gt;\n\t&lt;li&gt;3&lt;/li&gt;\n\t&lt;li&gt;4&lt;/li&gt;\n\t&lt;li&gt;5&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n\n<h2>Массив</h2>\n<p>\n\tПусть у нас дан массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$arr = [1, 2, 3, 4, 5];\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем каждый элемент этого массива\n\tв своем абзаце:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tforeach ($arr as $elem) {\n\t\techo '&lt;p&gt;' . $elem . '&lt;/p&gt;';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно переписать код с разрывом PHP:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php foreach ($arr as $elem) { ?&gt;\n\t&lt;p&gt;&lt;?= $elem ?&gt;&lt;/p&gt;\n&lt;?php } ?&gt;</code>\n</div>\n<p>\n\tДля простоты можно воспользоваться альтернативным\n\tсинтаксисом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php foreach ($arr as $elem): ?&gt;\n\t&lt;p&gt;&lt;?= $elem ?&gt;&lt;/p&gt;\n&lt;?php endforeach; ?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$arr = ['user1', 'user2', 'user3'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью этого массива и цикла сформируйте\n\t\tследующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;h2&gt;user1&lt;/h2&gt;\n\t&lt;p&gt;text&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;h2&gt;user2&lt;/h2&gt;\n\t&lt;p&gt;text&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;h2&gt;user3&lt;/h2&gt;\n\t&lt;p&gt;text&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$arr = [\n\t\t[\n\t\t\t'name' =&gt; 'user1',\n\t\t\t'age'  =&gt; 30,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user2',\n\t\t\t'age'  =&gt; 31,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user3',\n\t\t\t'age'  =&gt; 32,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tС помощью этого массива и цикла сформируйте\n\t\tследующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;p&gt;name: user1&lt;/p&gt;\n\t&lt;p&gt;age: 30&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;name: user2&lt;/p&gt;\n\t&lt;p&gt;age: 31&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;name: user3&lt;/p&gt;\n\t&lt;p&gt;age: 32&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/intro/","content":"\n\t\t\t\t<h1>Основы работы с формами в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМы можем получать данные от пользователя\n\tсайта с помощью <dfn>форм</dfn>. Формы создаются\n\tс помощью тега <a href=\"/ru/markup/manual/html/tag/form/\"><code class=\"code inline\">form</code></a>,\n\tтегов <a href=\"/ru/markup/manual/html/tag/input/\"><code class=\"code inline\">input</code></a>\n\tи кнопок <a href=\"/ru/markup/manual/html/tag/input/submit\"><code class=\"code inline\">submit</code></a>:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form&gt;\n\t&lt;input&gt;\n\t&lt;input&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tКаждому элементу формы, данные которого мы\n\tхотим получить в PHP скрипте, мы должны дать\n\tимя с помощью атрибута <code class=\"code inline\">name</code>:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tС помощью атрибута <code class=\"code inline\">action</code> мы указываем\n\tфайл, на который будет отправлена форма:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"/result.php\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму с тремя инпутами, в которые\n\t\tможно ввести имя, возраст и зарплату пользователя.\n\t</p>\n</div>\n\n<h2>Метод отправки формы</h2>\n<p>\n\tС помощью атрибута <code class=\"code inline\">method</code> мы указываем\n\tметод отправки формы. Он может быть <code class=\"sql inline\">GET</code>\n\tили POST.\n</p>\n<p>\n\tПусть наша форма отправляется методом <code class=\"sql inline\">GET</code>\n\tна страницу <code class=\"path inline\">result.php</code>:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"/result.php\" method=\"GET\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tВ этом случае на этой странице в адресной\n\tстроке появятся данные формы в следующем\n\tформате: после адреса страницы будет стоять\n\tзнак <code class=\"path inline\">?</code>, а после него имена инпутов\n\tи введенные пользователем значения: <code class=\"path inline\">result.php?test1=value1&test2=value2</code>.\n</p>\n<p>\n\tПусть наша форма отправляется методом <code class=\"sql inline\">POST</code>\n\tна страницу <code class=\"path inline\">result.php</code>. В этом случае\n\tданные также будут отправлены, но в адресной\n\tстроке отражены не будут:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"/result.php\" method=\"POST\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНа странице <code class=\"path inline\">index.php</code> сделайте форму.\n\t\tОтправьте ее на страницу <code class=\"path inline\">result.php</code>.\n\t\tПроверьте оба метода отправки формы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/data-getting/","content":"\n\t\t\t\t<h1>Получение данных форм в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть файл <code class=\"path inline\">form.php</code>, а\n\tв нем HTML форма, отправляющаяся на страницу\n\t<code class=\"path inline\">result.php</code>. На этой странице мы можем\n\tполучить данные формы с помощью специальных\n\tпеременных <code class=\"code inline\">$_GET</code>, <code class=\"code inline\">$_POST</code> и\n\t<code class=\"code inline\">$_REQUEST</code>.\n</p>\n<p>\n\tЭти переменные содержат в себе массив данных\n\tотправленной формы. При этом ключами этого\n\tмассива будут имена инпутов, а значениями\n\t- те данные, которые были введены в эти инпуты.\n</p>\n<p>\n\tПри этом, если форма была отправлена методом\n\tGET, то данные будут в массиве <code class=\"code inline\">$_GET</code>,\n\tа если методом POST, то данные будут соответственно\n\tв массиве <code class=\"code inline\">$_POST</code>. А в переменной <code class=\"code inline\">$_REQUEST</code>\n\tбудут лежать данные формы, отправленные любым\n\tиз методов.\n</p>\n\n<h2>Пример на метод GET</h2>\n<p>\n\tДавайте посмотрим на примере. Пусть файл\n\t<code class=\"path inline\">form.php</code> содержит форму, отправляющуюся\n\tметодом <code class=\"sql inline\">GET</code> на страницу <code class=\"path inline\">result.php</code>:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"/result.php\" method=\"GET\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tЕсли в нашу форму в браузере вбить какие-то\n\tданные и нажать на кнопку, то форма отправится\n\tна страницу <code class=\"path inline\">result.php</code>:\n</p>\n<div class=\"block\" data-file=\"result.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($_GET);     // массив с ключами test1 и test2\n\tvar_dump($_POST);    // пустой массив\n\tvar_dump($_REQUEST); // массив с ключами test1 и test2\n?&gt;</code>\n</div>\n<p>\n\tА можно вывести на экран содержимое определенного\n\tинпута:\n</p>\n<div class=\"block\" data-file=\"result.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $_GET['test1'];\n?&gt;</code>\n</div>\n<p>\n\tА можно взять содержимое и первого, и второго\n\tинпутов, слить их в строку и вывести на экран:\n</p>\n<div class=\"block\" data-file=\"result.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $_GET['test1'] . $_GET['test2'];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму с тремя инпутами. Пусть в\n\t\tэти инпуты вводятся числа. После отправки\n\t\tформы выведите на экран сумму этих чисел.\n\t</p>\n</div>\n\n<h2>Пример на метод POST</h2>\n<p>\n\tПусть теперь наша форма отправляется методом POST:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"/result.php\" method=\"POST\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tВ этом случае на странице результата данные\n\tформы будут лежать в переменной <code class=\"code inline\">$_POST</code>:\n</p>\n<div class=\"block\" data-file=\"result.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($_GET);     // пустой массив\n\tvar_dump($_POST);    // массив с ключами test1 и test2\n\tvar_dump($_REQUEST); // массив с ключами test1 и test2\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите у пользователя его\n\t\tимя и возраст. После отправки формы выведите\n\t\tэти данные на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть с помощью формы у пользователя спрашивается\n\t\tпароль:\n\t</p>\n\t<div class=\"block\" data-file=\"form.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"/result.php\" method=\"POST\"&gt;\n\t&lt;input type=\"password\" name=\"pass\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n\t</div>\n\t<p>\n\t\tПусть на странице с результатом в переменной\n\t\tхранится правильный пароль:\n\t</p>\n\t<div class=\"block\" data-file=\"result.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$pass = '12345';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСделайте так, чтобы после отправки формы\n\t\tна странице результата сравнивался пароль\n\t\tиз переменной и пароль из формы. После сравнения\n\t\tсообщите пользователю, правильный он ввел\n\t\tпароль или нет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью трех инпутов спросите у пользователя\n\t\tгод, месяц и день рождения пользователя.\n\t\tПосле отправки формы определите день недели,\n\t\tв который родился пользователь.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/one-file-handling/","content":"\n\t\t\t\t<h1>Обработка формы в одном файле PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке наша форма была размещена\n\tна одной странице, а отправлялась на другую.\n\tНа самом деле это не обязательно. Если оставить\n\tатрибут <code class=\"code inline\">action</code> пустым или убрать его\n\tсовсем, то форма будет отправляться на эту\n\tже страницу.\n</p>\n<p>\n\tКак это будет работать: при первом заходе\n\tна страницу мы заполним форму данными и нажмем\n\tна кнопку. После этого страница обновится\n\tи ее код выполнится снова, но уже с данными формы.\n</p>\n<p>\n\tДавайте посмотрим на примере. Пусть у нас\n\tв одном файле есть форма и ее обработка:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;?php\n\tvar_dump($_GET);\n?&gt;</code>\n</div>\n<p>\n\tПри первом заходе на страницу функция <code class=\"code inline\">var_dump</code>\n\tвыведет пустой массив. А после отправки формы\n\tон выведет уже данные формы. То есть первый\n\tраз <code class=\"code inline\">$_GET</code> будет пуст, а второй раз\n\t- будет содержать данные формы.\n</p>\n<p>\n\tЭто может привести к проблемам. Пусть, к\n\tпримеру, мы в форму будем вводить числа и\n\tхотим вывести сумму этих чисел на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;?php\n\techo $_GET['test1'] + $_GET['test2'];\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае при первом заходе на страницу\n\tмы увидим ошибки PHP, связанные с тем, что\n\tмассив <code class=\"code inline\">$_GET</code> пуст, а мы обращаемся\n\tк его элементам.\n</p>\n<p>\n\tЗдесь следует сказать, что у вас ошибки могут\n\tи не появится в браузере. В этом случае пров\n\tпроверьте, что у вас включен вывод ошибок\n\tPHP, а также убедитесь, что у вас первый\n\tзаход на страницу и в адресной строке нет\n\tданных формы.\n</p>\n<p>\n\tДавайте исправим проблему. Для этого добавим\n\tусловие, в котором будем проверять то, что\n\tформа была отправлена.\n</p>\n<p>\n\tНапример, можно проверять <code class=\"code inline\">$_GET</code> на\n\tне пустоту. Если <code class=\"code inline\">$_GET</code> не пустой -\n\tто форма была отправлена и можно выполнять\n\tсуммирование. В противном случае у нас еще\n\tпервый заход на страницу и суммирование выполнено\n\tне будет. Итак, вот исправленный код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;?php\n\tif (!empty($_GET)) {\n\t\techo $_GET['test1'] + $_GET['test2'];\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСпросите у пользователя фамилию, имя и отчество.\n\t\tПосле отправки формы выведите на экран введенные\n\t\tданные.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/hiding-after-submit/","content":"\n\t\t\t\t<h1>Скрытие формы после отправки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть форма, в которую вводятся\n\tдва числа. Пусть также после отправки формы\n\tмы выводим на экран сумму этих чисел:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n\n&lt;?php\n\tif (!empty($_GET)) {\n\t\techo $_GET['test1'] + $_GET['test2'];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте сделаем так, чтобы форма пряталась\n\tпосле отправки. Для этого код формы нужно\n\tразместить внутри условия:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (empty($_GET)) {\n?&gt;\n\t&lt;form action=\"\" method=\"GET\"&gt;\n\t\t&lt;input name=\"test1\"&gt;\n\t\t&lt;input name=\"test2\"&gt;\n\t\t&lt;input type=\"submit\"&gt;\n\t&lt;/form&gt;\n&lt;?php\n\t} else {\n\t\techo $_GET['test1'] + $_GET['test2'];\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите имя пользователя.\n\t\tПосле отправки формы поприветствуйте пользователя\n\t\tпо имени, а форму уберите.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/values-remaining/","content":"\n\t\t\t\t<h1>Сохранение значений формы после отправки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторая форма, отправляющаяся\n\tна текущую страницу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tДавайте сделаем так, чтобы после отправки\n\tвведенные данные не пропадали из нашего инпута:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test\" value=\"&lt;?php echo $_GET['test'] ?&gt;\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tТакой подход, однако, не совершенен - при\n\tпервом заходе на страницу PHP выдаст ошибку\n\tиз-за того, что <code class=\"code inline\">$_GET['test']</code> не существует.\n</p>\n<p>\n\tДля решения проблемы добавим условие:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input\n\t\tname=\"test\"\n\t\tvalue=\"&lt;?php if (isset($_GET['test'])) echo $_GET['test'] ?&gt;\"\n\t&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите город и страну пользователя.\n\t\tПосле отправки формы выведите введенные данные\n\t\tна экран. Сделайте так, чтобы введенные данные\n\t\tне пропадали из инпутов после отправки формы.\n\t</p>\n</div>\n\n<h2>Значение по умолчанию</h2>\n<p>\n\tПусть мы хотим сделать так, чтобы по при\n\tзаходе на страницу в инпуте уже был какой-то\n\tтекст. Пользователь может поредактировать\n\tэтот текст, а может оставить его без изменения.\n\tА после отправки формы в инпуте должен остаться\n\tтот текст, который был на момент отправки.\n</p>\n<p>\n\tДля решения этой задачи нам необходимо добавить\n\tблок <code class=\"code inline\">else</code> в наше условие и в этом\n\tблоке вывести значение по умолчанию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input\n\t\tname=\"test\"\n\t\tvalue=\"&lt;?php\n\t\t\tif (isset($_GET['test']))\n\t\t\t\techo $_GET['test'];\n\t\t\telse echo 'default' \n\t\t?&gt;\"\n\t&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите у пользователя год.\n\t\tПосле отправки определите, этот год високосный\n\t\tили нет. Сделайте так, чтобы при первом заходе\n\t\tна страницу в инпуте уже стоял текущий год.\n\t</p>\n</div>\n\n<h2>Сократим код</h2>\n<p>\n\tПолученный нами код очень уж длинный. Давайте\n\tего сократим. Для начала вместо <code class=\"code inline\">if</code>\n\tиспользуем тернарный оператор:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input\n\t\tname=\"test\"\n\t\tvalue=\"&lt;?php\n\t\t\techo isset($_GET['test']) ? $_GET['test'] : 'default' \n\t\t?&gt;\"\n\t&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tА теперь используем сокращенный вариант PHP\n\tскобки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input\n\t\tname=\"test\"\n\t\tvalue=\"&lt;?= isset($_GET['test']) ? $_GET['test'] : 'default' ?&gt;\"\n\t&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tА теперь используем оператор <code class=\"code inline\">??</code>, который\n\tсократит код еще больше:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input name=\"test\" value=\"&lt;?= $_GET['test'] ?? 'default' ?&gt;\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью трех инпутов спросите у пользователя\n\t\tгод, месяц и день. После отправки формы выведите\n\t\tна экран, сколько дней осталось от введенной\n\t\tдаты до Нового Года. По заходу на страницу\n\t\tсделайте так, чтобы в инпутах стояла текущая дата.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/textarea/","content":"\n\t\t\t\t<h1>Элемент textarea в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы поработаем с элементом\n\t<a href=\"/ru/markup/manual/html/tag/textarea/\"><code class=\"code inline\">textarea</code></a>,\n\tпредставляющим собой многострочное поле ввода.\n\tВот пример использования этого тега в форме:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;textarea name=\"test\"&gt;&lt;/textarea&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПопросите пользователя оставить отзыв на\n\t\tсайт. После отправки формы выведите этот\n\t\tотзыв на экран.\n\t</p>\n</div>\n\n<h2>Сохранение значения после отправки</h2>\n<p>\n\tДавайте теперь сделаем так, чтобы содержимое\n\t<code class=\"code inline\">textarea</code> сохранялось после отправки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;textarea name=\"test\"&gt;&lt;?= $_GET['test'] ?? '' ?&gt;&lt;/textarea&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">textarea</code> вводится русский\n\t\tтекст. После отправки формы выведите на экран\n\t\tтранслит этого текста. Сделайте так, чтобы\n\t\tсодержимое формы сохранялось после отправки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/checkbox/","content":"\n\t\t\t\t<h1>Чекбокс в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся работать с флажками\n\t<a href=\"/ru/markup/manual/html/tag/input/checkbox/\"><code class=\"code inline\">checkbox</code></a>\n\tв PHP. Сделаем такой флажок в нашей форме:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"checkbox\" name=\"flag\"&gt;\n\t&lt;input name=\"text\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПосле отправки формы в <code class=\"code inline\">$_GET</code> флажка\n\tбудет содержаться строка <code class=\"string inline\">'on'</code>, если\n\tфлажок был отмечен и <code class=\"code inline\">null</code>, если нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tvar_dump($_GET['flag']); // 'on' или null\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем что-нибудь на экран в зависимости\n\tот того, был отмечен флажок или нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_GET)) { // если форма была отправлена\n\t\tif (isset($_GET['flag'])) { // если флажок отмечен\n\t\t\techo 'отмечен';\n\t\t} else {\n\t\t\techo 'не отмечен';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму с инпутом и флажком. С помощью\n\t\tинпута спросите у пользователя имя. После\n\t\tотправки формы, если флажок был отмечен,\n\t\tпоприветствуйте пользователя, а если не был\n\t\tотмечен - попрощайтесь.\n\t</p>\n</div>\n\n<h2>Нюансы</h2>\n<p>\n\tПусть в нашей форме есть только чекбокс:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"checkbox\" name=\"flag\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПусть код обработки нашей формы выглядит вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_GET)) { // если форма была отправлена\n\t\tif (isset($_GET['flag'])) { // если флажок отмечен\n\t\t\techo 'отмечен';\n\t\t} else {\n\t\t\techo 'не отмечен';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНас ждет проблема - если флажок не отмечен,\n\tто, так как в форме кроме чекбокса нет других\n\tэлементов, в <code class=\"code inline\">$_GET</code> будет лежать пустой\n\tмассив. Это значит, что в коде обработки\n\tформы мы не попадем в первый <code class=\"code inline\">if</code>, проверяющий\n\tотправку формы.\n</p>\n<p>\n\tДля решения проблемы используют специальный\n\tприем: создают скрытый инпут с таким же именем,\n\tкак и у нашего чекбокса. При этом значением\n\tскрытого инпута ставят ноль, а чебокса - единицу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"hidden\" name=\"flag\" value=\"0\"&gt;\n\t&lt;input type=\"checkbox\" name=\"flag\" value=\"1\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tВ таком случае получится следующее. Если\n\tчекбокс не отмечен, то на сервер отправится\n\tтолько значение скрытого инпута. Если же\n\tчекбокс отмечен, то на сервер отправятся\n\tоба значения с одним именем. Но, так как\n\tзначение чекбокса будет вторым, то оно просто\n\tзатрет первое.\n</p>\n<p>\n\tИтак, теперь наша чекбокс будет отправлять\n\tна сервер или ноль, или один:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tvar_dump($_GET['flag']); // '0' или '1'\n?&gt;</code>\n</div>\n<p>\n\tИспользуем это в нашей проверке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_GET)) {\n\t\tif ($_GET['flag'] === '1') {\n\t\t\techo 'отмечен';\n\t\t} else {\n\t\t\techo 'не отмечен';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью флажка спросите у пользователя,\n\t\tесть ему уже <code class=\"number inline\">18</code> лет или нет. Если\n\t\tесть, разрешите ему доступ на сайт, а если\n\t\tнет - не разрешите.\n\t</p>\n</div>\n\n<h2>Сохранение значения после отправки</h2>\n<p>\n\tДавайте теперь сделаем так, чтобы значение\n\tчекбокса сохранялось после отправки. Для\n\tэтого проверим, что <code class=\"code inline\">$_GET['flag']</code>\n\tсуществует (то есть была отправка формы)\n\tи равен единице (то есть флажок отмечен).\n</p>\n<p>\n\tЕсли эти два условия выполняются, то выведем\n\tв чекбоксе атрибут <code class=\"code inline\">checked</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"hidden\" name=\"flag\" value=\"0\"&gt;\n\t&lt;input\n\t\ttype=\"checkbox\"\n\t\tname=\"flag\" &lt;?php\n\t\t\tif (isset($_GET['flag']) and $_GET['flag'] === '1')\n\t\t\t\techo 'checked';\n\t\t\t?&gt;\n\t\t&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПроверку можно упростить, если мы точно знаем,\n\tчто скрытый инпут передает <code class=\"number inline\">0</code>. В таком\n\tслучае, если чекбокс не отмечен, то в <code class=\"code inline\">$_GET['flag']</code>\n\tбудет лежать <code class=\"string inline\">'0'</code>, а если отправки\n\tформы еще не было, то будет лежать <code class=\"code inline\">null</code>.\n</p>\n<p>\n\tВ обоих этих случаях мы не должны выводить\n\t<code class=\"code inline\">checked</code>. И оба этих случая мы можем\n\tпоймать функцией <code class=\"code inline\">empty</code>. Таким образом\n\tмы можем проверить, что <code class=\"code inline\">$_GET['flag']</code>\n\tне пуст, и только в этом случае вывести <code class=\"code inline\">checked</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"hidden\" name=\"flag\" value=\"0\"&gt;\n\t&lt;input\n\t\ttype=\"checkbox\"\n\t\tname=\"flag\"\n\t\tvalue=\"1\"\n\t\t&lt;?php if (!empty($_GET['flag'])) echo 'checked' ?&gt;\n\t&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте три чекбокса, которые будут сохранять\n\t\tсвое значение после отправки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/radio/","content":"\n\t\t\t\t<h1>Радиокнопки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся работать с <a href=\"/ru/markup/manual/html/tag/input/radio/\"><code class=\"code inline\">radio</code></a>\n\tв PHP. Сделаем несколько переключателей в\n\tнашей форме:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"1\"&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"2\"&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"3\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПосле отправки формы в <code class=\"code inline\">$_GET</code> переключателя\n\tбудет содержаться значение атрибута <code class=\"code inline\">value</code>\n\tотмеченного переключателя, либо <code class=\"code inline\">null</code>,\n\tесли ничего не было отмечено:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tvar_dump($_GET['radio']); // '1', '2', '3' или null\n?&gt;</code>\n</div>\n<p>\n\tПри работе с радио возникают та же проблема,\n\tчто и в чекбоксах. Для решения этой проблемы\n\tдавайте добавим скрытый инпут:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"hidden\" name=\"radio\" value=\"0\"&gt;\n\t&lt;input type=\"radio\"  name=\"radio\" value=\"1\"&gt;\n\t&lt;input type=\"radio\"  name=\"radio\" value=\"2\"&gt;\n\t&lt;input type=\"radio\"  name=\"radio\" value=\"3\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tМожно также не вводить скрытый инпут, а сделать\n\tодин из переключателей отмеченным по умолчанию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"1\" checked&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"2\"&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"3\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью двух переключателей спросите у\n\t\tпользователя его пол. Выведите результат на экран.\n\t</p>\n</div>\n\n<h2>Сохранение после отправки</h2>\n<p>\n\tДавайте напишем код, который будет сохранять\n\tотмеченный переключатель после отправки формы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"1\" &lt;?php\n\t\tif (!empty($_GET['radio']) and $_GET['radio'] === '1') {\n\t\t\techo 'checked';\n\t\t}\n\t?&gt;&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"2\" &lt;?php\n\t\tif (!empty($_GET['radio']) and $_GET['radio'] === '2') {\n\t\t\techo 'checked';\n\t\t}\n\t?&gt;&gt;\n\t&lt;input type=\"radio\" name=\"radio\" value=\"3\" &lt;?php\n\t\tif (!empty($_GET['radio']) and $_GET['radio'] === '3') {\n\t\t\techo 'checked';\n\t\t}\n\t?&gt;&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью переключателей попросите пользователя\n\t\tвыбрать его язык. Сделайте так, чтобы выбор\n\t\tне пропадал после отправки формы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/select/","content":"\n\t\t\t\t<h1>Селекты в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся работать с тегом\n\t<a href=\"/ru/markup/manual/html/tag/select/\"><code class=\"code inline\">select</code></a>\n\tв PHP. Сделаем такой выпадающий список в\n\tнашей форме:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;select name=\"test\"&gt;\n\t\t&lt;option&gt;item1&lt;/option&gt;\n\t\t&lt;option&gt;item2&lt;/option&gt;\n\t\t&lt;option&gt;item3&lt;/option&gt;\n\t&lt;/select&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПосле отправки формы в <code class=\"code inline\">$_GET</code> селекта\n\tбудет содержаться значение выбранного тега\n\t<code class=\"code inline\">option</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tvar_dump($_GET['test']); // 'item1', 'item2' или 'item3'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью выпадающего списка предложите пользователю\n\t\tвыбрать страну, в которой он живет.\n\t</p>\n</div>\n\n<h2>Атрибут value</h2>\n<p>\n\tДавайте для пунктов списка укажем атрибут\n\t<code class=\"code inline\">value</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;select name=\"test\"&gt;\n\t\t&lt;option value=\"1\"&gt;item1&lt;/option&gt;\n\t\t&lt;option value=\"2\"&gt;item2&lt;/option&gt;\n\t\t&lt;option value=\"3\"&gt;item3&lt;/option&gt;\n\t&lt;/select&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tВ этом случае на сервер будет отправляться\n\tименно значение этого атрибута:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tvar_dump($_GET['test']); // '1', '2' или '3'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОбъясните, чем удобнее такой подход.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью выпадающего списка попросите пользователя\n\t\tвыбрать его язык.\n\t</p>\n</div>\n\n<h2>Сохранение значения после отправки</h2>\n<p>\n\tДавайте сделаем так, чтобы выбор пользователя\n\tсохранялся после отправки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"GET\"&gt;\n\t&lt;select name=\"test\"&gt;\n\t\t&lt;option value=\"1\" &lt;?php\n\t\t\tif (!empty($_GET['test']) and $_GET['test'] === '1') {\n\t\t\t\techo 'selected';\n\t\t\t}\n\t\t?&gt;&gt;item1&lt;/option&gt;\n\t\t&lt;option value=\"2\" &lt;?php\n\t\t\tif (!empty($_GET['test']) and $_GET['test'] === '2') {\n\t\t\t\techo 'selected';\n\t\t\t}\n\t\t?&gt;&gt;item2&lt;/option&gt;\n\t\t&lt;option value=\"3\" &lt;?php\n\t\t\tif (!empty($_GET['test']) and $_GET['test'] === '3') {\n\t\t\t\techo 'selected';\n\t\t\t}\n\t\t?&gt;&gt;item3&lt;/option&gt;\n\t&lt;/select&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tвыбранное значение не исчезало после отправки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/get-queries/","content":"\n\t\t\t\t<h1>GET запросы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВы уже знаете, что при отправке формы методом\n\t<code class=\"sql inline\">GET</code> в адресной строке браузера после\n\tзнака <code class=\"string inline\">?</code> появляются данные формы. Эти\n\tданные в PHP коде будут доступны в массиве\n\t<code class=\"code inline\">$_GET</code>.\n</p>\n<p>\n\tНа самом деле наличие формы на страницы является\n\tне обязательным - мы можем просто руками\n\tнаписать в адресной строке знак вопроса,\n\tпосле него перечислить параметры с их значениями\n\tи нажать энтер.\n</p>\n<p>\n\tВ этом случае введенные нами данные также\n\tбудут доступны в массиве <code class=\"code inline\">$_GET</code>. То\n\tесть получится имитация отправки формы. Такая\n\tимитация называется <dfn>отправить <code class=\"sql inline\">GET</code>\n\tзапрос</dfn>. Такие слова означают, что мы\n\tдолжны руками вбить в адресную строку вопросик\n\tи параметры запроса.\n</p>\n<p>\n\tПараметры запроса перечисляются в следующем\n\tформате: имя, затем знак равно, затем значение\n\tпараметра. Если параметров несколько, то\n\tони разделяются знаком амперсанд <code class=\"code inline\">&</code>.\n</p>\n<p>\n\tДавайте попробуем на примерах. Пусть у вас\n\tесть некоторый PHP файл. Обратитесь к нему\n\tв браузере, как вы обычно это делаете. А\n\tзатем добавьте в конец адресной строки <code class=\"path inline\">?par1=1</code>\n\tи нажмите энтер.\n</p>\n<p>\n\tВ результате наш параметр будет содержаться\n\tв <code class=\"code inline\">$_GET['par1']</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $_GET['par1']; // выведет '1'\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь отправим не один параметр,\n\tа два. Для этого добавьте в конец адресной\n\tстроки это: <code class=\"path inline\">?par1=1&par2=2</code> и нажмите\n\tэнтер. Вот, что получится в результате:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($_GET); // ['par1' =&gt; '1', 'par2' =&gt; '2']\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтправьте с помощью <code class=\"sql inline\">GET</code>-запроса число.\n\t\tВыведите его на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтправьте с помощью <code class=\"sql inline\">GET</code>-запроса число.\n\t\tВыведите его на экран квадрат этого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтправьте с помощью <code class=\"sql inline\">GET</code>-запроса два\n\t\tчисла. Выведите его на экран сумму этих чисел.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть с помощью <code class=\"sql inline\">GET</code>-запроса отправляется\n\t\tчисло. Сделайте так, чтобы если передано\n\t\tчисло 1 - на экран вывелось слово <code class=\"string inline\">'hello'</code>,\n\t\tа если 2 - то слово <code class=\"string inline\">'bye'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = ['a', 'b', 'c', 'd', 'e'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПусть с помощью <code class=\"sql inline\">GET</code>-запроса можно\n\t\tпередать число. Сделайте так, чтобы на экран\n\t\tвывелся элемент массива с переданным в запросе\n\t\tномером.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/get-queries-links/","content":"\n\t\t\t\t<h1>GET запросы с помощью ссылок в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ реальном мире, конечно же, пользователи\n\tвашего сайта не будут отправлять <code class=\"sql inline\">GET</code>\n\tзапросы вручную через адресную строку.\n</p>\n<p>\n\tДля этого мы будем предоставлять им ссылки,\n\tсодержащие параметры <code class=\"sql inline\">GET</code> запроса.\n\tПользователи будут переходить по ссылкам\n\tи автоматически отправлять <code class=\"sql inline\">GET</code> запросы.\n</p>\n<p>\n\tДавайте посмотрим на примерах. При переходе\n\tпо следующей ссылке мы попадем на страницу\n\t<code class=\"path inline\">index.php</code>, отправив <code class=\"sql inline\">GET</code> параметры:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;a href=\"index.php?par1=1&par2=2\"&gt;ссылка&lt;/a&gt;</code>\n</div>\n<p>\n\tСаму страницу в ссылке можно и не указывать,\n\tа просто начать адрес со знака <code class=\"string inline\">?</code>.\n\tВ этом случае при переходе по ссылке мы вернемся\n\tна текущую страницу, но с <code class=\"sql inline\">GET</code> параметрами\n\tв адресной строке. Вот пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;a href=\"?par1=1&par2=2\"&gt;ссылка&lt;/a&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте три ссылки. Пусть первая передает\n\t\tчисло <code class=\"number inline\">1</code>, вторая - число <code class=\"number inline\">2</code>,\n\t\tтретья - число <code class=\"number inline\">3</code>. Сделайте так, чтобы\n\t\tпо нажатию на ссылку на экран выводилось ее число.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСформируйте в цикле <code class=\"number inline\">10</code> ссылок. Пусть\n\t\tкаждая ссылка передает свое число. Сделайте\n\t\tтак, чтобы по нажатию на ссылку на экран\n\t\tвыводилось ее число.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">$arr = ['a', 'b', 'c', 'd', 'e'];</code>\n\t</div>\n\t<p>\n\t\tСделайте так, чтобы с помощью <code class=\"sql inline\">GET</code>\n\t\tзапроса можно было вывести любой элемент\n\t\tэтого массива. Для этого с помощью цикла\n\t\t<code class=\"code inline\">foreach</code> сделайте ссылку для каждого\n\t\tэлемента массива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/forms/practicum/","content":"\n\t\t\t\t<h1>Практика по написанию простых скриптов PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tНапишите скрипт, который будет преобразовывать\n\t\tтемпературу из градусов Цельсия в градусы\n\t\tФарингейта. Для этого сделайте инпут и кнопку\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите скрипт, который будет считать факториал\n\t\tчисла. Само число вводится в инпут и после\n\t\tнажатия на кнопку пользователь должен увидеть\n\t\tрезультат.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут и кнопка. В инпут вводится число.\n\t\tПо нажатию на кнопку выведите список делителей\n\t\tэтого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны <code class=\"number inline\">2</code> инпута и кнопка. В инпуты вводятся\n\t\tчисла. По нажатию на кнопку выведите список\n\t\tобщих делителей этих двух чисел.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите скрипт, который будет находить корни\n\t\tквадратного уравнения. Для этого сделайте\n\t\t<code class=\"number inline\">3</code> инпута, в которые будут вводиться\n\t\tкоэффициенты уравнения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны <code class=\"number inline\">3</code> инпута. В них вводятся числа.\n\t\tПроверьте, что эти числа являются тройкой\n\t\tПифагора: квадрат самого большого числа должен\n\t\tбыть равен сумме квадратов двух остальных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут и кнопка. В этот инпут вводится\n\t\tдата рождения в формате <code class=\"string inline\">'01.12.1990'</code>.\n\t\tПо нажатию на кнопку выведите на экран сколько\n\t\tдней осталось до дня рождения пользователя.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан текстареа и кнопка. В текстареа вводится\n\t\tтекст. По нажатию на кнопку выведите количество\n\t\tслов и количество символов в тексте.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан текстареа и кнопка. В текстареа вводится\n\t\tтекст. По нажатию на кнопку нужно посчитать\n\t\tпроцентное содержание каждого символа в тексте.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны <code class=\"number inline\">3</code> селекта и кнопка. Первый селект\n\t\t- это дни от <code class=\"number inline\">1</code> до <code class=\"number inline\">31</code>, второй\n\t\tселект - это месяцы от января до декабря,\n\t\tа третий - это годы от <code class=\"number inline\">1990</code> до <code class=\"number inline\">2025</code>.\n\t\tС помощью этих селектов можно выбрать дату.\n\t\tПо нажатию на кнопку выведите на экран день\n\t\tнедели, соответствующий этой дате.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте скрипт-гороскоп. Внутри него хранится\n\t\tмассив гороскопов на несколько дней вперед\n\t\tдля каждого знака зодиака. По заходу на страницу\n\t\tспросите у пользователя дату рождения, определите\n\t\tего знак зодиака и выведите предсказание\n\t\tдля этого знака зодиака на текущий день.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/session/intro/","content":"\n\t\t\t\t<h1>Введение в сессии в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКогда мы видим страницу сайта в своем браузере,\n\tPHP скрипт этой страницы уже давно отработал\n\tи забыл о нас. Поэтому, если мы переходим\n\tс одной страницы сайта на другую - PHP скрипт\n\tне может запомнить данные с предыдущей страницы,\n\tнапример, значения переменных.\n</p>\n<p>\n\tОднако, такой механизм очень нужен, хотя\n\tбы для того, чтобы запоминать выбор пользователя\n\tили то, что пользователь был авторизован.\n</p>\n<p>\n\tВ PHP для хранения данных пользователя между\n\tстраницами сайта предназначены <dfn>сессии</dfn>.\n\tМы можем записывать какую-либо информацию\n\tв сессию и считывать ее оттуда в следующем\n\tзапуске этого или другого скрипта сайта.\n\tС помощью сессии можно реализовать авторизацию\n\tпользователей, корзину интернет-магазина и другое.\n</p>\n\n<h2>Инициализируем сессию</h2>\n<p>\n\tЧтобы записать что-то в сессию ее сначала\n\tнужно <dfn>инициализировать</dfn> с помощью функции\n\t<code class=\"code inline\">session_start</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n?&gt;</code>\n</div>\n<p>\n\tПосле инициализации мы можем записать что-нибудь\n\tв сессию или прочитать что-нибудь оттуда.\n\tЭто делается с помощью суперглобального массива\n\t<code class=\"code inline\">$_SESSION</code>.\n</p>\n<p>\n\tДавайте попробуем на практике. Сделаем файл\n\t<code class=\"path inline\">test1.php</code> и разместим в нем следующий код:\n</p>\n<div class=\"block\" data-file=\"test1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t$_SESSION['test'] = 'abcde'; // пишем в сессию\n?&gt;</code>\n</div>\n<p>\n\tА в файле <code class=\"path inline\">test2.php</code> - следующий код:\n</p>\n<div class=\"block\" data-file=\"test2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\techo $_SESSION['test']; // читаем из сессии\n?&gt;</code>\n</div>\n<p>\n\tТеперь для начала откройте в браузере файл\n\t<code class=\"path inline\">test1.php</code>, а потом <code class=\"path inline\">test2.php</code>.\n\tПри открытии второго файла в браузере выведется\n\tто, что было записано в сессию в первом файле.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСделайте два файла. При запуске первого файла\n\t\tзапишите в сессию два числа, а при запуске\n\t\tвторого файла - выведите на экран сумму этих\n\t\tчисел.\n\t</p>\n</div>\n\n<h2>Нюансы</h2>\n<p>\n\tСессия пользователя хранится на сервере.\n\tПри этом она живет не вечно, а всего около\n\tполучаса - если пользователь за это время\n\tне выполнил никаких обращений к сайту, то\n\tего сессия удалится и станет пустой.\n</p>\n\n<h2>Возможные проблемы</h2>\n<p>\n\tОсновная проблема при работе с сессией следующая:\n\tнельзя делать никакого вывода в браузер до\n\tокончания работы с сессиями, в противном\n\tслучае вы увидите следующую ошибку: <i>Warning:\n\tCannot send session cookie - headers already sent</i>.\n</p>\n<p>\n\tЧто такое вывод в браузер? Это любой символ\n\tдо <code class=\"code inline\">&lt;?php</code>, например, текст или тег,\n\tдаже пробел, а также сообщение об ошибке\n\tсо стороны PHP. Кроме того нельзя делать\n\tвыводы через <code class=\"code inline\">echo</code>, <code class=\"code inline\">var_dump</code>\n\tи <code class=\"code inline\">print_r</code>.\n</p>\n<p>\n\tКодировка вашего документа обязательно должна\n\tбыть <code class=\"code inline\">utf-8</code> без BOM. Если она будет\n\tпросто <code class=\"code inline\">utf-8</code>, то перед <code class=\"code inline\">&lt;?php</code>\n\tбудет вставлен спец. символ, характерный\n\tдля данной кодировки и сессии работать не будут.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/session/one-page/","content":"\n\t\t\t\t<h1>Использование сессий на одной странице в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке мы что-то записывали в\n\tсессию в одном файле, а прочитывали в другом.\n\tНа самом деле это не обязательно - можно\n\tделать это и в одном файле.\n</p>\n<p>\n\tНапример, можно сделать счетчик обновления\n\tстраницы пользователем сайта. Для этого при\n\tпервом заходе пользователя запишем в переменную\n\tсессии единицу, а при всех последующих заходах\n\tбудем увеличивать эту переменную на один:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (!isset($_SESSION['counter'])) {\n\t\t$_SESSION['counter'] = 1; // первый заход на страницу\n\t} else {\n\t\t$_SESSION['counter']++;   // последующие заходы\n\t}\n\t\n\techo $_SESSION['counter'];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в сессию время захода пользователя\n\t\tна сайт. При обновлении страницы выводите\n\t\tсколько секунд назад пользователь зашел на сайт.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/session/removing/","content":"\n\t\t\t\t<h1>Удаление сессий в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда нам может понадобится удалить какую\n\tнибудь переменную сессии, не затрагивая остальных.\n\tЭто делается с помощью функции <code class=\"code inline\">unset</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tunset($_SESSION['var']);\n?&gt;</code>\n</div>\n<p>\n\tПосле выполнения такого кода наша переменная\n\tстанет <code class=\"code inline\">null</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($_SESSION['var'); // выведет null\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВот код счетчика из предыдущего урока:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (!isset($_SESSION['counter'])) {\n\t\t$_SESSION['counter'] = 1;\n\t} else {\n\t\t$_SESSION['counter']++;\n\t}\n\t\n\techo $_SESSION['counter'];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tМодифицируйте этот код так, чтобы при достижении\n\t\tсчетчиком значения <code class=\"number inline\">10</code>, отсчет начинался\n\t\tсначала.\n\t</p>\n</div>\n\n<h2>Завершение всей сессии</h2>\n<p>\n\tЕсли же вам нужно удалить все переменные\n\tсессии для данного пользователя, то следует\n\tвоспользоваться функцией <code class=\"code inline\">session_destroy</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_destroy();\n?&gt;</code>\n</div>\n<div class=\"notice\">\n\t<p>\n\t\tУчтите, что эту функцию можно вызывать только\n\t\tтогда, когда сессия запущена через <code class=\"code inline\">session_start</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте страницу <code class=\"path inline\">logout.php</code>, при\n\t\tзаходе на которую будет завершаться сессия\n\t\tпользователя.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/session/forms/","content":"\n\t\t\t\t<h1>Сессии и формы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть два PHP файла. Давайте в\n\tфайле <code class=\"path inline\">test1.php</code> разместим форму, спрашивающую\n\tу пользователя два числа:\n</p>\n<div class=\"block\" data-file=\"test1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form method=\"GET\"&gt;\n\t&lt;input name=\"num1\"&gt;\n\t&lt;input name=\"num2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tВ этом же файле разместим код обработки формы.\n\tВ этом коде мы запишем данные инпутов в сессию:\n</p>\n<div class=\"block\" data-file=\"test1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (!empty($_GET)) {\n\t\t$_SESSION['num1'] = $_GET['num1'];\n\t\t$_SESSION['num2'] = $_GET['num2'];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВажный нюанс: в файле код обработки формы\n\tдолжен стоять до самой формы. Почему: потому\n\tчто в этом коде мы работаем с сессией, а\n\tзначит не должно быть никакого вывода на\n\tэкран до этого.\n</p>\n<p>\n\tДавайте теперь в файле <code class=\"path inline\">test2.php</code> найдем\n\tсумму чисел, сохраненных в сессии:\n</p>\n<div class=\"block\" data-file=\"test2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($_SESSION)) {\n\t\techo $_SESSION['num1'] + $_SESSION['num2'];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ какой последовательности это все должно\n\tработать? Сначала пользователь заходит на\n\tстраницу <code class=\"path inline\">test1.php</code>, заполняет форму\n\tи жмет на кнопку. После этого он опять попадает\n\tна <code class=\"path inline\">test1.php</code>, но уже с отправленными\n\tданными формы. При этом он попадает в условие,\n\tв котором мы пишем данные формы в сессию.\n</p>\n<p>\n\tЗатем пользователь должен вручную зайти на\n\tстраницу <code class=\"path inline\">test2.php</code> - и там он увидит\n\tсумму введенных чисел.\n</p>\n<p>\n\tВы можете спросить: зачем так мудрить? Ведь\n\tможно было сразу отправить форму на страницу\n\t<code class=\"path inline\">test2.php</code>. Дело в том, что в данном\n\tслучае удобство в том, что сама форма и код\n\tее обработки размещаются на одной странице.\n\tТакое, конечно же, удобно не всегда, но иногда\n\tбывает нужно.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tНа одной странице с помощью формы спросите\n\t\tу пользователя фамилию, имя и возраст. Запишите\n\t\tэти данные в сессию. При заходе на другую\n\t\tстраницу выведите эти данные на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/session/arrays/","content":"\n\t\t\t\t<h1>Запись массивов в сессии PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим код, сделанный нами в предыдущем уроке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_GET)) {\n\t\t$_SESSION['num1'] = $_GET['num1'];\n\t\t$_SESSION['num2'] = $_GET['num2'];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tНа самом деле можно было взять и записать\n\tвсе данные формы сразу в <code class=\"code inline\">$_SESSION</code>:\n</p>\n<div class=\"block\" data-file=\"test1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_GET)) {\n\t\t$_SESSION = $_GET;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА в файле <code class=\"path inline\">test2.php</code> сделать вот так:\n</p>\n<div class=\"block\" data-file=\"test2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_SESSION)) {\n\t\techo array_sum($_SESSION);\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПреимущество такого подхода в том, что наш\n\tкод будет работать независимо от количества\n\tинпутов в форме.\n</p>\n<p>\n\tЕсть, однако, и недостаток: перезаписывая\n\t<code class=\"code inline\">$_SESSION</code> мы затираем все данные,\n\tкоторые там ранее были. Мало ли что туда\n\tнаписал другой наш скрипт? А мы это удалим.\n</p>\n<p>\n\tДавайте поступим по-другому:\n</p>\n<div class=\"block\" data-file=\"test2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_GET)) {\n\t\t$_SESSION['nums'] = $_GET;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, в переменную сессии мы записали\n\tне одно какое-то значение, а целый массив.\n\tТеперь в файле <code class=\"path inline\">test2.php</code> можем найти\n\tсумму элементов этого массива:\n</p>\n<div class=\"block\" data-file=\"test2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_SESSION)) {\n\t\techo array_sum($_SESSION['nums']);\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНа одной странице с помощью формы спросите\n\t\tу пользователя имя, возраст, зарплату и еще\n\t\tчто-нибудь. Запишите эти данные в одну переменную\n\t\tсессии в виде массива. При заходе на другую\n\t\tстраницу переберите сохраненные данные циклом\n\t\tи выведите каждый элемент массива в своем\n\t\tтеге <code class=\"code inline\">li</code> тега <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/cookie/intro/","content":"\n\t\t\t\t<h1>Введение в работу с куками в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСуществует способ сохранения данных прямо\n\tв браузере пользователя. Это делается с помощью\n\tкук (<i>cookie</i>). Куки - это небольшие\n\tкусочки строк, которые хранятся в специальном\n\tместе в браузере. Каждая кука имеет свое\n\tимя, по которому эту куку можно записать\n\tи прочитать.\n</p>\n<p>\n\tДавайте посмотрим, как это делается. Для\n\tначала сделаем два PHP файла. В первом файле\n\tмы запишем куку, а во втором - прочитаем ее.\n</p>\n<p>\n\tЗапись кук делается с помощью функции <code class=\"code inline\">setcookie</code>,\n\tкоторая первым параметром принимает имя этой\n\tкуки, а вторым - значение. При этом запись\n\tкук нужно делать до любого вывода на экран\n\t(подобно сессиям).\n</p>\n<p>\n\tИтак, давайте в файле запишем куку с именем\n\t<code class=\"code inline\">test</code> и значением <code class=\"string inline\">'abcde'</code>:\n</p>\n<div class=\"block\" data-file=\"test1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', 'abcde');\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь во втором файле прочитаем\n\tнашу куку. Это делается с помощью массива\n\t<code class=\"code inline\">$_COOKIE</code>:\n</p>\n<div class=\"block\" data-file=\"test2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $_COOKIE['test']; // выведет 'abcde'\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ одном файле запишите куку, а в другом файле\n\t\tвыведите ее на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/cookie/one-page/","content":"\n\t\t\t\t<h1>Запись и чтение кук на одной странице в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь рассмотрим, как технически\n\tработает получение и установка кук.\n</p>\n<p>\n\tПусть некто заходит на сайт, переходя по\n\tссылке или просто вбивая адрес в адресную\n\tстроку. В этом случае браузер отправляет\n\tна сервер все куки данного сайта. И в PHP\n\tскрипте эти куки становятся доступны в массиве\n\t<code class=\"code inline\">$_COOKIE</code>.\n</p>\n<p>\n\tЗатем на сайте выполняется PHP скрипт, который\n\tможет вызывать функции <code class=\"code inline\">setcookie</code>,\n\tустанавливая куки. При этом вновь установленные\n\tкуки появятся в <code class=\"code inline\">$_COOKIE</code> только при\n\tследующем заходе пользователя на сайт.\n</p>\n<p>\n\tПосмотрим на примере. Давайте запишем через\n\t<code class=\"code inline\">setcookie</code> какую-то куку и сразу выведем\n\tее на экран. В этом случае при первом заходе\n\tв <code class=\"code inline\">$_COOKIE</code> для нашей куки будет <code class=\"code inline\">null</code>,\n\tа при уже обновлении страницы - значение куки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('str', 'eee');\n\tvar_dump($_COOKIE['str']); // сначала null, а потом 'eee'\n?&gt;</code>\n</div>\n\n<h2>Хитрый прием</h2>\n<p>\n\tДля того, чтобы установленная кука сразу\n\tпоявилась в массиве <code class=\"code inline\">$_COOKIE</code> можно\n\tиспользовать хитрый прием.\n</p>\n<p>\n\tСуть приема следующая: сначала установим\n\tкуку с помощью <code class=\"code inline\">setcookie</code>, а потом\n\tвручную запишем ее в массив <code class=\"code inline\">$_COOKIE</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('str', 'eee');\n\t$_COOKIE['str'] = 'eee';\n\t\n\tvar_dump($_COOKIE['str']); // сразу выведет 'eee'\n?&gt;</code>\n</div>\n<p>\n\tЧтобы кука каждый раз не отправлялась в браузер,\n\tможно запись куки сделать внутри условия.\n\tЕсли такой куки нет, то запишем ее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($_COOKIE['str'])) { // если куки нет\n\t\tsetcookie('str', 'eee');\n\t\t$_COOKIE['str'] = 'eee';\n\t}\n\t\n\techo $_COOKIE['str']; // выведет 'eee'\n?&gt;</code>\n</div>\n<p>\n\tДавайте обсудим как это работает. При первом\n\tзаходе на страницу мы попадем в <code class=\"code inline\">if</code>,\n\tустановим куку в браузер и сразу запишем\n\tв <code class=\"code inline\">$_COOKIE</code>. Далее через <code class=\"code inline\">echo</code>\n\tвыведется вручную записанное нами значение.\n</p>\n<p>\n\tПри следующих заходах на страницу мы не попадем\n\tв <code class=\"code inline\">if</code>, но в <code class=\"code inline\">$_COOKIE</code> будет содержаться\n\tнаша кука, уже пришедшая из браузера.\n</p>\n<p>\n\tТаким образом, и при первом заходе, и при\n\tпоследующих в <code class=\"code inline\">$_COOKIE</code> будет находится\n\tнаша кука.\n</p>\n\n<h2>Замечания</h2>\n<p>\n\tВ коде хитрого приема обе строчки кода важны\n\t- первая записывает куку в браузер, а вторая\n\t- добавляет <code class=\"code inline\">$_COOKIE</code> конкретно в данном\n\tзапуске PHP файла.\n</p>\n<p>\n\tТо есть, если просто записать что-то в массив\n\t<code class=\"code inline\">$_COOKIE</code>, это не запишет куку в браузер:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$_COOKIE['str'] = 'eee'; // в браузер не запишется\n?&gt;</code>\n</div>\n\n<h2>Применение</h2>\n<p>\n\tДавайте сделаем счетчик обновления страницы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($_COOKIE['counter'])) { // первый заход на страницу\n\t\tsetcookie('counter', 1);\n\t\t$_COOKIE['counter'] = 1;\n\t} else {\n\t\tsetcookie('counter', $_COOKIE['counter'] + 1);\n\t\t$_COOKIE['counter'] = $_COOKIE['counter'] + 1;\n\t}\n\t\n\techo $_COOKIE['counter'];\n?&gt;</code>\n</div>\n<p>\n\tМожно упростить код с помощью оператора <code class=\"code inline\">++</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($_COOKIE['counter'])) { // первый заход на страницу\n\t\tsetcookie('counter', 1);\n\t\t$_COOKIE['counter'] = 1;\n\t} else {\n\t\tsetcookie('counter', ++$_COOKIE['counter']);\n\t}\n\t\n\techo $_COOKIE['counter'];\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в куку момент времени захода пользователя\n\t\tна страницу. При обновлении страницы выведите\n\t\tна экран, сколько времени прошло с момента\n\t\tпервого захода на страницу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/cookie/living-time/","content":"\n\t\t\t\t<h1>Время жизни куки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВы уже знаете, что в куки нужно писать с\n\tпомощью функции <code class=\"code inline\">setcookie</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', 'abcde');\n?&gt;</code>\n</div>\n<p>\n\tОднако такие куки долго не живут - только\n\tдо закрытия браузера. Продлить время жизни\n\tкуки можно с помощью третьего параметра,\n\tкоторый принимает момент времени в формате\n\t<code class=\"code inline\">timestamp</code>. Как только этот момент\n\tнаступит - кука автоматически будет удалена\n\tбраузером.\n</p>\n<p>\n\tОднако устанавливать конкретный момент смерти\n\tкуки не очень удобно. Удобнее было бы установить\n\tкуку, например, на час от текущего момента,\n\tили на день, или на год.\n</p>\n<p>\n\tПоэтому третий параметр принято записывать\n\tтак: <i>настоящий момент времени + N секунд</i>.\n\tНастоящий момент времени в формате можно\n\tполучить с помощью функции <code class=\"code inline\">time</code>.\n</p>\n<p>\n\tДавайте для примера установим куку на один\n\tчас. Так как в часе <code class=\"number inline\">3600</code> секунд, то\n\tприбавим это число к текущему моменту:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', 'abcde', time() + 3600);\n?&gt;</code>\n</div>\n<p>\n\tПри установки кук обычно прописывают секунды\n\tв таком виде: <code class=\"expression\"><code class=\"number\">60</code> * <code class=\"number\">60</code></code> - это час, <code class=\"expression\"><code class=\"number\">60</code> \n\t* <code class=\"number\">60</code> * <code class=\"number\">24</code></code> - это сутки. Ну и так далее.\n\tДелается это для того, чтобы читающему ваш\n\tкод было очевидно, на какой промежуток времени\n\tустановлена кука.\n</p>\n<p>\n\tДавайте для примера установим куку на сутки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', 'abcde', time() + 60 * 60 * 24);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУстановите какую-нибудь куку на месяц.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУстановите какую-нибудь куку на год.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУстановите какую-нибудь куку на <code class=\"number inline\">10</code> лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/seance/cookie/removing/","content":"\n\t\t\t\t<h1>Удаление кук в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ PHP нет встроенного механизма для удаления\n\tкук. Поэтому удаляют куки хитрым способом\n\t- устанавливая время 'смерти' куки на текущий\n\tмомент:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', '', time());\n?&gt;</code>\n</div>\n<p>\n\tУдаление куки приведет к изменению <code class=\"code inline\">$_COOKIE</code>\n\tтолько после перезагрузки страницы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', '', time());\n\tvar_dump($_COOKIE['test']); // первый раз выведет значение куки\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите какую-нибудь куку. Обновите страницу\n\t\tи убедитесь, что она удалилась.\n\t</p>\n</div>\n\n<h2>Хитрый прием</h2>\n<p>\n\tДля того, чтобы при удалении куки сразу менялся\n\t<code class=\"code inline\">$_COOKIE</code> можно использовать уже известный\n\tнам хитрый прием:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsetcookie('test', '', time());\n\tunset($_COOKIE['test']);\n\t\n\tvar_dump($_COOKIE['test']);\n?&gt;</code>\n</div>\n<p>\n\tДобавим условие, чтобы каждый раз не удалять\n\tуже удаленную куку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (isset($_COOKIE['test'])) {\n\t\tsetcookie('test', '', time());\n\t\tunset($_COOKIE['test']);\n\t}\n\t\n\tvar_dump($_COOKIE['test']); // удалена\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите какую-нибудь куку с помощью хитрого\n\t\tприема. Убедитесь, что она будет удалена сразу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/file-reading-writing/","content":"\n\t\t\t\t<h1>Чтение и запись файла в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНачиная с данного урока, мы начнем учится\n\tработать с файловой системой. Для начала\n\tизучим простейшие операции чтения и записи файлов.\n</p>\n\n<h2>Чтение файла</h2>\n<p>\n\tФункция <code class=\"code inline\">file_get_contents</code> позволяет\n\tвыполнять чтение файла. Параметром функция\n\tпринимает имя файла, а своим результатом\n\tвозвращает текст этого файла.\n</p>\n<p>\n\tДавайте посмотрим на практике. Пусть у нас\n\tесть файл <code class=\"path inline\">index.php</code>, к которому мы\n\tобращаемся через браузер. Пусть также в этой\n\tже папке находится файл <code class=\"path inline\">test.txt</code>.\n</p>\n<p>\n\tДавайте прочитаем текст текстового файла\n\tи выведем этот текст на экран:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('test.txt');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть файлы <code class=\"path inline\">1.txt</code> и <code class=\"path inline\">2.txt</code>,\n\t\tв тексте которых записаны какие-то числа.\n\t\tНапишите скрипт, который выведет на экран\n\t\tсумму записанных в этих файлах чисел.\n\t</p>\n</div>\n\n<h2>Запись файла</h2>\n<p>\n\tДавайте теперь научимся записывать данные\n\tв файлы. Для этого предназначена функция\n\t<code class=\"code inline\">file_put_contents</code>, которая первым\n\tпараметром принимает путь к файлу, а вторым\n\t- текст, который мы хотим записать.\n</p>\n<p>\n\tДля примера давайте запишем какой-нибудь\n\tтекст в файл <code class=\"path inline\">test.txt</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfile_put_contents('test.txt', '!');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Найдите сумму этих\n\t\tчисел и результат запишите в файл <code class=\"path inline\">sum.txt</code>.\n\t</p>\n</div>\n\n<h2>Комбинация операций</h2>\n<p>\n\tЧтение и запись файлов можно комбинировать.\n\tДавайте для примера прочитаем файл, добавим\n\tв конец его текста восклицательный знак и\n\tзапишем текст обратно в этот файл:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">$text = file_get_contents('test.txt');\nfile_put_contents('test.txt', $text . '!');</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть файл, в котором записано\n\t\tнекоторое число. Откройте этот файл, возведите\n\t\tчисло в квадрат и запишите обратно в файл.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит файл <code class=\"path inline\">count.txt</code>.\n\t\tИзначально в нем записано число <code class=\"number inline\">0</code>.\n\t\tСделайте так, чтобы при обновлении страницы\n\t\tнаш скрипт каждый раз увеличивал это число\n\t\tна <code class=\"number inline\">1</code>. То есть у нас получится счетчик\n\t\tобновления страницы в виде файла.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежат файлы <code class=\"path inline\">1.txt</code>,\n\t\t<code class=\"path inline\">2.txt</code> и <code class=\"path inline\">3.txt</code>. Вручную сделайте\n\t\tмассив с именами этих файлов. Переберите\n\t\tего циклом, прочитайте содержимое каждого\n\t\tиз файлов, слейте его в одну строку и запишите\n\t\tв новый файл <code class=\"path inline\">new.txt</code>. Изначально этого\n\t\tфайла не должно быть.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/relative-paths/","content":"\n\t\t\t\t<h1>Относительные пути в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, в параметр функции <code class=\"code inline\">file_get_contents</code>\n\tследует писать имя файла. Это, однако, работает\n\tтолько в том случае, если читаемый файл лежит\n\tв той же папке, в которой запускается наш скрипт.\n</p>\n<p>\n\tЕсли же файл лежит в другом месте, то в параметр\n\tфункции нужно писать путь к этому файлу.\n</p>\n<p>\n\tПосмотрим на примере.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПусть у нас есть следующая структура файлов:\n</p>\n<div class=\"block\"><ul class=\"structure\"><li class=\"file\">index.php</li><li class=\"dir\">/directory/<ul><li class=\"file\">test.txt</li></ul></li></ul></div>\n<p>\n\tДавайте прочитаем содержимое текстового файла.\n\tДля этого кроме имени файла нам понадобится\n\tуказать еще и папку, в которой он лежит:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('directory/test.txt');\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПусть у нас есть следующая структура файлов:\n</p>\n<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script/<ul><li class=\"file\">index.php</li></ul></li><li class=\"file\">test.txt</li></ul></div>\n<p>\n\tВ таком случае попытка прочитать наш файл,\n\tуказав в качестве пути его имя, закончится\n\tошибкой:\n</p>\n<div class=\"block\" data-file=\"script/index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('test.txt'); // выдаст ошибку\n?&gt;</code>\n</div>\n<p>\n\tПочему выдается ошибка? Дело в том, что мы\n\tв параметр функции написали имя файла. Это\n\tзначит, что читаемый файл должен размещаться\n\tв той же папке, что и запускаемый.\n</p>\n<p>\n\tОднако, наш читаемый файл находится на уровень\n\tвыше, то есть в той папке, которая содержит\n\tпапку со скриптом.\n</p>\n<p>\n\tВ таком случае мы должны явно указать в пути\n\tк файлу, что этот файл нужно искать на уровень\n\tвыше. Для этого перед именем файла следует\n\tнаписать <code class=\"path inline\">../</code>. Сделаем это:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('../test.txt'); // файл будет прочитан\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПусть у нас есть следующая структура файлов:\n</p>\n<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script/<ul><li class=\"file\">index.php</li></ul></li><li class=\"dir\">/directory/<ul><li class=\"file\">test.txt</li></ul></li></ul></div>\n<p>\n\tВ этом случае при чтении файла мы сначала\n\tвыйдем на уровень выше, а затем укажем путь\n\tк нашему файлу относительно этого уровня:\n</p>\n<div class=\"block\" data-file=\"script/index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('../directory/test.txt');\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПусть у нас есть следующая структура файлов:\n</p>\n<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script/<ul><li class=\"dir\">/test/<ul><li class=\"file\">index.php</li></ul></li></ul></li><li class=\"dir\">/directory/<ul><li class=\"file\">test.txt</li></ul></li></ul></div>\n<p>\n\tВ этом случае нам потребуется выйти наверх\n\tдва раза:\n</p>\n<div class=\"block\" data-file=\"script/test/index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('../../directory/test.txt');\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который прочитает содержимое\n\t\tтекстового файла:\n\t</p>\n\t<div class=\"block\"><ul class=\"structure\"><li class=\"file\">index.php</li><li class=\"dir\">/dir1/<ul><li class=\"dir\">/dir2/<ul><li class=\"file\">test.txt</li></ul></li></ul></li></ul></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который прочитает содержимое\n\t\tтекстового файла:\n\t</p>\n\t<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script/<ul><li class=\"file\">index.php</li></ul></li><li class=\"dir\">/dir1/<ul><li class=\"dir\">/dir2/<ul><li class=\"file\">test.txt</li></ul></li></ul></li></ul></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который прочитает содержимое\n\t\tтекстового файла:\n\t</p>\n\t<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script1/<ul><li class=\"dir\">/script2/<ul><li class=\"file\">index.php</li></ul></li></ul></li><li class=\"dir\">/dir/<ul><li class=\"file\">test.txt</li></ul></li></ul></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который прочитает содержимое\n\t\tтекстового файла:\n\t</p>\n\t<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script1/<ul><li class=\"dir\">/script2/<ul><li class=\"dir\">/script3/<ul><li class=\"file\">index.php</li></ul></li></ul></li></ul></li><li class=\"dir\">/dir1/<ul><li class=\"dir\">/dir2/<ul><li class=\"dir\">/dir3/<ul><li class=\"file\">test.txt</li></ul></li></ul></li></ul></li></ul></div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/absolute-paths/","content":"\n\t\t\t\t<h1>Абсолютные пути в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте прочитаем текстовый файл, находящийся\n\tв папке с нашим скриптом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('test.txt');\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь в начале пути поставим слеш:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('/test.txt');\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае путь станет не относительным,\n\tа абсолютным. При этом наш файл будет искаться\n\tот корня операционной системы. Конечно же,\n\tфайла по такому пути не найдется, так как\n\tон расположен в папке с нашем сайтом.\n</p>\n<p>\n\tМы можем получить путь от корня операционной\n\tсистемы до папки с нашим сайтом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $_SERVER['DOCUMENT_ROOT'];\n?&gt;</code>\n</div>\n<p>\n\tМожем добавить полученный путь к имени искомого\n\tфайла - и получим правильный абсолютный путь\n\tк нашему файлу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents($_SERVER['DOCUMENT_ROOT'] . '/test.txt');\n?&gt;</code>\n</div>\n\n<h2>Преимущества</h2>\n<p>\n\tИспользование абсолютного пути удобно, когда\n\tфайл с нашим скриптом и прочитываемый файл\n\tнаходятся в подпапках нашего сайта.\n</p>\n<p>\n\tДавайте посмотрим на примере. Пусть у нас\n\tесть следующая структура файлов:\n</p>\n<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script/<ul><li class=\"file\">index.php</li></ul></li><li class=\"dir\">/directory/<ul><li class=\"file\">test.txt</li></ul></li></ul></div>\n<p>\n\tПрочитаем наш файл, используя относительный путь:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo file_get_contents('../directory/test.txt');\n?&gt;</code>\n</div>\n<p>\n\tА теперь прочитаем наш файл, используя абсолютный\n\tпуть:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$root = $_SERVER['DOCUMENT_ROOT'];\n\techo file_get_contents($root . '/directory/test.txt');\n?&gt;</code>\n</div>\n<p>\n\tВо втором случае, даже если мы переместим\n\tфайл со скриптом в другое место, путь к файлу\n\tне придется менять, ведь он задается от корня\n\tсайта.\n</p>\n\n<h2>Папка и файл скрипта</h2>\n<p>\n\tИногда нам нужно получить не путь к корню\n\tсайта, а путь к папке со скриптом.\n</p>\n<p>\n\tЭто будут разные пути в том случае, если\n\tзапускаемый скрипт находится не в корне сайта,\n\tа в подпапке, например, так:\n</p>\n<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script/<ul><li class=\"file\">index.php</li></ul></li></ul></div>\n<p>\n\tВ этом случае путь к папке со скриптом находится\n\tв константе <code class=\"sql inline\">__DIR__</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo __DIR__;\n?&gt;</code>\n</div>\n<p>\n\tМожно также получить путь к самому файлу\n\tскрипта с помощью константы <code class=\"sql inline\">__FILE__</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo __FILE__;\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который прочитает содержимое\n\t\tтекстового файла:\n\t</p>\n\t<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script1/<ul><li class=\"dir\">/script2/<ul><li class=\"file\">index.php</li></ul></li></ul></li><li class=\"dir\">/dir/<ul><li class=\"file\">test.txt</li></ul></li></ul></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите код, который прочитает содержимое\n\t\tтекстового файла:\n\t</p>\n\t<div class=\"block\"><ul class=\"structure\"><li class=\"dir\">/script1/<ul><li class=\"dir\">/script2/<ul><li class=\"dir\">/script3/<ul><li class=\"file\">index.php</li></ul></li></ul></li></ul></li><li class=\"dir\">/dir1/<ul><li class=\"dir\">/dir2/<ul><li class=\"dir\">/dir3/<ul><li class=\"file\">test.txt</li></ul></li></ul></li></ul></li></ul></div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/files-operations/","content":"\n\t\t\t\t<h1>Операции над файлами в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<h2>Переименовывание</h2>\n<p>\n\tФункция <code class=\"code inline\">rename</code> позволяет переименовывать\n\tфайлы. Первым параметром указываем старое\n\tимя файла, вторым - новое имя файла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trename('test.txt', 'new.txt');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит файл <code class=\"path inline\">old.txt</code>.\n\t\tПереименуйте его на <code class=\"path inline\">new.txt</code>.\n\t</p>\n</div>\n\n<h2>Перемещение</h2>\n<p>\n\tФункция <code class=\"code inline\">rename</code> позволяет также перемещать\n\tфайлы. Для этого вторым параметром функции\n\tнужно указать новый путь к файлу. Давайте\n\tдля примера перенесем наш файл в папку <code class=\"path inline\">dir</code>,\n\tодновременно переименовав его на <code class=\"path inline\">new.txt</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trename('test.txt', 'dir/new.txt');\n?&gt;</code>\n</div>\n<p>\n\tМожно сделать только перемещение, а сам файл\n\tне переименовывать:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trename('test.txt', 'dir/test.txt');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит файл <code class=\"path inline\">file.txt</code>.\n\t\tПусть также в корне вашего сайта лежит папка\n\t\t<code class=\"path inline\">dir</code>. Переместите файл в эту папку.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит папка <code class=\"path inline\">dir1</code>,\n\t\tа в ней файл <code class=\"path inline\">file.txt</code>. Пусть также\n\t\tв корне вашего сайта лежит папка <code class=\"path inline\">dir2</code>.\n\t\tПереместите файл в эту папку.\n\t</p>\n</div>\n\n<h2>Копирование</h2>\n<p>\n\tФункция <code class=\"code inline\">copy</code> позволяет копировать\n\tфайл. Первым параметром она принимает путь\n\tк файлу, который хотим копировать, вторым\n\t- новый путь файла, куда хотим положить копию.\n\tМы можем сделать копию и положить ее рядом,\n\tили положить ее в другую папку. Сделаем просто\n\tкопию:\n</p>\n<p>\n\tДавайте для примера сделаем копию файла,\n\tразместив ее в папке с исходным файлом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tcopy('test.txt', 'copy.txt');\n?&gt;</code>\n</div>\n<p>\n\tА теперь давайте поместим нашу копию в папку\n\t<code class=\"path inline\">dir</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">copy('test.txt', 'dir/copy.txt');</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит файл. С\n\t\tпомощью цикла положите в папку <code class=\"path inline\">copy</code>\n\t\tпять копий этого файла. Именем файлов копий\n\t\tпусть будут их порядковые номера.\n\t</p>\n</div>\n\n<h2>Удаление</h2>\n<p>\n\tДля удаления файлов используется функция\n\t<code class=\"code inline\">unlink</code>. Параметром она принимает путь\n\tк удаляемому файлу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tunlink('test.txt');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежат файлы <code class=\"path inline\">1.txt</code>,\n\t\t<code class=\"path inline\">2.txt</code> и <code class=\"path inline\">3.txt</code>. Вручную сделайте\n\t\tмассив с именами этих файлов. Переберите\n\t\tего циклом и удалите все эти файлы.\n\t</p>\n</div>\n\n<h2>Размер файла</h2>\n<p>\n\tФункция <code class=\"code inline\">filesize</code> позволяет находить\n\tразмеры файла в байтах. Пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo filesize('test.txt');\n?&gt;</code>\n</div>\n<p>\n\tРазмер в байтах легко можно перевести в килобайты:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo filesize('test.txt') / 1024;\n?&gt;</code>\n</div>\n<p>\n\tА теперь давайте переведем в мегабайты:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo filesize('test.txt') / (1024 * 1024);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит файл. Узнайте\n\t\tего размер, выведите на экран.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tразмер файла выводился в килобайтах.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПоложите в корень вашего сайта какую-нибудь\n\t\tкартинку размером более мегабайта. Узнайте\n\t\tразмер этого файла и переведите его в мегабайты.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПоложите в корень вашего сайта какой-нибудь\n\t\tфильм размером более гигабайта. Узнайте размер\n\t\tэтого файла и переведите его в гигабайты.\n\t</p>\n</div>\n\n<h2>Проверка существования</h2>\n<p>\n\tФункция <code class=\"code inline\">file_exists</code> проверяет существует\n\tли файл, путь к которому передан параметром.\n\tПример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">var_dump(file_exists('test.txt')); // true или false</code>\n</div>\n<p>\n\tКак правило, эта функция используется для\n\tтого, чтобы проверить наличие файла перед\n\tвыполнением операции над ним. Например, так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (file_exists('test.txt')) {\n\t\techo filesize('test.txt');\n\t} else {\n\t\techo 'файла не существует';\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, лежит ли в корне вашего сайта\n\t\tфайл <code class=\"code inline\">file.txt</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, лежит ли в корне вашего сайта\n\t\tфайл <code class=\"code inline\">file.txt</code>. Если нет - создайте\n\t\tего и запишите в него текст <code class=\"string inline\">'!'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, лежит ли в корне вашего сайта\n\t\tфайл <code class=\"code inline\">message.txt</code>. Если такой файл\n\t\tесть - выведите текст этого файла на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/dirs-operations/","content":"\n\t\t\t\t<h1>Операции над папками в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tФункция <code class=\"code inline\">mkdir</code> позволяет создать папку.\n\tПараметром принимает путь к папке. Пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tmkdir('dir');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте в корне вашего сайта папку с названием\n\t\t<code class=\"path inline\">dir</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив со строками. Создайте в корне\n\t\tвашего сайта папки, названиями которых служат\n\t\tэлементы этого массива\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте в корне вашего сайта папку с названием\n\t\t<code class=\"path inline\">test</code>. Затем создайте в этой папке\n\t\tтри файла: <code class=\"path inline\">1.txt</code>, <code class=\"path inline\">2.txt</code>, <code class=\"path inline\">3.txt</code>.\n\t</p>\n</div>\n\n<h2>Удаление папок</h2>\n<p>\n\tФункция <code class=\"code inline\">rmdir</code> используется для удаления\n\tпапок. Пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trmdir('dir');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите папку с названием <code class=\"path inline\">test</code>.\n\t</p>\n</div>\n\n<h2>Переименование и перемещение папок</h2>\n<p>\n\tФункция <code class=\"code inline\">rename</code>, которую вы уже знаете,\n\tможет использоваться не только для работы\n\tс файлами, но и для папок.\n</p>\n<p>\n\tДавайте для примера переименуем одну папку\n\tна другую:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trename('old', 'new');\n?&gt;</code>\n</div>\n<p>\n\tА теперь выполним перемещение папки, одновременно\n\tпереименовав ее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trename('old', 'dir/new');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит папка <code class=\"path inline\">dir</code>.\n\t\tПереименуйте ее на <code class=\"path inline\">test</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/dir-reading/","content":"\n\t\t\t\t<h1>Чтение содержимого папки в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tФункция <code class=\"code inline\">scandir</code> позволяет посмотреть\n\tсодержимое папки и получить в виде массива\n\tимена находящихся в ней файлов и подпапок.\n\tПараметром функция принимает путь к файлу.\n</p>\n<p>\n\tПусть у нас для примера есть папка <code class=\"path inline\">dir</code>.\n\tПосмотрим на ее содержимое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$files = scandir('dir');\n\tvar_dump($files);\n?&gt;</code>\n</div>\n\n<h2>Важный нюанс</h2>\n<p>\n\tВ массиве с результатом функция <code class=\"code inline\">scandir</code>\n\tтакже покажет наличие папок с именами \"<code class=\"path inline\">..</code>\"\n\tи \"<code class=\"path inline\">.</code>\". Технически первое имя соответствует\n\tссылке на родительскую папку, а второе -\n\tна текущую.\n</p>\n<p>\n\tЭти имена лучше убрать из массива с результатом.\n\tДелается это следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$files = scandir('dir');\n\t$files = array_diff($files, ['..', '.']); \n\tvar_dump($files);\n?&gt;</code>\n</div>\n<p>\n\tМожно упростить:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$files = array_diff(scandir('dir'), ['..', '.']); \n\tvar_dump($files);\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит папка <code class=\"path inline\">dir</code>,\n\t\tа в ней какие-то текстовые файлы. Выведите\n\t\tна экран столбец имен этих файлов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит папка <code class=\"path inline\">dir</code>,\n\t\tа в ней какие-то текстовые файлы. Переберите\n\t\tэти файлы циклом и выведите их тексты в браузер.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в корне вашего сайта лежит папка <code class=\"path inline\">dir</code>,\n\t\tа в ней какие-то текстовые файлы. Переберите\n\t\tэти файлы циклом, откройте каждый из них\n\t\tи запишите в конец восклицательный знак.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/file-dir-distinguishing/","content":"\n\t\t\t\t<h1>Отличаем папку от файла в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у вас есть строка, содержащая путь\n\tк файлу или папке. С помощью специальных\n\tфункций <code class=\"code inline\">is_file</code> и <code class=\"code inline\">is_dir</code> мы\n\tможем отличить, ссылается путь на файл или\n\tна папку.\n</p>\n<p>\n\tОни работают следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$path = 'некий путь';\n\t\n\tvar_dump(is_file($path)); // true для файла, false для папки\n\tvar_dump(is_dir($path));  // true для папки, false для файла\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан путь. Если путь ведет к папке выведите\n\t\tсообщение об этом.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан путь. Если путь ведет к файлу выведите\n\t\tсообщение об этом.\n\t</p>\n</div>\n\n<h2>Разбираем содержимое папки</h2>\n<p>\n\tПусть у нас дана некоторая папка <code class=\"path inline\">dir</code>,\n\tсодержащая в себе как файлы, так и папки.\n</p>\n<p>\n\tДавайте получим массив имен из этой папки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$files = array_diff(scandir('dir'), ['..', '.']);\n?&gt;</code>\n</div>\n<p>\n\tДавайте для каждого имени проверим, это файл\n\tили папка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$files = array_diff(scandir('dir'), ['..', '.']);\n\t\n\tforeach ($files as $file) {\n\t\techo $file;\n\t\tvar_dump(is_file('dir/' . $file));\n\t}\n?&gt;</code>\n</div>\n<p>\n\tОбратите внимание на то, что имя папки, которую\n\tмы сканируем, написано в двух местах кода.\n\tЭто не очень удобно. Вынесем это имя в отдельную\n\tпеременную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$dir = 'dir';\n\t$files = array_diff(scandir($dir), ['..', '.']);\n\t\n\tforeach ($files as $file) {\n\t\techo $file;\n\t\tvar_dump(is_file($dir. '/' . $file));\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь для всех файлов выведем на\n\tэкран их содержимое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$dir = 'dir';\n\t$files = array_diff(scandir($dir), ['..', '.']);\n\t\n\tforeach ($files as $file) {\n\t\tif (is_file($dir. '/' . $file)) {\n\t\t\techo file_get_contents($dir. '/' . $file);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно заметить, что путь к файлу вычисляется\n\tдва раза. Давайте вынесем его в отдельную\n\tпеременную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$dir = 'dir';\n\t$files = array_diff(scandir($dir), ['..', '.']);\n\t\n\tforeach ($files as $file) {\n\t\t$path = $dir. '/' . $file; // путь к файлу\n\t\t\n\t\tif (is_file($path)) {\n\t\t\techo file_get_contents($path);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана папка. Выведите на экран столбец имен\n\t\tподпапок из этой папки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана папка. Выведите на экран столбец имен\n\t\tфайлов из этой папки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана папка. Запишите в конец каждого файла\n\t\tэтой папки текущий момент времени.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/include/","content":"\n\t\t\t\t<h1>Вставка файлов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть один файл:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 'index';\n?&gt;</code>\n</div>\n<p>\n\tПусть также есть второй файл:\n</p>\n<div class=\"block\" data-file=\"test.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo 'test';\n?&gt;</code>\n</div>\n<p>\n\tДавайте выполним вставку содержимого второго\n\tфайла в первый. Это делается с помощью оператора\n\t<code class=\"code inline\">include</code>:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tinclude 'test.php';\n\techo 'index';\n?&gt;</code>\n</div>\n<p>\n\tОдин и тот же файл можно вставлять сколько\n\tугодно раз:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tinclude 'test.php';\n\tinclude 'test.php';\n\tinclude 'test.php';\n\t\n\techo 'index';\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте файлы <code class=\"path inline\">file1.php</code>, <code class=\"path inline\">file2.php</code>,\n\t\t<code class=\"path inline\">file3.php</code>. Подключите их к вашему\n\t\tосновному файлу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/include-markup/","content":"\n\t\t\t\t<h1>Деление верстки на элементы в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВставка одного файла в другой часто используется\n\tдля того, чтобы разделять файлы с версткой\n\tна части. Это нужно для того, чтобы убрать\n\tповторяющиеся части HTML страниц в отдельные\n\tфайлы для удобства редактирования.\n</p>\n<p>\n\tПосмотрим на примере. Пусть у нас есть следующая\n\tстраница:\n</p>\n<div class=\"block\" data-file=\"page1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;page1&lt;/title&gt;\n\t\t&lt;meta charset=\"utf-8\"&gt;\n\t\t&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\ttext 1\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tИ еще одна:\n</p>\n<div class=\"block\" data-file=\"page2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;page2&lt;/title&gt;\n\t\t&lt;meta charset=\"utf-8\"&gt;\n\t\t&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\ttext 2\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tКак вы видите, в этих двух файла одинаковое\n\tсодержимое блока <code class=\"code inline\">head</code>. Вынесем его\n\tв отдельный файл:\n</p>\n<div class=\"block\" data-file=\"elem/head.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;\n&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;</code>\n</div>\n<p>\n\tПодключим этот файл к каждой из нашей страниц:\n</p>\n<div class=\"block\" data-file=\"page1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;page1&lt;/title&gt;\n\t\t&lt;?php include 'elem/head.php'; ?&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\ttext 1\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны файлы со следующей версткой:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;title&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;header&gt;\n\t\t\theader\n\t\t&lt;/header&gt;\n\t\t&lt;aside&gt;\n\t\t\tsidebar\n\t\t&lt;/aside&gt;\n\t\t&lt;main&gt;\n\t\t\tcontent\n\t\t&lt;/main&gt;\n\t\t&lt;header&gt;\n\t\t\tfooter\n\t\t&lt;/header&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n\t</div>\n\t<p>\n\t\tПусть верстка файлов отличается лишь тайтлами\n\t\tи контентом. Вынесите содержимое хедера,\n\t\tфутера и сайдбара в отдельные подключаемые файлы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/include-variable/","content":"\n\t\t\t\t<h1>Запись вставки в переменную в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторый файл:\n</p>\n<div class=\"block\" data-file=\"test.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;?= 'test' ?&gt;\n&lt;/div&gt;</code>\n</div>\n<p>\n\tДавайте в основном файле запишем текст нашего\n\tфайла в переменную:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = file_get_contents('test.php'); \n?&gt;</code>\n</div>\n<p>\n\tУ нас, однако, будет проблема - при записи\n\tв переменную PHP код нашего файла не будет\n\tвыполнен.\n</p>\n<p>\n\tДля того, чтобы PHP код вставляемого файла\n\tбыл выполнен, нужно использовать оператор\n\t<code class=\"code inline\">include</code>. Проблема, однако, в том,\n\tчто этот оператор сразу выводит данные на\n\tэкран, поэтому результат подключения не может\n\tбыть записан в переменную.\n</p>\n<p>\n\tНо это все-таки можно сделать, если использовать\n\tхитрый прием:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tob_start();\n\t\tinclude 'test.php'; \n\t$res = ob_get_clean(); \n?&gt;</code>\n</div>\n<p>\n\tОформим код приема в функцию:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction getFile($name) {\n\t\tob_start();\n\t\t\tinclude $name; \n\t\treturn ob_get_clean(); \n\t}\n?&gt;</code>\n</div>\n<p>\n\tВоспользуемся нашей функцией для получения\n\tфайла в переменную:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = getFile('test.php');\n\techo 'index' . $res;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте файл, который будет генерировать\n\t\tиз массива дней выпадающий список дней недели.\n\t\tЗапишите результат в переменную в вашем основном\n\t\tфайле. Выведите эту переменную в нескольких\n\t\tместах файла.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/require/","content":"\n\t\t\t\t<h1>Подключение файлов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть файл, в котором хранится\n\tнабор функций:\n</p>\n<div class=\"block\" data-file=\"functions.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction square($num) {\n\t\treturn $num ** 2;\n\t}\n\t\n\tfunction cube($num) {\n\t\treturn $num ** 3;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте сделаем так, чтобы функции из этого\n\tфайла были доступны в нашем основном файле.\n\tДля этого подключим файл с функциями с помощью\n\tоператора <code class=\"code inline\">require</code>:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trequire 'functions.php';\n?&gt;</code>\n</div>\n<p>\n\tПосле этого в нашем основном файле мы можем\n\tвоспользоваться функциями из подключенного файла:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trequire 'functions.php';\n\t\n\techo square(3) + cube(4);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте файл с полезным набором функций.\n\t\tПодключите его к вашему основному файлу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/require-once/","content":"\n\t\t\t\t<h1>Однократное подключение файлов в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть файл <code class=\"path inline\">pow.php</code>, в котором\n\tхранится набор функций:\n</p>\n<div class=\"block\" data-file=\"pow.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfunction square($num) {\n\t\treturn $num ** 2;\n\t}\n\t\n\tfunction cube() {\n\t\treturn $num ** 3;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть мы используем функции файла <code class=\"path inline\">pow.php</code>\n\tв файле <code class=\"path inline\">sum.php</code>:\n</p>\n<div class=\"block\" data-file=\"sum.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trequire 'pow.php';\n\t\n\tfunction squareSum($arr) {\n\t\t$res = 0;\n\t\t\n\t\tforeach ($arr as $elem) {\n\t\t\t$res += square($elem);\n\t\t}\n\t\t\n\t\treturn $res;\n\t}\n\t\n\tfunction cubeSum($arr) {\n\t\t$res = 0;\n\t\t\n\t\tforeach ($arr as $elem) {\n\t\t\t$res += cube($elem);\n\t\t}\n\t\t\n\t\treturn $res;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть в основном файле мы подключаем оба\n\tфайла с функциями:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trequire 'pow.php';\n\trequire 'sum.php';\n\t\n\techo square(3) + squareSum([1, 2, 3]);\n?&gt;</code>\n</div>\n<p>\n\tНас, однако, поджидает проблема. К файлу\n\t<code class=\"path inline\">index.php</code> файл <code class=\"path inline\">pow.php</code> будет\n\tподключен два раза: сам по себе и через файл\n\t<code class=\"path inline\">pow.php</code>.\n</p>\n<p>\n\tЭто приведет к проблеме, так как у нас будут\n\tдва набора функций с одинаковыми именами.\n</p>\n<p>\n\tДля решения проблемы следует подключать все\n\tфайлы через оператор <code class=\"code inline\">require_once</code>\n\t- он будет подключать файл только один раз,\n\tигнорируя повторный подключения:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trequire_once 'pow.php';\n\trequire_once 'sum.php';\n\t\n\techo square(3) + squareSum([1, 2, 3]);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте несколько файлов с полезными наборами\n\t\tфункций. Подключите эти файлы друг к другу\n\t\tи к вашему основному файлу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/file-system/require-variable/","content":"\n\t\t\t\t<h1>Запись подключения в переменную PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно сделать так, чтобы результат подключаемого\n\tможно было записать в переменную. Для этого\n\tподключаемый файл должен возвращать данные\n\tчерез <code class=\"code inline\">return</code>.\n</p>\n<p>\n\tПосмотрим на примере. Пусть наш файл возвращает\n\tмассив дней недели:\n</p>\n<div class=\"block\" data-file=\"week.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\treturn ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];\n?&gt;</code>\n</div>\n<p>\n\tДавайте подключим этот файл и результат подключения\n\tзапишем в переменную:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$week = require 'week.php';\n\tvar_dump($week);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте файл, который будет возвращать названия\n\t\tмесяцев. Подключите его в переменную в вашем\n\t\tосновном файле.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/intro/","content":"\n\t\t\t\t<h1>Введение в базы данных SQL в PHP для новичков</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tБаза данных (сокращенно БД) - это место,\n\tв котором хранятся данные сайта. Это могут\n\tбыть тексты страниц, списки пользователей\n\tс их логинами и паролями, каталоги продукции\n\tи другое.\n</p>\n<p>\n\tБаза данных состоит из <dfn>таблиц</dfn>. Что\n\tтакое таблица вы знаете из жизни: это строки\n\tи столбцы. А на пересечении строк и столбцов\n\tрасполагаются ячейки.\n</p>\n<p>\n\tВ базах данных столбцы часто называют <dfn>полями</dfn>,\n\tа строки - <dfn>записями</dfn>.\n</p>\n\n<h2>Язык SQL</h2>\n<p>\n\tСама база данных представляет собой некоторую\n\tпрограмму, хранящую в себе данные и позволяющую\n\tэти данные получать и изменять.\n</p>\n<p>\n\tПолучение и изменение данных происходит с\n\tпомощью <dfn>запросов</dfn>. Запросы представляют\n\tсобой команды, написанные на специальном\n\tязыке - SQL.\n</p>\n\n<h2>PHP и базы данных</h2>\n<p>\n\tРабота с базами данных через PHP не представляет\n\tособой сложности. Единственное, с чем могут\n\tвозникнуть проблемы - это долгий начальный\n\tподготовительный этап, который растянется\n\tна несколько уроков.\n</p>\n<p>\n\tНо, после того, как мы с вами все подготовим,\n\tдальше все станет значительно проще.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/phpmyadmin/","content":"\n\t\t\t\t<h1>Работа с базами данных через PhpMyAdmin</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля просмотра и редактирования содержимого\n\tбаз данных часто пользуются программой PhpMyAdmin\n\t(читается PHPмайадмин, часто пишут аббревиатуру\n\tPMA или ПМА).\n</p>\n<p>\n\tС помощью PMA вы можете создавать новые базы\n\tданных, создавать новые таблицы, просматривать\n\tи редактировать содержимое таблиц и другие\n\tполезные вещи.\n</p>\n<p>\n\tВ следующем видео я показываю вам основы\n\tработы с PMA: <a href=\"https://youtu.be/st9A8d4J6Js\"\n\ttarget=\"_blank\">youtu.be/st9A8d4J6Js</a>.\n\tПосмотрите это видео, а затем перейдите к\n\tрешению задач:\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте базу данных <code class=\"string inline\">test</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ ней создайте таблицу <code class=\"string inline\">users</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ этой таблице сделайте <code class=\"number inline\">4</code> поля (столбца):\n\t\t<code class=\"code inline\">id</code>, тип <code class=\"string inline\">integer</code>, <code class=\"code inline\">name</code>,\n\t\tтип <code class=\"string inline\">varchar</code>, <code class=\"number inline\">32</code> символа, <code class=\"code inline\">name</code>,\n\t\tтип <code class=\"string inline\">varchar</code>, <code class=\"number inline\">32</code> символа, <code class=\"code inline\">age</code>,\n\t\tтип <code class=\"string inline\">integer</code>, <code class=\"code inline\">birthday</code>, тип\n\t\t<code class=\"string inline\">date</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНайдите вкладку 'вставить' и с ее помощью\n\t\tвставьте несколько строк в эту таблицу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПоредактируйте какую-нибудь запись.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите какую-нибудь запись.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПоменяйте кодировку для таблицы и для всей\n\t\tбазы данных (на <code class=\"string inline\">utf8_general_ci</code>).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПереименуйте таблицу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПереименуйте базу данных.\n\t</p>\n</div>\n\n<!--\n<h2>AUTO_INCREMENT</h2>\n<p>\n\tОбратите внимание на то, что мы создали поле\n\t<code class=\"code inline\">id</code> и поставили ему галочку <code class=\"sql inline\">AUTO_INCREMENT</code>.\n\tЭто очень важный шаг!\n</p>\n<p>\n\tТеперь при вставке новой записи (строки)\n\tв таблицу это поле будет заполняться автоматически\n\tуникальным номером. При этом если мы удалим\n\tстроку с каким-то <code class=\"code inline\">id</code> (например <code class=\"number inline\">1</code>),\n\tто такого <code class=\"code inline\">id</code> больше никогда не будет.\n</p>\n<p>\n\tЗачем нужно поле <code class=\"code inline\">id</code>? Затем, чтобы\n\tмы всегда могли обратиться к конкретной строке\n\tпо ее <code class=\"code inline\">id</code>, например с целью удаления\n\tили редактирования.\n</p>\n\n<h2>Типы переменных</h2>\n<p>\n\tВ <code class=\"sql inline\">SQL</code> довольно много типов переменных,\n\tно чаще всего приходится пользоваться следующими:\n</p>\n<ul>\n\t<li>\n\t\t<code class=\"code inline\">integer</code> – целочисленный.\n\t</li>\n\t<li>\n\t\t<code class=\"code inline\">text</code> – большое текстовое поле.\n\t</li>\n\t<li>\n\t\t<code class=\"code inline\">varchar</code> – не очень большое текстовое поле, при этом мы должны задать его размер (он должен быть степенью двойки: <code class=\"number inline\">8</code>, <code class=\"number inline\">16</code>, <code class=\"number inline\">32</code>, <code class=\"number inline\">64</code>, <code class=\"number inline\">128</code>, <code class=\"number inline\">256</code> и т.д.).\n\t</li>\n\t<li>\n\t\t<code class=\"code inline\">date</code> - поле для хранения даты (дата хранится в SQL-формате: год-месяц-день, пример: <code class=\"number inline\">2013-06-24</code>).\n\t</li>\n</ul>\n\n<div class=\"task\">\n\t<p>\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/test-table-users/","content":"\n\t\t\t\t<h1>Тестовая таблица users</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас вам нужно сделать тестовую таблицу,\n\tна которой мы будем тренироваться в следующих\n\tуроках. Пусть эта таблица содержит в себе\n\tсписок работников: их имена, возраста и зарплаты:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>age</th>\n\t\t\t<th>salary</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>23</td>\n\t\t\t<td>400</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>25</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>23</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t\t<td>30</td>\n\t\t\t<td>900</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>user5</td>\n\t\t\t<td>27</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>user6</td>\n\t\t\t<td>28</td>\n\t\t\t<td>900</td>\n\t\t</tr>\n\t</table>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте базу данных <code class=\"string inline\">mydb</code>, а в ней\n\t\tтаблицу <code class=\"string inline\">users</code> с указанным выше содержимым.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте дамп этой таблицы, чтобы в дальнейшем\n\t\tвы могли ее легко восстановить.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/preparatory-manipulations/","content":"\n\t\t\t\t<h1>Подготовительные манипуляции для работы с SQL в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся работать с базами\n\tданных через PHP. Для этого прежде всего\n\tнеобходимо установить соединение с сервером\n\tбазы данных.\n</p>\n<p>\n\tДелается это с помощью функции <code class=\"code inline\">mysql_connect</code>,\n\tкоторая принимает <code class=\"number inline\">3</code> параметра: имя\n\tхоста (сервера), имя пользователя, под которым\n\tмы работаем с базой и пароль для этого пользователя.\n</p>\n<p>\n\tЕсли вы работаете на своем компьютере, то\n\tэто будут <code class=\"string inline\">localhost</code>, <code class=\"string inline\">root</code> и\n\tпароль в виде пустой строки (на некоторых\n\tсерверах он тоже может быть <code class=\"string inline\">root</code>).\n\tЕсли ваша база данных в интернете - то эти\n\tданные выдает вам хостинг.\n</p>\n<p>\n\tИтак, давайте установим соединение с базой данных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$host = 'localhost'; // имя хоста\n\t$user = 'root';      // имя пользователя\n\t$pass = '';          // пароль\n\t$name = 'mydb';      // имя базы данных\n\t\n\t$link = mysqli_connect($host, $user, $pass, $name);\n?&gt;</code>\n</div>\n<p>\n\tЕсли указанные нами доступы правильные, то\n\tустановится соединение к базе данных. При\n\tэтом в переменную <code class=\"code inline\">$link</code> запишется\n\tспециальный объект соединения, который мы\n\tбудем использовать в дальнейшем для всех\n\tобращений к нашей базе данных.\n</p>\n\n<h2>Посылаем запросы к базе данных</h2>\n<p>\n\tПосле соединения с базой к ней можно отправлять\n\tзапросы. Это делается с помощью функции <code class=\"code inline\">mysqli_query</code>.\n\tПервым параметром эта функция принимает принимает\n\tпеременную, в которую мы записали результат\n\t<code class=\"code inline\">mysqli_connect</code>, а вторым - строку\n\tс SQL запросом.\n</p>\n<p>\n\tК примеру, выполним запрос, который достанет\n\tвсе записи из таблицы <code class=\"string inline\">users</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = mysqli_query($link, 'SELECT * FROM users');\n?&gt;</code>\n</div>\n<p>\n\tТекст запроса не обязательно писать прямо\n\tв параметре функции <code class=\"code inline\">mysqli_query</code>.\n\tДавайте вынесем его в переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = 'SELECT * FROM users';\n\t$result = mysqli_query($link, $query);\n?&gt;</code>\n</div>\n\n<h2>Отлавливаем ошибки базы данных</h2>\n<p>\n\tКак вы уже знаете, в PHP вывод ошибок на\n\tэкран включается с помощью функции <code class=\"code inline\">error_reporting</code>.\n\tЭта функция, однако, не включает вывод ошибок,\n\tдопущенных в тексте SQL запроса.\n</p>\n<p>\n\tЧтобы вывести ошибки SQL команд, следует\n\tпользоваться функцией <code class=\"code inline\">mysqli_error</code>,\n\tкоторую необходимо добавлять к каждому запросу\n\tк БД, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = 'SELECT * FROM users';\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<p>\n\tПока не будем разбираться с тем, как работает\n\tэта конструкция. Просто добавляйте ее и,\n\tв случае ошибочного SQL запроса вы увидите\n\tсообщение об этом в окне браузера.\n</p>\n\n<h2>Тестируем работоспособность</h2>\n<p>\n\tДавайте теперь напишем тестовый код, который\n\tвы сможете запустить у себя, чтобы убедится\n\tв том, что у вас все подключилось верно.\n</p>\n<p>\n\tДля начала убедитесь, что у вас есть база\n\tданных <code class=\"string inline\">mydb</code>, а в ней таблица <code class=\"string inline\">users</code>,\n\tзаполненная какими-нибудь данными.\n</p>\n<p>\n\tЗатем запустите у себя следующий код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$host = 'localhost'; // имя хоста\n\t$user = 'root';      // имя пользователя\n\t$pass = '';          // пароль\n\t$name = 'mydb';      // имя базы данных\n\t\n\t$link = mysqli_connect($host, $user, $pass, $name);\n\t\n\t$query = 'SELECT * FROM users';\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\tvar_dump($result);\n?&gt;</code>\n</div>\n<p>\n\tЕсли на экране нет ошибок и вы видите результат\n\t<code class=\"code inline\">var_dump</code> - значит все хорошо. Если\n\tже есть какие-то ошибки - исправьте их и\n\tпопробуйте снова.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСкопируйте и запустите у себя приведенный\n\t\tтестовый код.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/encoding-problems/","content":"\n\t\t\t\t<h1>Проблемы с кодировками при работе с SQL в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак правило, если не сделать дополнительных\n\tдействий, то русский текст при получении\n\tиз базы данных будет выводится абракадаброй\n\tили вопросиками. Для избежания таких проблем\n\tследует описанных ниже правил.\n</p>\n\n<h2>Правило 1</h2>\n<p>\n\tБаза данных и таблицы в ней должны быть в\n\tкодировке <code class=\"string inline\">utf8_general_ci</code>.\n</p>\n\n<h2>Правило 2</h2>\n<p>\n\tСам PHP файл должен быть в кодировке <code class=\"string inline\">utf8</code>.\n</p>\n\n<h2>Правило 3</h2>\n<p>\n\tВ начале PHP файла должен быть следующий HTML тег:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;</code>\n</div>\n\n<h2>Правило 4</h2>\n<p>\n\tНа всякий случай сразу после команды <code class=\"code inline\">mysqli_connect</code>\n\tдобавьте такое запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tmysqli_query($link, \"SET NAMES 'utf8'\");\n?&gt;</code>\n</div>\n\n<h2>Дополненный тестовый код</h2>\n<p>\n\tВ предыдущем уроке я привел вам тестовый\n\tкод для проверки общей работоспособности.\n\tДавайте дополним его с учетом описанных правил\n\tдля работы с кодировками:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;meta charset=\"utf-8\"&gt;\n&lt;?php\n\t$host = 'localhost'; // имя хоста\n\t$user = 'root';      // имя пользователя\n\t$pass = '';          // пароль\n\t$name = 'mydb';      // имя базы данных\n\t\n\t$link = mysqli_connect($host, $user, $pass, $name);\n\tmysqli_query($link, \"SET NAMES 'utf8'\");\n\t\n\t$query = 'SELECT * FROM users';\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\tvar_dump($result);\n?&gt;</code>\n</div>\n<p>\n\tВ следующих уроках я для краткости не буду\n\tприводить весь этот код, а буду показывать\n\tтолько код отправки запросов. Но вы имейте\n\tввиду, что у вас должен быть полный код.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/result-getting/","content":"\n\t\t\t\t<h1>Получение результата при SQL запросе в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке мы сделали тестовый код.\n\tНапомню его существенную часть, выполняющую\n\tзапрос к базе:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = 'SELECT * FROM users';\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\tvar_dump($result);\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, после того, как произойдет\n\tзапрос к базе, в переменной <code class=\"code inline\">$result</code>\n\tбудет лежать результат этого действия. Однако\n\tлежит он не в той форме, которая нам нужна\n\tв PHP, а в той форме, в которой его прислала\n\tнам база.\n</p>\n<p>\n\tДля того, чтобы получить результат в привычной\n\tнам форме, необходимо воспользоваться функцией\n\t<code class=\"code inline\">mysqli_fetch_assoc</code>, извлекающей из\n\tрезультата одну строку.\n</p>\n<p>\n\tДавайте попробуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$row = mysqli_fetch_assoc($result);\n\tvar_dump($row);\n?&gt;</code>\n</div>\n<p>\n\tВ результате <code class=\"code inline\">var_dump</code> выведет массив\n\tс первым работником:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t['id' =&gt; 1, 'name' =&gt; 'user1', 'age' =&gt; 23, 'salary' =&gt; 400]\n?&gt;</code>\n</div>\n<p>\n\tПри этом из переменной <code class=\"code inline\">$result</code> первый\n\tработник исчезнет, и следующий вызов <code class=\"code inline\">mysqli_fetch_assoc</code>\n\tполучит уже следующего работника.\n</p>\n<p>\n\tИ так можно можно вызывать нашу функцию до\n\tтех пор, пока работники не закончатся. Как\n\tтолько это произойдет, то следующий вызов\n\tфункции вернет <code class=\"code inline\">false</code>.\n</p>\n<p>\n\tДавайте попробуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$row1 = mysqli_fetch_assoc($result);\n\tvar_dump($row1); // работник номер 1\n\t\n\t$row2 = mysqli_fetch_assoc($result);\n\tvar_dump($row2); // работник номер 2\n\t\n\t$row3 = mysqli_fetch_assoc($result);\n\tvar_dump($row3); // работник номер 3\n\t\n\t$row4 = mysqli_fetch_assoc($result);\n\tvar_dump($row4); // работник номер 4\n\t\n\t$row5 = mysqli_fetch_assoc($result);\n\tvar_dump($row5); // работник номер 5\n\t\n\t$row6 = mysqli_fetch_assoc($result);\n\tvar_dump($row6); // работник номер 6\n\t\n\t$row7 = mysqli_fetch_assoc($result);\n\tvar_dump($row7); // выведет NULL - работники кончились\n?&gt;</code>\n</div>\n\n<h2>Получение в виде массива</h2>\n<p>\n\tПри считывании по рядам можно не выводить\n\tкаждого работника, а записывать их в какой-нибудь\n\tмассив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$row1 = mysqli_fetch_assoc($result);\n\t$data[] = $row1;\n\t\n\t$row2 = mysqli_fetch_assoc($result);\n\t$data[] = $row2;\n\t\n\t$row3 = mysqli_fetch_assoc($result);\n\t$data[] = $row3;\n\t\n\t$row4 = mysqli_fetch_assoc($result);\n\t$data[] = $row4;\n\t\n\t$row5 = mysqli_fetch_assoc($result);\n\t$data[] = $row5;\n\t\n\t$row6 = mysqli_fetch_assoc($result);\n\t$data[] = $row6;\n?&gt;</code>\n</div>\n<p>\n\tВ результате в переменной <code class=\"code inline\">$data</code> получится\n\tследующий двухмерный массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t[\n\t\t['id' =&gt; 1, 'name' =&gt; 'user1', 'age' =&gt; 23, 'salary' =&gt; 400],\n\t\t['id' =&gt; 2, 'name' =&gt; 'user2', 'age' =&gt; 25, 'salary' =&gt; 500],\n\t\t['id' =&gt; 3, 'name' =&gt; 'user3', 'age' =&gt; 23, 'salary' =&gt; 500],\n\t\t['id' =&gt; 4, 'name' =&gt; 'user4', 'age' =&gt; 30, 'salary' =&gt; 900],\n\t\t['id' =&gt; 5, 'name' =&gt; 'user5', 'age' =&gt; 27, 'salary' =&gt; 500],\n\t\t['id' =&gt; 6, 'name' =&gt; 'user6', 'age' =&gt; 28, 'salary' =&gt; 900],\n\t]\n?&gt;</code>\n</div>\n\n<h2>Формируем массив в цикле</h2>\n<p>\n\tКонечно же, в ручную перебирать всех работников\n\tне очень удобно. Пусть лучше за нас это сделает\n\tцикл:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tfor ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);\n\tvar_dump($data); // здесь будет массив с результатом\n?&gt;</code>\n</div>\n<p>\n\tДавайте разберемся, как работает этот цикл.\n</p>\n<p>\n\tВ каждой итерации цикла функция <code class=\"code inline\">mysqli_fetch_assoc</code>\n\tпоследовательно считывает каждую строку результата,\n\tзаписывая его в массив $data.\n</p>\n<p>\n\tКак только в <code class=\"code inline\">$result</code> закончатся строки,\n\tто <code class=\"code inline\">mysqli_fetch_assoc</code> вернет <code class=\"sql inline\">NULL</code>\n\tи цикл закончит свою работу. А полученный\n\tрезультат будет лежать в двухмерном массиве\n\t<code class=\"code inline\">$data</code>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tС помощью описанного цикла получите и выведите\n\t\tчерез <code class=\"code inline\">var_dump</code> на экран массив всех\n\t\tработников.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз полученного результата получите первого\n\t\tработника. Через <code class=\"code inline\">echo</code> выведите на\n\t\tэкран его имя.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз полученного результата получите второго\n\t\tработника. Через <code class=\"code inline\">echo</code> выведите на\n\t\tэкран его имя и возраст.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз полученного результата получите третьего\n\t\tработника. Через <code class=\"code inline\">echo</code> выведите на\n\t\tэкран его имя, возраст и зарплату.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/notes-selection/","content":"\n\t\t\t\t<h1>Выборка записей при SQL запросе к базе в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ тестовом коде вы уже видели команду <code class=\"sql inline\">SELECT</code>,\n\tвыполняющую выборку данных из БД. Давайте\n\tтеперь подробнее разберемся с ее синтаксисом.\n\tВот он:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM таблица WHERE условие\";\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, после имени таблицы можно\n\tеще дописать команду WHERE, в которой можно\n\tписать ограничение на выбираемые записи.\n\tВ условии допустимы следующие операции сравнения:\n\t<code class=\"code inline\">=</code>, <code class=\"code inline\">!=</code>, <code class=\"code inline\"><></code>, <code class=\"code inline\"><</code>,\n\t<code class=\"code inline\">></code>, <code class=\"code inline\"><=</code>, <code class=\"code inline\">>=</code>.\n</p>\n<p>\n\tДавайте посмотрим их применение на примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзера с <code class=\"code inline\">id</code>, равным <code class=\"number inline\">2</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id=2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с <code class=\"code inline\">id</code>, большим <code class=\"number inline\">2</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id&gt;2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с <code class=\"code inline\">id</code>, большим или равным\n\t<code class=\"number inline\">2</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id&gt;=2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с <code class=\"code inline\">id</code>, не равным <code class=\"number inline\">2</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id!=2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВместо команды <code class=\"code inline\">!=</code> можно писать команду\n\t<code class=\"code inline\"><></code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id&lt;&gt;2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров возрастом <code class=\"number inline\">23</code> года:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE age=23\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с зарплатой <code class=\"number inline\">500</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE salary=500\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзера с именем <code class=\"string inline\">'user1'</code>. Здесь\n\tнас поджидает важный нюанс: так как имя является\n\tстрокой, то его необходимо взять в кавычки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE name='user1'\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tЕсли команда <code class=\"sql inline\">WHERE</code> отсутствует, то\n\tвыберутся все записи из таблицы. Давайте\n\tвыберем всех работников:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users\";\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзера с <code class=\"code inline\">id</code>, равным <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров с зарплатой <code class=\"number inline\">900</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров в возрасте <code class=\"number inline\">23</code> года.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров с зарплатой более <code class=\"number inline\">400</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров с зарплатой равной или большей\n\t\t<code class=\"number inline\">500</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров с зарплатой НЕ равной <code class=\"number inline\">500</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров с зарплатой равной или меньшей\n\t\t<code class=\"number inline\">500</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/logical-operations/","content":"\n\t\t\t\t<h1>Логические операции в SQL запросе в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ условии выборки можно делать более сложные\n\tкомбинации с помощью команд <code class=\"sql inline\">OR</code> и <code class=\"sql inline\">AND</code>.\n\tРаботают они так же, как и их аналоги в PHP\n\tконструкции <code class=\"code inline\">if</code>. Давайте посмотрим\n\tна примерах.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с зарплатой <code class=\"number inline\">500</code> И возрастом\n\t<code class=\"number inline\">23</code> года:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE salary=500 AND age=23\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с зарплатой <code class=\"number inline\">500</code> ИЛИ\n\tвозрастом <code class=\"number inline\">23</code> года:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE salary=500 OR age=23\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с зарплатой от <code class=\"number inline\">450</code>\n\tдо <code class=\"number inline\">900</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE salary&gt;450 AND salary&lt;900\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем юзеров с возрастом от <code class=\"number inline\">23</code> до\n\t<code class=\"number inline\">27</code> лет включительно:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE age&gt;=23 AND age&lt;=27\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tСложные комбинации команд <code class=\"sql inline\">OR</code> и <code class=\"sql inline\">AND</code>\n\tможно группировать с помощью круглых скобок,\n\tчтобы показать приоритет условий:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE (age&lt;20 AND age&gt;27) OR (salary&gt;300 AND salary&lt;500)\";\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров в возрасте от <code class=\"number inline\">25</code> (не\n\t\tвключительно) до <code class=\"number inline\">28</code> лет (включительно).\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзера <code class=\"string inline\">user1</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите юзеров <code class=\"string inline\">user1</code> и <code class=\"string inline\">user2</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите всех, кроме юзера <code class=\"string inline\">user3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите всех юзеров в возрасте <code class=\"number inline\">27</code>\n\t\tлет или с зарплатой <code class=\"number inline\">1000</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите всех юзеров в возрасте <code class=\"number inline\">27</code>\n\t\tлет или с зарплатой не равной <code class=\"number inline\">400</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите всех юзеров в возрасте от <code class=\"number inline\">23</code>\n\t\tлет (включительно) до <code class=\"number inline\">27</code> лет (не включительно)\n\t\tили с зарплатой <code class=\"number inline\">1000</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите всех юзеров в возрасте от <code class=\"number inline\">23</code>\n\t\tлет до <code class=\"number inline\">27</code> лет или с зарплатой от <code class=\"number inline\">400</code>\n\t\tдо <code class=\"number inline\">1000</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/selection-fields/","content":"\n\t\t\t\t<h1>Поля выборки при SQL запросе в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущих уроках при выборке из БД в результат\n\tпопадали все столбцы таблицы. Это на самом\n\tделе не обязательно - можно указать, какие\n\tконкретно поля нам нужны.\n</p>\n<p>\n\tДля этого вместо звездочки, которую мы ставим\n\tпосле команды <code class=\"sql inline\">SELECT</code>, через запятую\n\tможно перечислить имена нужных полей.\n</p>\n<p>\n\tПосмотрим на примере. Давайте при выборке\n\tиз нашей таблицы <code class=\"string inline\">users</code> достанем только\n\tимя и возраст работника:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT name, age FROM users WHERE id &gt;= 3\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите из таблицы <code class=\"string inline\">users</code> имя, возраст\n\t\tи зарплату для каждого работника.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите из таблицы <code class=\"string inline\">users</code> имена всех\n\t\tработников.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/notes-insertion/","content":"\n\t\t\t\t<h1>Вставка записей через SQL запрос в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся добавлять новые записи\n\tв таблицу. Это делается с помощью команды\n\t<code class=\"sql inline\">INSERT INTO</code>. Она имеет следующий синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"INSERT INTO таблица (поле1, поле2...) VALUES (значение1, значение2...)\";\n?&gt;</code>\n</div>\n<p>\n\tДавайте в нашу таблицу <code class=\"string inline\">users</code> добавим\n\tнового юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"INSERT INTO users (name, age, salary) VALUES ('user', 30, 1000)\";\n?&gt;</code>\n</div>\n\n<h2>Нюансы вставки</h2>\n<p>\n\tМожет быть не очень очевидно, что результат\n\tвставки нам не нужно обрабатывать через <code class=\"code inline\">mysqli_fetch_assoc</code>.\n\tНам нужно просто выполнить этот запрос через\n\t<code class=\"code inline\">mysqli_query</code>, а результат вставки\n\tнужно смотреть через PhpMyAdmin:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"INSERT INTO users (name, age, salary) VALUES ('user', 30, 1000)\";\n\tmysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<p>\n\tОбратите также внимание на то, что при вставке\n\tмы не указываем столбец <code class=\"code inline\">id</code> и его значение.\n\tИ это правильно, так как значение этого столбца\n\tпроставится базой автоматически.\n</p>\n\n<h2>Отсутствующие столбцы</h2>\n<p>\n\tЧто будет, если не указать значение какого-либо\n\tстолбца? Давайте, например, укажем только\n\tимя и возраст:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"INSERT INTO users (name, age) VALUES ('user', 30)\";\n\tmysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<p>\n\tВ таком случае не указанные столбцы возьмут\n\tзначение по умолчанию. Если такое значение\n\tне указано в PhpMyAdmin, то это приведет\n\tк ошибке и такой запрос откажется выполнятся.\n</p>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте нового юзера <code class=\"string inline\">'user7'</code>, <code class=\"number inline\">26</code>\n\t\tлет, зарплата <code class=\"number inline\">300</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/notes-updation/","content":"\n\t\t\t\t<h1>Обновление записей через SQL запрос в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся изменять записи.\n\tЭто делается с помощью команды <code class=\"sql inline\">UPDATE</code>.\n\tОна имеет следующий синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"UPDATE таблица SET полe = значениe WHERE условие\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tДавайте поменяем возраст и зарплату юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"UPDATE users SET age=20, salary=800 WHERE id=1\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tУстановим зарплату <code class=\"number inline\">400</code> и возраст <code class=\"number inline\">24</code>\n\tвсем юзерам в возрасте <code class=\"number inline\">23</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"UPDATE users SET age=24, salary=300 WHERE age=23\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tБез команды <code class=\"sql inline\">WHERE</code> обновления захватят\n\tвсю таблицу. Например, установим всем юзерам\n\tзарплату <code class=\"number inline\">400</code> и возраст <code class=\"number inline\">24</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"UPDATE users SET age=24, salary=300\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИспользуя созданный ранее вами дамп таблицы\n\t\t<code class=\"string inline\">users</code> приведите ее в исходное состояние.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЮзеру с <code class=\"code inline\">id</code> <code class=\"number inline\">4</code> поставьте возраст\n\t\t<code class=\"number inline\">35</code> лет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВсем, у кого зарплата <code class=\"number inline\">500</code>, сделайте\n\t\tее <code class=\"number inline\">700</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРаботникам с <code class=\"code inline\">id</code> больше <code class=\"number inline\">2</code> и\n\t\tменьше <code class=\"number inline\">5</code> включительно поставьте возраст\n\t\t<code class=\"number inline\">23</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/notes-deletion/","content":"\n\t\t\t\t<h1>Удаление записей через SQL запрос в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью команды <code class=\"sql inline\">DELETE</code> можно удалять\n\tзаписи из таблицы. Ее синтаксис похож на\n\tизученное вами ранее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"DELETE FROM таблица WHERE условие\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите юзера с <code class=\"code inline\">id</code>, равным <code class=\"number inline\">7</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите всех юзеров, у которых возраст <code class=\"number inline\">23</code>\n\t\tгода.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите всех юзеров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/notes-sorting/","content":"\n\t\t\t\t<h1>Сортировка записей через SQL запрос в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью команды <code class=\"sql inline\">ORDER BY</code> можно сортировать\n\tстроки результата.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем из нашей таблицы <code class=\"string inline\">users</code> всех\n\tюзеров и отсортируем их по возрасту от меньшего\n\tк большему:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users ORDER BY age\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tПоменяем порядок сортировки с помощью команды\n\t<code class=\"sql inline\">DESC</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users ORDER BY age DESC\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем всех юзеров с зарплатой <code class=\"number inline\">500</code>\n\tи отсортируем их по возрасту от меньшего\n\tк большему:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE salary=500 ORDER BY age\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tМожно сортировать не по одному полю, а по\n\tнескольким. Давайте для примера выберем всех\n\tюзеров и отсортируем их сначала по возрастанию\n\tвозраста, а юзеров с одинаковыми возрастами\n\tотсортируем по возрастанию зарплаты:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users ORDER BY age, salary\";\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДостаньте всех юзеров и отсортируйте их по\n\t\tвозрастанию зарплаты.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДостаньте всех юзеров и отсортируйте их по\n\t\tубыванию зарплаты.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДостаньте всех юзеров и отсортируйте их по имени.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДостаньте юзеров с зарплатой <code class=\"number inline\">500</code> и\n\t\tотсортируйте их по возрасту.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДостаньте всех юзеров и отсортируйте их по\n\t\tимени и по зарплате.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/quantity-limitation/","content":"\n\t\t\t\t<h1>Ограничение количества записей в SQL в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью команды <code class=\"sql inline\">LIMIT</code> мы можем ограничить\n\tколичество строк в результате.\n</p>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем первых двух юзеров:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users LIMIT 2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tВыберем всех юзеров с зарплатой <code class=\"number inline\">500</code>,\n\tа затем с помощью <code class=\"sql inline\">LIMIT</code> возьмем только\n\tпервых двух из выбранных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE salary=500 LIMIT 2\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tС помощью <code class=\"sql inline\">LIMIT</code> можно выбрать несколько\n\tстрок из середины результата. В примере ниже\n\tмы выберем со второй строки (нумерация строк\n\tс нуля), <code class=\"number inline\">5</code> штук:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users LIMIT 1,5\";\n?&gt;</code>\n</div>\n\n<h2>Пример <span class=\"-page-\"></span></h2>\n<p>\n\tКоманду <code class=\"sql inline\">LIMIT</code> можно комбинировать\n\tс <code class=\"sql inline\">ORDER BY</code>. При этом сначала нужно\n\tписать команду сортировки, а потом - лимит.\n\tВ следующем примере мы сначала отсортируем\n\tзаписи по возрастанию возраста, а потом возьмем\n\tпервые <code class=\"number inline\">3</code> штуки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users ORDER BY age LIMIT 3\";\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПолучите первых <code class=\"number inline\">4</code> юзера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров со второго, <code class=\"number inline\">3</code> штуки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтсортируйте юзеров по возрастанию зарплаты\n\t\tи получите первых <code class=\"number inline\">3</code> работника из результата\n\t\tсортировки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтсортируйте юзеров по убыванию зарплаты\n\t\tи получите первых <code class=\"number inline\">3</code> юзера из результата\n\t\tсортировки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/quantity-counting/","content":"\n\t\t\t\t<h1>Подсчет количества через SQL запрос в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью команды <code class=\"sql inline\">COUNT</code> можно подсчитать\n\tколичество строк в выборке.\n</p>\n<p>\n\tДавайте, например, подсчитаем всех юзеров\n\tв таблице:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT COUNT(*) FROM users\";\n?&gt;</code>\n</div>\n<p>\n\tА теперь подсчитаем всех, у кого зарплата\n\tравна <code class=\"number inline\">900</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT COUNT(*) FROM users WHERE salary=900\";\n?&gt;</code>\n</div>\n\n<h2>Получение количества в PHP</h2>\n<p>\n\tДавайте посмотрим, как получить подсчитанное\n\tколичество в нашем PHP скрипте, так как тут\n\tне все так просто.\n</p>\n<p>\n\tНапишем код, подчитывающий количество юзеров:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT COUNT(*) FROM users\";\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t$data = mysqli_fetch_assoc($result);\n?&gt;</code>\n</div>\n<p>\n\tВ нашем случае получится, что количество\n\tпопадет в переменную <code class=\"code inline\">$data</code>. Однако,\n\tэта переменная будет представлять собой массив\n\tследующего вида:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($data); // ['COUNT(*)' =&gt; 6]\n?&gt;</code>\n</div>\n<p>\n\tДля того, чтобы ключ в этом массиве был более\n\tкрасивый, можно переименовать наше поле в\n\tзапросе с помощью команды <code class=\"sql inline\">as</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT COUNT(*) as count FROM users\";\n?&gt;</code>\n</div>\n<p>\n\tПосле такого переименования в переменной\n\t<code class=\"code inline\">$data</code> наше количество уже будет лежать\n\tв ключе <code class=\"string inline\">'count'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tvar_dump($data); // ['count' =&gt; 6]\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПодсчитайте всех юзеров с зарплатой <code class=\"number inline\">300</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПодсчитайте всех юзеров с зарплатой <code class=\"number inline\">300</code>\n\t\tили возрастом <code class=\"number inline\">23</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/advanced-queries/","content":"\n\t\t\t\t<h1>Изучение продвинутых SQL запросов</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущих уроках вы изучили наиболее используемые\n\tкоманды. Конечно же, их намного больше и\n\tнайти вы их можете в <a href=\"/ru/sql/manual/\">справочнике\n\tSQL</a>. При изучении справочника особое\n\tвнимание обратите на команды <code class=\"sql inline\">IN</code>, <code class=\"sql inline\">MIN</code>,\n\t<code class=\"sql inline\">MAX</code>, <code class=\"sql inline\">GROUP BY</code>, <code class=\"sql inline\">CONCAT</code>,\n\tа также на функции для работы с датой.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tИзучите справочник SQL. Отдельные команды\n\t\tпопробуйте в вашем коде. Параллельно двигайтесь\n\t\tдальше по учебнику PHP.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/linking-tables/","content":"\n\t\t\t\t<h1>Связывание таблиц в базах данных</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть таблица с именами юзеров\n\tи городами, в которых они живут:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>city</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>city2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>user5</td>\n\t\t\t<td>city3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>user6</td>\n\t\t\t<td>city2</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tНедостатком этой таблицы является то, что\n\tодин и тот же город повторяется несколько\n\tраз для разных юзеров. Это приводит к некоторым\n\tпроблемам.\n</p>\n<p>\n\tВо-первых, постоянное повторение приводит\n\tк тому, что база данных начинает занимать\n\tнамного больше места.\n</p>\n<p>\n\tВо-вторых, достаточно неудобно выполнять\n\tоперации с городами. К примеру, мы хотим\n\tвывести на экран список все городов. Так\n\tпросто это сделать не получится. Нам придется\n\tполучить всех юзеров вместе с их городами,\n\tзатем удалить дубли из полученных городов\n\tи только тогда мы получим этот список.\n</p>\n<p>\n\tА теперь представим, что в базе <code class=\"number inline\">10000</code>\n\tюзеров из <code class=\"number inline\">10</code> городов - ради этих <code class=\"number inline\">10</code>\n\tгородов нам придется достать всю таблицу\n\tиз огромного количества строк - получится\n\tочень медленная операция с бессмысленной\n\tтратой ресурсов.\n</p>\n\n<h2>Решение проблемы</h2>\n<p>\n\tНужно разбить нашу таблицу на две: в одной\n\tбудут хранится города, а во второй - юзеры.\n\tПри этом в таблице с юзерами будет колонка\n\t<code class=\"code inline\">city_id</code>, которая будет <i>ссылаться</i>\n\tна город юзера.\n</p>\n<p>\n\tИтак, давайте сделаем две таблицы. Таблица\n\tс городами:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>cities</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>city2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>city3</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tТаблица с юзерами:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>city_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>user5</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>user6</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</table>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть вам нужно хранить товары (название,\n\t\tцена, количество) и категории этих товаров.\n\t\tРаспишите структуру хранения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть вам нужно хранить реки и моря, в которые\n\t\tвпадают эти реки. Распишите структуру хранения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть вам нужно хранить города и страны,\n\t\tв которых они находятся. Распишите структуру\n\t\tхранения.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/getting-data/","content":"\n\t\t\t\t<h1>Получении данных из связанных таблиц в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте сделаем запрос, который достанет\n\tвсех юзеров вместе с их городами. Для этого\n\tнам понадобится команда <a href=\"/ru/sql/manual/left-join/\"><code class=\"sql inline\">LEFT\n\tJOIN</code></a>:\n</p>\n<p>\n\tЕе синтаксис выглядит следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT поля FROM имя_таблицы\n\tLEFT JOIN имя_связанной_таблицы ON условие_связи \nWHERE условие_выборки</code>\n</div>\n<p>\n\tДавайте разберем отдельные части синтаксиса\n\tэтой команды.\n</p>\n\n<h2>Поля</h2>\n<p>\n\tТак как выборка идет из нескольких таблиц,\n\tто выборка всех полей через <code class=\"code inline\">*</code> не будет\n\tработать. Следующий запрос выберет поля только\n\tиз основной таблицы, но не из связанной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT *</code>\n</div>\n<p>\n\tДля того, чтобы данные выбирались из всех\n\tтаблиц, нужно перед <code class=\"code inline\">*</code> указать имя\n\tтаблицы для выборки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT users.*, cities.*</code>\n</div>\n<p>\n\tЛибо можно перечислить нужные нам поля с\n\tуказанием имени таблицы перед ними:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT users.name, cities.name</code>\n</div>\n<p>\n\tЭти два способа имеют проблему. Дело в том,\n\tчто если поля в таблицах имеют одинаковые\n\tимена, то в массиве PHP произойдет конфликт\n\tимен и победит только одно поле, а второго\n\tне будет.\n</p>\n<p>\n\tДля решения проблемы нужно конфликтные имена\n\tпереименовывать через команду <code class=\"sql inline\">as</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT users.name, cities.name as city_name</code>\n</div>\n\n<h2>Связь</h2>\n<p>\n\tПосле команды <code class=\"sql inline\">ON</code> мы должны указать\n\tполя из двух таблиц, по которым осуществляется\n\tсвязь. В нашем случае это будет поле <code class=\"code inline\">id</code>\n\tиз таблицы с городами и поле <code class=\"code inline\">city_id</code>\n\tиз таблицы с юзерами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">ON cities.id=users.city_id</code>\n</div>\n\n<h2>Запрос</h2>\n<p>\n\tВ итоге запрос, который достанет юзеров вместе\n\tс их городами будет выглядеть следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT \n\tusers.name, cities.name as city_name\nFROM \n\tusers\nLEFT JOIN cities ON cities.id=users.city_id</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть таблица с товарами и таблица\n\t\tс их категориями. Напишите запрос, который\n\t\tдостанет названия товаров вместе с их категориями.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/chain-linked-tabled/","content":"\n\t\t\t\t<h1>Цепочка связанных таблиц</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь юзеры живут в определенных городах,\n\tа эти города расположены в разных странах.\n\tВ таком случае для хранения нам понадобятся\n\tуже три таблицы: юзеры будут связаны с городами,\n\tа города - со странами. При этом нам не нужно\n\tбудет поле связи юзеров со странами - ведь\n\tюзеры и так будут связаны со странами через\n\tсвязь городов и стран.\n</p>\n<p>\n\tДавайте посмотрим на наши таблицы. Таблица\n\tсо странами:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>countries</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>country1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>country2</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tТаблица с городами:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>cities</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>country_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>city1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>city2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>city3</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tТаблица с юзерами останется неизменной:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>city_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>user5</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>user6</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</table>\n</div>\n\n<h2>Запросы</h2>\n<p>\n\tДля того, чтобы достать юзеров вместе с их\n\tгородами и странами, нам придется сделать\n\tдва джоина: первый присоединит города к юзерам,\n\tа второй - страны к городам:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT \n\tusers.name,\n\tcities.name as city_name,\n\tcountries.name as country_name\nFROM \n\tusers\nLEFT JOIN cities ON cities.id=users.city_id\nLEFT JOIN countries ON countries.id=cities.country_id</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПусть товары принадлежат определенной подкатегории,\n\t\tа подкатегории принадлежат определенной категории.\n\t\tРаспишите структуру хранения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет товары,\n\t\tвместе с их подкатегориями и категориями.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет подкатегории\n\t\tвместе с их категориями.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/linking-via-table/","content":"\n\t\t\t\t<h1>Связывание через таблицу связи в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь юзер был в разных городах. В\n\tэтом случае таблица с юзерами могла бы иметь\n\tследующий вид:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>city</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>city1, city2, city3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>city1, city2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>city2, city3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tПонятно, что так хранить данные неправильно\n\t- города нужно вынести в отдельную таблицу.\n\tВот она:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>cities</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>city2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>city3</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tОднако, нам нужно сделать так, чтобы каждый\n\tюзер мог ссылаться на несколько городов.\n\tС помощью двух таблиц это сделать невозможно.\n</p>\n<p>\n\tНам понадобится ввести так называемую <dfn>таблицу\n\tсвязи</dfn>, которая будет связывать юзера\n\tс его городами.\n</p>\n<p>\n\tВ каждой записи этой таблицы будет хранится\n\tсвязь между юзером и одним городом. При этом\n\tдля одного юзера в этой таблице будет столько\n\tзаписей, в скольки городах он был.\n</p>\n<p>\n\tВот наша таблица связи:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users_cities</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>user_id</th>\n\t\t\t<th>city_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>2</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>2</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>6</td>\n\t\t\t<td>3</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>7</td>\n\t\t\t<td>3</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>8</td>\n\t\t\t<td>4</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tТаблица с юзерами будет хранить только имена\n\tюзеров, без связей:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>5</td>\n\t\t\t<td>user5</td>\n\t\t</tr>\n\t</table>\n</div>\n\n<h2>Запросы</h2>\n<p>\n\tДавайте сделаем запрос, с помощью которого\n\tвытащим юзеров вместе с их городами. Для\n\tэтого нам понадобится сделать два джоина:\n\tпервый джоин присоединит к юзерам таблицу\n\tсвязи, а второй джоин по связям присоединит\n\tгорода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT\n\tusers.name as user_name, cities.name as city_name\nFROM\n\tusers\nLEFT JOIN users_cities ON users_cities.user_id=users.id\nLEFT JOIN cities ON users_cities.city_id=cities.id</code>\n</div>\n\n<h2>Результат запроса</h2>\n<p>\n\tРезультат нашего запроса в PHP будет содержать\n\tимя каждого юзера столько раз, со скольки\n\tгородами он связан:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [\n\t\t['user_name' =&gt; 'user1', 'city_name' =&gt; 'city1'],\n\t\t['user_name' =&gt; 'user1', 'city_name' =&gt; 'city2'],\n\t\t['user_name' =&gt; 'user1', 'city_name' =&gt; 'city3'],\n\t\t['user_name' =&gt; 'user2', 'city_name' =&gt; 'city1'],\n\t\t['user_name' =&gt; 'user2', 'city_name' =&gt; 'city2'],\n\t\t['user_name' =&gt; 'user3', 'city_name' =&gt; 'city2'],\n\t\t['user_name' =&gt; 'user3', 'city_name' =&gt; 'city3'],\n\t\t['user_name' =&gt; 'user4', 'city_name' =&gt; 'city1'],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tУдобнее было бы переконвертировать такой\n\tмассив и превратить его в следующий:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = [\n\t\t['user1' =&gt; ['city1', 'city2', 'city3']],\n\t\t['user2' =&gt; ['city1', 'city2']],\n\t\t['user3' =&gt; ['city2', 'city3']],\n\t\t['user4' =&gt; ['city1']],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tНапишем код, выполняющий такую конвертацию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$res = [];\n\t\n\tforeach ($data as $elem) {\n\t\t$res[$elem['user_name']][] = $elem['city_name'];\n\t}\n\t\n\tvar_dump($res);\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПусть товар может принадлежать нескольким\n\t\tкатегориям. Распишите структуру хранения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет товары\n\t\tвместе с их категориями.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите полученные данные в виде списка\n\t\t<code class=\"code inline\">ul</code> так, чтобы в каждой <code class=\"code inline\">li</code> вначале\n\t\tстояло имя продукта, а после двоеточия через\n\t\tзапятую перечислялись категории этого продукта.\n\t\tПримерно так:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;product1: category1, category2, category3&lt;/li&gt;\n\t&lt;li&gt;product2: category1, category3&lt;/li&gt;\n\t&lt;li&gt;product3: category1&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/family-relations/","content":"\n\t\t\t\t<h1>Родственные связи данных в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть перед нами стоит задача хранить отцов\n\tи сыновей. Пусть каждый отец может иметь\n\tтолько одного сына, а сын в свою очередь\n\tтоже может иметь одного сына.\n</p>\n<p>\n\tНужно придумать, как мы будем хранить данные.\n\tПервая идея, которая может прийти в голову\n\t- сделать две таблицы: <code class=\"code inline\">parents</code> для\n\tотцов и <code class=\"code inline\">sons</code> для сыновей. Затем связать\n\tэти таблицы каким-нибудь полем: <code class=\"code inline\">son_id</code>\n\tили <code class=\"code inline\">parent_id</code>.\n</p>\n<p>\n\tОднако, это идея не очень хорошая - ведь\n\tодин и тот же человек может быть одновременно\n\tи отцом и сыном - и придется хранить его\n\tв обоих таблицах, а это неудобно, занимает\n\tбольше место и легко приводит к ошибкам.\n</p>\n<p>\n\tБолее хороший вариант - связать таблицу саму\n\tс собой: сделаем таблицу <code class=\"code inline\">users</code>, в\n\tней будем хранить всех юзеров и каждому сделаем\n\tполе <code class=\"code inline\">son_id</code>, в котором будет храниться\n\t<code class=\"code inline\">id</code> сына из этой же таблицы:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>son_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>null</td>\n\t\t</tr>\n\t</table>\n</div>\n\n<h2>Запросы</h2>\n<p>\n\tДавайте теперь напишем запрос, который достанет\n\tюзера вместе с его сыном.\n</p>\n<p>\n\tДля начала давайте просто достанем юзеров:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT\n\t*\nFROM\n\tusers</code>\n</div>\n<p>\n\tТеперь заджойним к юзерам их сыновей. Джойнить\n\tмы будем таблицу саму к себе, поэтому нам\n\tнужно выполнить ее переименование:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">LEFT JOIN users as sons</code>\n</div>\n<p>\n\tТеперь мы можем указать связь основой таблицы\n\tи переименованной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">LEFT JOIN users as sons ON sons.id=users.son_id</code>\n</div>\n<p>\n\tУкажем теперь поля:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT\n\tusers.name as user_name, sons.name as son_name</code>\n</div>\n<p>\n\tСоберем все вместе и получим следующий запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT\n\tusers.name as user_name, sons.name as son_name\nFROM\n\tusers\nLEFT JOIN users as sons ON sons.id=users.son_id</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tПусть у нас есть категории. Каждая категория\n\t\tможет принадлежать родительской категории,\n\t\tта в свою очередь своей родительской и так\n\t\tдалее. Распишите структуру хранения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет категорию\n\t\tвместе с ее родительской категорией.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет категорию\n\t\tвместе с ее родителем и прародителем.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет категорию\n\t\tвместе с ее родителем, прародителем и прапрародителем.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/several-descendants/","content":"\n\t\t\t\t<h1>Несколько потомков в родственных связях в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке отец мог иметь только\n\tодного сына. Это достигалось за счет того,\n\tчто у отца была связь <code class=\"code inline\">son_id</code>.\n</p>\n<p>\n\tПусть теперь отец может иметь несколько сыновей.\n\tВ этом случае мы по-прежнему можем сделать\n\tтолько одну таблицу, которая будет связана\n\tсама с собой. Только в поле связи будем хранить\n\tне <code class=\"code inline\">id</code> сына, а <code class=\"code inline\">id</code> отца. В этом\n\tслучае несколько юзеров смогут сослаться\n\tна своего отца - и тем самым отец будет иметь\n\tнесколько сыновей:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>father_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>4</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>4</td>\n\t\t\t<td>user4</td>\n\t\t\t<td>null</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tПолучить юзера вместе с его отцом можно следующим\n\tобразом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT\n\tusers.name as user_name,\n\tfathers.name as father_name\nFROM\n\tusers\nLEFT JOIN users as fathers ON fathers.id=users.father_id</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у нас есть юзеры. Каждый юзер имеет\n\t\tотца и мать. Распишите структуру хранения.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНапишите запрос, который достанет юзера вместе\n\t\tс его отцом и матерью.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/double-relation/","content":"\n\t\t\t\t<h1>Двойная связь с одной таблицей в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть города:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>cities</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>city1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>city2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>city3</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tПусть у нас есть маршруты между городами,\n\tпри этом каждый маршрут имеет город начала\n\tи город конца:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>routes</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>from_city_id</th>\n\t\t\t<th>to_city_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>route1</td>\n\t\t\t<td>1</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>route2</td>\n\t\t\t<td>2</td>\n\t\t\t<td>3</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tПусть мы хотим получить маршруты вместе с\n\tгородами. Сложность здесь представляет то,\n\tчто каждый маршрут имеет два города: начало\n\tи конец.\n</p>\n<p>\n\tПолучается, что таблицу с городами нужно\n\tджойнить два раза. При каждом джоине таблицу\n\tпридется переименовать:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT\n\tfrom_cities.name as from_city_name,\n\tto_cities.name as to_city_name\nFROM\n\troutes\nLEFT JOIN cities as from_cities\n\tON from_cities.id=routes.from_city_id\nLEFT JOIN cities as to_cities\n\tON to_cities.id=routes.to_city_id</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у нас есть юзеры. Каждый юзер имеет\n\t\tотца и мать. Распишите структуру хранения.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/organization/practicum/","content":"\n\t\t\t\t<h1>Практика на организацию баз данных</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tЕсть моря, реки и их притоки. Реки могут\n\t\tбыть притоками других рек или впадать прямо\n\t\tв море. Составьте структуру таблиц.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПользователь, обмен сообщениями между пользователями.\n\t\tСоставьте структуру таблиц.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСайт с датами футбольных игр. Каждая игра\n\t\tсодержит дату игры, первую команду и вторую\n\t\tкоманду. Есть игроки, каждый из которых принадлежит\n\t\tодной команде. Составьте структуру таблиц.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tФорум, в нем категории, в них темы (тема\n\t\tпринадлежит только одной категории), в темах\n\t\tпосты. У темы есть автор. Пользователи могут\n\t\tобмениваться личными сообщениями. Составьте\n\t\tструктуру таблиц.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоциальная сеть, в ней пользователи, их друзья,\n\t\tстена, комментарии к записям на стене. Пользователи\n\t\tмогут обмениваться личными сообщениями. Составьте\n\t\tструктуру таблиц.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tГенеологическое дерево. Пользователь, его\n\t\tбабушки, дедушки, мама, папа, братья, сестры,\n\t\tдети. Можно найти любого родственника в любом\n\t\tколене (например, пра-пра-пра-дедушку). Нужно\n\t\tхранить и получать родственные связи. Составьте\n\t\tструктуру таблиц.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/practice/test-table-users/","content":"\n\t\t\t\t<h1>Тестовая таблица users для практических задач</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном разделе мы займемся практическим\n\tприменением знаний о работе с базами данных.\n\tДля этого приведем нашу таблицу <code class=\"string inline\">users</code>\n\tв следующий вид:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t\t<th>age</th>\n\t\t\t<th>salary</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user1</td>\n\t\t\t<td>23</td>\n\t\t\t<td>400</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>user2</td>\n\t\t\t<td>24</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>user3</td>\n\t\t\t<td>25</td>\n\t\t\t<td>600</td>\n\t\t</tr>\n\t</table>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте таблицу <code class=\"string inline\">test</code> с указанным\n\t\tвыше содержимым.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте дамп этой таблицы, чтобы в дальнейшем\n\t\tвы могли ее легко восстановить.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/practice/output-formation/","content":"\n\t\t\t\t<h1>Оформление вывода из базы данных в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВы уже умеете получать данные из базы данных.\n\tДавайте выведем теперь такие данные, оформив\n\tих тегами.\n</p>\n<p>\n\tНапример, записи нашей тестовой таблицы <code class=\"string inline\">users</code>\n\tвыведем в следующем виде:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;p&gt;\n\t&lt;b&gt;user1&lt;/b&gt;\n\t&lt;b&gt;23&lt;/b&gt;\n\t&lt;b&gt;400&lt;/b&gt;\n&lt;/p&gt;\n&lt;p&gt;\n\t&lt;b&gt;user2&lt;/b&gt;\n\t&lt;b&gt;24&lt;/b&gt;\n\t&lt;b&gt;500&lt;/b&gt;\n&lt;/p&gt;\n&lt;p&gt;\n\t&lt;b&gt;user3&lt;/b&gt;\n\t&lt;b&gt;25&lt;/b&gt;\n\t&lt;b&gt;600&lt;/b&gt;\n&lt;/p&gt;</code>\n</div>\n<p>\n\tДля начала давайте получим массив записей\n\tиз нашей базы данных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users\";\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\tfor ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);\n?&gt;</code>\n</div>\n<p>\n\tВыведем теперь данные нашего массива в оформленном\n\tвиде:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$result = '';\n\t\n\tforeach ($data as $elem) {\n\t\t$result .= '&lt;p&gt;';\n\t\t\n\t\t$result .= '&lt;b&gt;' . $elem['name'] . '&lt;/b&gt;';\n\t\t$result .= '&lt;b&gt;' . $elem['age'] . '&lt;/b&gt;';\n\t\t$result .= '&lt;b&gt;' . $elem['salary'] . '&lt;/b&gt;';\n\t\t\n\t\t$result .= '&lt;/p&gt;';\n\t}\n\t\n\techo $result;\n?&gt;</code>\n</div>\n<p>\n\tМожно переписать и в следующем виде:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php foreach ($data as $elem): ?&gt;\n\t&lt;p&gt;\n\t\t&lt;b&gt;&lt;?= $elem['name'] ?&gt;&lt;/b&gt;\n\t\t&lt;b&gt;&lt;?= $elem['age'] ?&gt;&lt;/b&gt;\n\t\t&lt;b&gt;&lt;?= $elem['salary'] ?&gt;&lt;/b&gt;\n\t&lt;/p&gt;\n&lt;?php endforeach; ?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите записи нашей таблицы в следующем виде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;h2&gt;user1&lt;/h2&gt;\n\t&lt;p&gt;\n\t\t23 years, &lt;b&gt;400$&lt;/b&gt;\n\t&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;h2&gt;user2&lt;/h2&gt;\n\t&lt;p&gt;\n\t\t24 years, &lt;b&gt;500$&lt;/b&gt;\n\t&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;h2&gt;user3&lt;/h2&gt;\n\t&lt;p&gt;\n\t\t25 years, &lt;b&gt;600$&lt;/b&gt;\n\t&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите записи нашей таблицы в следующем виде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;th&gt;id&lt;/th&gt;\n\t\t&lt;th&gt;name&lt;/th&gt;\n\t\t&lt;th&gt;age&lt;/th&gt;\n\t\t&lt;th&gt;salary&lt;/th&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;1&lt;/td&gt;\n\t\t&lt;td&gt;user1&lt;/td&gt;\n\t\t&lt;td&gt;23&lt;/td&gt;\n\t\t&lt;td&gt;400&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;2&lt;/td&gt;\n\t\t&lt;td&gt;user2&lt;/td&gt;\n\t\t&lt;td&gt;25&lt;/td&gt;\n\t\t&lt;td&gt;500&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;3&lt;/td&gt;\n\t\t&lt;td&gt;user3&lt;/td&gt;\n\t\t&lt;td&gt;23&lt;/td&gt;\n\t\t&lt;td&gt;500&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите записи нашей таблицы в следующем виде:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;user1&lt;/li&gt;\n\t&lt;li&gt;user2&lt;/li&gt;\n\t&lt;li&gt;user3&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/practice/data-removing/","content":"\n\t\t\t\t<h1>Удаление данных из БД с помощью GET запросов</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь будем удалять записи из базы\n\tданных, передавая <code class=\"code inline\">id</code> для их удаления\n\tчерез <code class=\"sql inline\">GET</code> параметры.\n</p>\n<p>\n\tПусть у нас передается <code class=\"sql inline\">GET</code> параметр\n\tс именем <code class=\"string inline\">del</code>. Давайте получим получим\n\t<code class=\"code inline\">id</code> для удаления в переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$del = $_GET['del'];\n?&gt;</code>\n</div>\n<p>\n\tСформируем запрос на удаление:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$query = \"DELETE FROM users WHERE id=$del\";\n?&gt;</code>\n</div>\n<p>\n\tУдалим запись из базы данных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tmysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы в адресной строке можно\n\t\tбыло отправить <code class=\"sql inline\">GET</code> запрос с <code class=\"code inline\">id</code>\n\t\tюзера и этот юзер удалялся из БД.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tна странице были ссылки для удаления каждого\n\t\tюзера:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;a href=\"?del=1\"&gt;user1&lt;/a&gt;\n&lt;a href=\"?del=2\"&gt;user2&lt;/a&gt;\n&lt;a href=\"?del=3\"&gt;user3&lt;/a&gt;</code>\n\t</div>\n\t<p>\n\t\tСсылки, конечно же, должны формироваться\n\t\tв цикле из полученных из БД данных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tу вас был следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;user1 &lt;a href=\"?del=1\"&gt;удалить&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;user2 &lt;a href=\"?del=2\"&gt;удалить&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;user3 &lt;a href=\"?del=3\"&gt;удалить&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tу вас был следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;th&gt;id&lt;/th&gt;\n\t\t&lt;th&gt;name&lt;/th&gt;\n\t\t&lt;th&gt;age&lt;/th&gt;\n\t\t&lt;th&gt;salary&lt;/th&gt;\n\t\t&lt;th&gt;delete&lt;/th&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;1&lt;/td&gt;\n\t\t&lt;td&gt;user1&lt;/td&gt;\n\t\t&lt;td&gt;23&lt;/td&gt;\n\t\t&lt;td&gt;400&lt;/td&gt;\n\t\t&lt;td&gt;&lt;a href=\"?del=1\"&gt;удалить&lt;/a&gt;&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;2&lt;/td&gt;\n\t\t&lt;td&gt;user2&lt;/td&gt;\n\t\t&lt;td&gt;25&lt;/td&gt;\n\t\t&lt;td&gt;500&lt;/td&gt;\n\t\t&lt;td&gt;&lt;a href=\"?del=2\"&gt;удалить&lt;/a&gt;&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;3&lt;/td&gt;\n\t\t&lt;td&gt;user3&lt;/td&gt;\n\t\t&lt;td&gt;23&lt;/td&gt;\n\t\t&lt;td&gt;500&lt;/td&gt;\n\t\t&lt;td&gt;&lt;a href=\"?del=3\"&gt;удалить&lt;/a&gt;&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/practice/data-viewing/","content":"\n\t\t\t\t<h1>Просмотр данных из БД в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте сделаем страницу <code class=\"path inline\">show.php</code>,\n\tна которой можно будет посмотреть данные\n\tюзера, оформленные в определенную верстку.\n</p>\n<p>\n\tПусть для этого у нас дана следующая верстка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;h1&gt;user1&lt;/h1&gt;\n\t&lt;p&gt;\n\t\tage: &lt;span class=\"age\"&gt;23&lt;/span&gt;,\n\t\tsalary: &lt;span class=\"salary\"&gt;400&lt;/span&gt;\n\t&lt;/p&gt;\n&lt;/div&gt;</code>\n</div>\n<p>\n\tПусть <code class=\"code inline\">id</code> юзера, которого мы хотим\n\tпросмотреть, передается через <code class=\"sql inline\">GET</code>\n\tпараметр с именем <code class=\"code inline\">id</code>. Получим его\n\tв переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$id = $_GET['id'];\n?&gt;</code>\n</div>\n<p>\n\tСформируем запрос на получение этого юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id=$id\";\n?&gt;</code>\n</div>\n<p>\n\tВыполним запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<p>\n\tЗапишем данные юзера в переменную:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$user = mysqli_fetch_assoc($result);\n?&gt;</code>\n</div>\n<p>\n\tВыведем эти данные в нашей верстке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;h1&gt;&lt;?= $user['name'] ?&gt;&lt;/h1&gt;\n\t&lt;p&gt;\n\t\tage: &lt;span class=\"age\"&gt;&lt;?= $user['age'] ?&gt;&lt;/span&gt;,\n\t\tsalary: &lt;span class=\"salary\"&gt;&lt;?= $user['salary'] ?&gt;&lt;/span&gt;\n\t&lt;/p&gt;\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте просмотр юзера с помощью следующей\n\t\tверстки:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;p&gt;\n\t\tимя: &lt;span class=\"name\"&gt;user1&lt;/span&gt;\n\t&lt;/p&gt;\n\t&lt;p&gt;\n\t\tвозраст: &lt;span class=\"age\"&gt;23&lt;/span&gt;,\n\t\tзарплата: &lt;span class=\"salary\"&gt;400$&lt;/span&gt;,\n\t&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНа странице <code class=\"path inline\">index.php</code> реализуйте вывод\n\t\tссылок на просмотр каждого из юзеров:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;a href=\"show.php?id=1\"&gt;user1&lt;/a&gt;\n&lt;a href=\"show.php?id=2\"&gt;user2&lt;/a&gt;\n&lt;a href=\"show.php?id=3\"&gt;user3&lt;/a&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/practice/data-adding/","content":"\n\t\t\t\t<h1>Добавление новой записи в БД на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь сделаем страницу <code class=\"path inline\">new.php</code>\n\tдля добавления нового юзера в нашу базу данных.\n\tСделаем для этого соответствующую форму:\n</p>\n<div class=\"block\" data-file=\"new.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"name\"&gt;\n\t&lt;input name=\"age\"&gt;\n\t&lt;input name=\"salary\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПосле отправки формы сохраним ее данные в\n\tбазу. Для начала поймаем сам момент отправки\n\tформы:\n</p>\n<div class=\"block\" data-file=\"new.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_POST)) {\n\t\t// тут будет код обработки формы\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВнутри условия получим наши данные в переменные:\n</p>\n<div class=\"block\" data-file=\"new.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$name = $_POST['name'];\n\t$age = $_POST['age'];\n\t$salary = $_POST['salary'];\n?&gt;</code>\n</div>\n<p>\n\tСформируем запрос на вставку данных:\n</p>\n<div class=\"block\" data-file=\"new.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$query = \"INSERT INTO users SET name='$name', age='$age', salary='$salary'\";\n?&gt;</code>\n</div>\n<p>\n\tВыполним этот запрос:\n</p>\n<div class=\"block\" data-file=\"new.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tmysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНа странице <code class=\"path inline\">new.php</code> реализуйте форму\n\t\tдля добавления нового юзера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tпосле отправки формы значения из нее не удалялись.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/database/practice/data-editing/","content":"\n\t\t\t\t<h1>Редактирование записи в БД на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем редактирование юзера.\n\tДля этого нам понадобится две страницы: страница\n\t<code class=\"path inline\">edit.php</code>, на которой будет размещаться\n\tформа для редактирования юзера, и страница\n\t<code class=\"path inline\">save.php</code>, на которую форма будет отправляться\n\tдля последующего сохранения.\n</p>\n\n<h2>Страница редактирования</h2>\n<p>\n\tДля начала на странице <code class=\"path inline\">edit.php</code> сделаем\n\tформу:\n</p>\n<div class=\"block\" data-file=\"edit.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"name\"&gt;\n\t&lt;input name=\"age\"&gt;\n\t&lt;input name=\"salary\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tВ эту форму мы будем загружать текущее данные\n\tюзера из базы данных. Пусть <code class=\"code inline\">id</code> юзера\n\tдля редактирования передается в <code class=\"sql inline\">GET</code>\n\tпараметре:\n</p>\n<div class=\"block\" data-file=\"edit.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$id = $_GET['id'];\n?&gt;</code>\n</div>\n<p>\n\tСформируем запрос на получение юзера:\n</p>\n<div class=\"block\" data-file=\"edit.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM users WHERE id=$id\";\n?&gt;</code>\n</div>\n<p>\n\tВыполним запрос:\n</p>\n<div class=\"block\" data-file=\"edit.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<p>\n\tПолучим данные юзера в переменную:\n</p>\n<div class=\"block\" data-file=\"edit.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$user = mysqli_fetch_assoc($result);\n?&gt;</code>\n</div>\n<p>\n\tВыведем эти данные в нашей форме:\n</p>\n<div class=\"block\" data-file=\"edit.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form method=\"POST\"&gt;\n\t&lt;input name=\"name\" value=\"&lt;?= $user['name'] ?&gt;\"&gt;\n\t&lt;input name=\"age\" value=\"&lt;?= $user['age'] ?&gt;\"&gt;\n\t&lt;input name=\"salary\" value=\"&lt;?= $user['salary'] ?&gt;\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПоменяем <code class=\"code inline\">action</code> формы так, чтобы она\n\tотправлялась на страницу <code class=\"path inline\">save.php</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"save.php\" method=\"POST\"&gt;</code>\n</div>\n<p>\n\tПри этом <code class=\"sql inline\">GET</code> параметром будем передавать\n\t<code class=\"code inline\">id</code> юзера для редактирования:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"save.php?id=&lt;?= $_GET['id'] ?&gt;\" method=\"POST\"&gt;</code>\n</div>\n\n<h2>Страница сохранения</h2>\n<p>\n\tНа странице <code class=\"path inline\">save.php</code> получим отправленные\n\tданные:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$id = $_GET['id'];\n\t$name = $_POST['name'];\n\t$age = $_POST['age'];\n\t$salary = $_POST['salary'];\n?&gt;</code>\n</div>\n<p>\n\tСформируем запрос на обновление:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$query = \"UPDATE users SET\n\t\tname='$name', age='$age', salary='$salary'\n\tWHERE id=$id\";\n?&gt;</code>\n</div>\n<p>\n\tВыполним запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tmysqli_query($link, $query) or die(mysqli_error($link));\n?&gt;</code>\n</div>\n<p>\n\tВывыдем сообщение об успехе операции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\techo 'юзер успешно изменен!';\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте страницу <code class=\"path inline\">edit.php</code> для редактирования\n\t\tюзера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте страницу <code class=\"path inline\">save.php</code> для сохранения\n\t\tрезультата редактирования.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНа странице <code class=\"path inline\">index.php</code> выведите на\n\t\tэкран список юзеров так, чтобы для каждого\n\t\tюзера была ссылка для его редактирования:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;user1 &lt;a href=\"?edit=1\"&gt;edit&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;user2 &lt;a href=\"?edit=2\"&gt;edit&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;user3 &lt;a href=\"?edit=3\"&gt;edit&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task star\">\n\t<p>\n\t\tРеализуйте обработку формы на странице <code class=\"path inline\">edit.php</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/redirect/intro/","content":"\n\t\t\t\t<h1>Введение в редиректы PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью функции <code class=\"code inline\">header</code> можно перенаправить\n\tбраузер с одной страницы на другую:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\theader('Location: test.php');\n?&gt;</code>\n</div>\n<p>\n\tАдрес целевой страницы может хранится и в\n\tпеременной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$addr = 'test.php';\n\theader('Location: ' . $addr);\n?&gt;</code>\n</div>\n<p>\n\tВместо конкатенации можно использовать вставку\n\tпеременных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$addr = 'test.php';\n\theader(\"Location: $addr\");\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПри заходе на страницу <code class=\"path inline\">index.php</code> выполните\n\t\tредирект на страницу <code class=\"path inline\">page.php</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/redirect/get-queries/","content":"\n\t\t\t\t<h1>GET запросы и редирект в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри редиректе можно также передавать <code class=\"sql inline\">GET</code>\n\tпараметры:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\theader('Location: test.php?arg=1');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть на странице <code class=\"path inline\">index.php</code> можно\n\t\tпередать <code class=\"sql inline\">GET</code> параметр с именем <code class=\"string inline\">success</code>.\n\t\tСделайте так, чтобы при наличии такого параметра,\n\t\tна страницу выводилось сообщение об успехе\n\t\tоперации.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте теперь страницу <code class=\"path inline\">action.php</code>.\n\t\tПусть при заходе на эту страницу выполняется\n\t\tредирект на страницу <code class=\"path inline\">index.php</code> из\n\t\tпредыдущей задачи. При редиректе передайте\n\t\tв <code class=\"sql inline\">GET</code> параметре <code class=\"string inline\">success</code> значение\n\t\t<code class=\"number inline\">1</code>.\n\t</p>\n</div>\n\n<h2>Саморедирект с добавлением параметра</h2>\n<p>\n\tПусть на странице <code class=\"path inline\">index.php</code> передается\n\t<code class=\"sql inline\">GET</code> параметр с именем <code class=\"string inline\">arg</code>.\n\tВыведем его содержимое на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $_GET['arg'];\n?&gt;</code>\n</div>\n<p>\n\tПусть наша страница без <code class=\"sql inline\">GET</code> параметра\n\tне может работать корректно. В нашем случае\n\tэто действительно так, так как, если параметр\n\tне передан, то обращение к <code class=\"code inline\">$_GET['arg']</code>\n\tприведет к ошибке.\n</p>\n<p>\n\tМожет возникнуть вопрос, почему вообще человек\n\tпопадет на нашу страницу без параметра? Ведь\n\tмы можем везде на нашем сайте ставить ссылки\n\tс этим параметром. Однако, это не гарантия:\n\tюзер нашего сайта может, к примеру, копировать\n\tоткуда-нибудь ссылку и потерять при этом\n\tпараметр. Либо просто случайно его удалить,\n\tредактируя адресную строку.\n</p>\n<p>\n\tВ общем, в любом случае наш код должен предполагать\n\tтакую ситуацию и что-то с ней сделать. Что\n\tже можно сделать?\n</p>\n<p>\n\tМожно проверять наш <code class=\"sql inline\">GET</code> параметр на\n\tсуществование и выводить его, только если\n\tон существует:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (isset($_GET['arg'])) {\n\t\techo $_GET['arg'];\n\t} else {\n\t\t// как-то реагируем, например, сообщением\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно поступить хитрее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($_GET['arg'])) {\n\t\t$_GET['arg'] = 'default'; // значение по умолчанию\n\t}\n\t\n\techo $_GET['arg']; // гарантировано что-то выведет без ошибки\n?&gt;</code>\n</div>\n<p>\n\tА можно сделать так, чтобы при заходе на\n\tстраницу без параметра происходил редирект\n\tна эту же страницу с параметром:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!isset($_GET['arg'])) {\n\t\theader('Location: ?arg=default');\n\t}\n\t\n\techo $_GET['arg']; // параметр гарантированно есть\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в чем отличие второго варианта\n\t\tот третьего.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть на странице <code class=\"path inline\">page.php</code> можно передать\n\t\tчисло с помощью <code class=\"sql inline\">GET</code> параметра с именем\n\t\t<code class=\"string inline\">num</code>. Сделайте так, чтобы при заходе\n\t\tбез данного параметра, автоматически выполнялся\n\t\tредирект на эту же страницу, но с параметром\n\t\t<code class=\"string inline\">num</code> в значении <code class=\"number inline\">1</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/redirect/flash/","content":"\n\t\t\t\t<h1>Флеш сообщения в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда при редиректе нужно передать некоторую\n\tинформацию с одной страницы на другую. Например,\n\tчтобы вывести на целевой странице какое-нибудь\n\tтекст для пользователя\n</p>\n<p>\n\tТакие сообщения называются <dfn>флеш</dfn> ([t]flash[/t])\n\tсообщениями. Такое название выбрано потому,\n\tчто сообщение должно показаться только один\n\tраз, а при обновлении страницы исчезнуть.\n</p>\n<p>\n\tДавайте реализуем описанное. Пусть на странице\n\t<code class=\"path inline\">page.php</code> мы записываем в сессию некоторое\n\tсообщение и выполняем редирект на другую страницу:\n</p>\n<div class=\"block\" data-file=\"page.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\t$_SESSION['flash'] = 'сообщение';\n\theader('Location: index.php');\n?&gt;</code>\n</div>\n<p>\n\tНа странице <code class=\"path inline\">index.php</code> выведем сообщение\n\tи удалим его из сессии во избежание повторного\n\tпоказа:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (isset($_SESSION['flash'])) {\n\t\techo $_SESSION['flash'];\n\t\tunset($_SESSION['flash']);\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанные флеш сообщения. Проверьте\n\t\tих работу.\n\t</p>\n</div>\n\n<h2>Массив флеш сообщений</h2>\n<p>\n\tМожет быть такое, что нам необходимо показывать\n\tне одно сообщение, а несколько. В этом случае\n\tнам нужно сделать массив сообщений.\n</p>\n<p>\n\tПусть на странице <code class=\"path inline\">page1.php</code> записывается\n\tпервое сообщение:\n</p>\n<div class=\"block\" data-file=\"page1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t$_SESSION['flash'][] = 'сообщение 1';\n?&gt;</code>\n</div>\n<p>\n\tА на странице <code class=\"path inline\">page2.php</code> записывается\n\tвторое сообщение:\n</p>\n<div class=\"block\" data-file=\"page2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t$_SESSION['flash'][] = 'сообщение 2';\n?&gt;</code>\n</div>\n<p>\n\tПокажем эти сообщения на странице <code class=\"path inline\">index.php</code>\n\tи очистим массив с сообщениями:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (!empty($_SESSION['flash'])) {\n\t\tforeach ($_SESSION['flash'] as $flash) {\n\t\t\techo $flash;\n\t\t}\n\t\t\n\t\t$_SESSION['flash'] = []; // очистим сообщения\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанные флеш сообщения. Проверьте\n\t\tих работу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/redirect/form-saving/","content":"\n\t\t\t\t<h1>Сохранение формы в БД и редирект в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторая форма:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form method=\"POST\"&gt;\n\t&lt;input name=\"test1\"&gt;\n\t&lt;input name=\"test2\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tДавайте сохраним данные этой формы в базу:\n</p>\n<div class=\"block\" data-file=\"form.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($_POST)) {\n\t\t// сохраняем в базу\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЗдесь, однако, нас поджидает проблема: если\n\tобновить страницу браузера, то форма будет\n\tотправлена и сохранена еще раз, породив дубль\n\tданных.\n</p>\n<p>\n\tДля решения проблемы нужно после сохранения\n\tформы выполнить редирект на эту же страницу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($_POST)) {\n\t\t// сохраняем в базу\n\t\t\n\t\theader('Location: form.php');\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму и реализуйте ее сохранение\n\t\tв БД после отправки. Избавьтесь от двойного\n\t\tсохранения после отправки.\n\t</p>\n</div>\n\n<h2>Вывод сообщения об успехе</h2>\n<p>\n\tДавайте теперь сделаем так, чтобы после редиректа\n\tна страницу выводилось сообщение об успехе\n\tсохранения. Используем для этого флеш сообщения:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (!empty($_POST)) {\n\t\t// сохраняем в базу\n\t\t\n\t\t$_SESSION['flash'] = 'форма успешно сохранена';\n\t\theader('Location: form.php');\n\t}\n\t\n\tif (isset($_SESSION['flash'])) {\n\t\techo $_SESSION['flash'];\n\t\tunset($_SESSION['flash']);\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tна экран выводилось сообщение об успешном\n\t\tсохранении формы.\n\t</p>\n</div>\n\n<h2>Валидация формы</h2>\n<p>\n\tПредставим теперь, что вам необходимо выполнять\n\tвалидацию формы. Если валидация пройдена\n\tуспешно, то форму будем сохранять в бд и\n\tвыводить сообщение об успехе. В противном\n\tслучае нужно вывести сообщение о неудаче.\n\tРеализуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession_start();\n\t\n\tif (!empty($_POST)) {\n\t\tif (валидация формы) {\n\t\t\t// сохраняем в базу\n\t\t\t\n\t\t\t$_SESSION['flash'] = 'форма успешно сохранена';\n\t\t\theader('Location: form.php');\n\t\t} else {\n\t\t\t$_SESSION['flash'] = 'форма не прошла валидацию';\n\t\t}\n\t}\n\t\n\tif (isset($_SESSION['flash'])) {\n\t\techo $_SESSION['flash'];\n\t\tunset($_SESSION['flash']);\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tвыполнялась валидация формы. Сделайте так,\n\t\tчтобы данные формы не исчезали после отправки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tданные формы не исчезали после отправки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/intro/","content":"\n\t\t\t\t<h1>Введение в аутентификацию на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\t<dfn>Аутентификация</dfn> - это процесс определения\n\tпользователя сайтом. Для этого пользователь\n\tобычно должен вбить свой логин и пароль.\n\tПосле этого наш сайт выполняет <dfn>авторизацию</dfn>\n\tэтого пользователя, то есть наделяет его\n\tопределенными <dfn>правами</dfn> на совершение\n\tопераций.\n</p>\n<p>\n\tКонечно же, изначально этот пользователь\n\tдолжен пройти <dfn>регистрацию</dfn> на этом\n\tсамом сайте: придумать себе логин (то есть\n\tимя на сайте), причем так, чтобы это имя\n\tбыло не занято, и пароль.\n</p>\n<p>\n\tОбычно логин - это открытая информация, которая\n\tвидна всем посетителям сайта. Ну, а пароль\n\t- закрытая информация, чтобы только владелец\n\tданного логина мог получить доступ к своим\n\tданным, или другими словами - к своему <dfn>аккаунту</dfn>\n\tна сайте.\n</p>\n<p>\n\tВ следующих уроках мы будем разбираться,\n\tкак реализуется авторизация и регистрация\n\tпользователей в PHP.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/authorization/","content":"\n\t\t\t\t<h1>Простая авторизация через базу данных на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте реализуем самую простую авторизацию\n\tна базе данных, пока без регистрации. Вместо\n\tрегистрации пользователей, мы просто вобьем\n\tих логины и пароли в таблицу в базе данных:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>users</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>login</th>\n\t\t\t<th>password</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user</td>\n\t\t\t<td>12345</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>admin</td>\n\t\t\t<td>123</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tСделаем теперь форму, в которую будут вбиваться\n\tлогин и пароль:\n</p>\n<div class=\"block\" data-file=\"login.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"login\"&gt;\n\t&lt;input name=\"password\" type=\"password\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tНапишем теперь код, который будет проверять,\n\tотправлена ли форма и, если отправлена, то\n\tпроверять, есть ли в базе данных пользователь\n\tс таким логином и паролем:\n</p>\n<div class=\"block\" data-file=\"login.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_POST['password']) and !empty($_POST['login'])) {\n\t\t$login = $_POST['login'];\n\t\t$password = $_POST['password'];\n\t\t\n\t\t$query = \"SELECT * FROM users WHERE login='$login' AND password='$password'\";\n\t\t$result = mysqli_query($link, $query);\n\t\t$user = mysqli_fetch_assoc($result);\n\t\t\n\t\tif (!empty($user)) {\n\t\t\t// прошел авторизацию\n\t\t} else {\n\t\t\t// неверно ввел логин или пароль\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанную выше авторизацию. Сделайте\n\t\tтак, чтобы, если пользователь прошел авторизацию\n\t\t- выводилось сообщение об этом, а если не\n\t\tпрошел - то сообщение о том, что введенный\n\t\tлогин или пароль вбиты не правильно.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте код так, чтобы в случае успешной\n\t\tавторизации форма для ввода пароля и логина\n\t\tне показывалась на экране.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте код так, чтобы в случае успешной\n\t\tавторизации происходил редирект на страницу\n\t\t<code class=\"path inline\">index.php</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте код так, чтобы на странице\n\t\t<code class=\"path inline\">index.php</code> выводилось сообщение об\n\t\tуспешной авторизации. Решите задачу через\n\t\tфлеш-сообщения на сессиях.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/session/","content":"\n\t\t\t\t<h1>Авторизация через сессию на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНаша авторизация должна работать так: пользователь,\n\tкоторый хочет авторизоваться на сайте, заходит\n\tна страницу <code class=\"path inline\">login.php</code>, вбивает правильные\n\tлогин и пароль и <i>далее ходит по страницам\n\tсайта уже будучи авторизованным</i>.\n</p>\n<p>\n\tЧтобы другие страницы сайта знали о том,\n\tчто наш пользователь авторизован, мы должны\n\tхранить в сессии пометку об этом.\n</p>\n<p>\n\tПока наша авторизация не совсем рабочая,\n\tтак как сессию мы еще не подключили и другие\n\tстраницы сайта не могут понять, авторизован\n\tпользователь или нет.\n</p>\n<p>\n\tБудем хранить пометку об авторизации в переменной\n\tсессии <code class=\"code inline\">$_SESSION['auth']</code> - если там\n\tзаписано <code class=\"code inline\">true</code>, то пользователь авторизован,\n\tа если <code class=\"code inline\">null</code> - то не авторизован.\n</p>\n<p>\n\tДавайте внесем соответствующую правку в наш код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tsession_start();\n\t\n\tif (!empty($_POST['password']) and !empty($_POST['login'])) {\n\t\t$login = $_POST['login'];\n\t\t$password = $_POST['password'];\n\t\t\n\t\t$query = \"SELECT * FROM users WHERE login='$login' AND password='$password'\";\n\t\t$result = mysqli_query($link, $query);\n\t\t$user = mysqli_fetch_assoc($result);\n\t\t\n\t\tif (!empty($user)) {\n\t\t\t$_SESSION['auth'] = true;\n\t\t} else {\n\t\t\t// неверно ввел логин или пароль\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь на любой странице сайта мы можем проверить,\n\tавторизован пользователь или нет, вот таким\n\tобразом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_SESSION['auth'])) {\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно закрыть текст какой-нибудь страницы\n\tцеликом для неавторизованного пользователя:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php if (!empty($_SESSION['auth'])): ?&gt;\n\t&lt;!DOCTYPE html&gt;\n\t&lt;html&gt;\n\t\t&lt;head&gt;\n\t\t\t\n\t\t&lt;/head&gt;\n\t\t&lt;body&gt;\n\t\t\t&lt;p&gt;текст только для авторизованного пользователя&lt;/p&gt;\n\t\t&lt;/body&gt;\n\t&lt;/html&gt;\n&lt;?php else: ?&gt;\n\t&lt;p&gt;пожалуйста, авторизуйтесь&lt;/p&gt;\n&lt;?php endif; ?&gt;</code>\n</div>\n<p>\n\tМожно закрыть только часть страницы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;p&gt;текст для любого пользователя&lt;/p&gt;\n\t\t&lt;?php\n\t\t\tif (!empty($_SESSION['auth'])) {\n\t\t\t\techo 'текст только для авторизованного пользователя';\n\t\t\t}\n\t\t?&gt;\n\t\t&lt;p&gt;текст для любого пользователя&lt;/p&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть на нашем сайте, кроме страницы <code class=\"path inline\">login.php</code>,\n\t\tесть еще и страницы <code class=\"path inline\">1.php</code>, <code class=\"path inline\">2.php</code>\n\t\tи <code class=\"path inline\">3.php</code>. Сделайте так, чтобы к этим\n\t\tстраницам мог получить доступ только авторизованный\n\t\tпользователь.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть на нашем сайте есть еще и страница\n\t\t<code class=\"path inline\">index.php</code>. Сделайте так, чтобы часть\n\t\tэтой страницы была открыта для всех пользователей,\n\t\tа часть - только для авторизованных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы при успешной\n\t\tавторизации в сессию записывался также логин\n\t\tпользователя.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы при заходе на любую страницу\n\t\tсайта, авторизованный пользователь видел\n\t\tсвой логин, а не авторизованный - ссылку\n\t\tна страницу авторизации.\n\t</p>\n</div>\n\n<h2>Логаут</h2>\n<p>\n\tАвторизованный пользователь должен возможность\n\tперестать быть авторизованным, то есть совершить\n\tвыход из своего аккаунта. Для этого нужно\n\tсделать отдельную страницу и удалять на ней\n\tпометку об авторизации, примерно вот так:\n</p>\n<div class=\"block\" data-file=\"logout.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tsession_start();\n\t$_SESSION['auth'] = null;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте страницу <code class=\"path inline\">logout.php</code>, зайдя\n\t\tна которую, пользователь перестанет быть\n\t\tавторизованным.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tстраница <code class=\"path inline\">logout.php</code> после выполнения\n\t\tсвоего кода выполняла редирект на <code class=\"path inline\">index.php</code>.\n\t\tПокажите на этой странице сообщение о том,\n\t\tчто пользователь перестал быть авторизованным.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/registration/","content":"\n\t\t\t\t<h1>Регистрация на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем регистрацию. Для\n\tэтого сделаем отдельную страницу <code class=\"path inline\">register.php</code>.\n\tПо заходу на эту страницу, пользователь должен\n\tувидеть форму, в которую он должен вбить\n\tжелаемый логин и пароль:\n</p>\n<div class=\"block\" data-file=\"register.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"login\"&gt;\n\t&lt;input name=\"password\" type=\"password\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПо нажатию на кнопку отправки форму логин\n\tи пароль пользователя должны занестись в\n\tбазу данных с помощью <code class=\"sql inline\">INSERT</code> запроса,\n\tвот так:\n</p>\n<div class=\"block\" data-file=\"register.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($_POST['login']) and !empty($_POST['password'])) {\n\t\t$login = $_POST['login'];\n\t\t$password = $_POST['password'];\n\t\t\n\t\t$query = \"INSERT INTO users SET login='$login', password='$password'\";\n\t\tmysqli_query($link, $query);\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЗатем пользователь может зайти на страницу\n\tавторизации, ввести логин и пароль, под которым\n\tон зарегистрировался и авторизоваться.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанную выше регистрацию. После\n\t\tэтого зарегистрируйте нового пользователя\n\t\tи авторизуйтесь под ним. Убедитесь, что все\n\t\tработает, как надо.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы кроме логина\n\t\tи пароля пользователю нужно было ввести еще\n\t\tи дату своего рождения и email. Сохраните\n\t\tэти данные в базу данных.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы в базу автоматически\n\t\tсохранялась дата регистрации.\n\t</p>\n</div>\n\n<h2>Авторизуем сразу при регистрации</h2>\n<p>\n\tСейчас наша регистрация сделана таким образом,\n\tчто пользователь первый раз вбивает логин-пароль\n\tрегистрируясь, а потом сразу же вбивает их\n\tвторой раз, желая зайти на сайт.\n</p>\n<p>\n\tЭто на самом деле не очень удобно и будет\n\tраздражать пользователей. Лучше сделать так,\n\tчтобы при успешной регистрации сразу же происходила\n\tавтоматическая авторизация. Для этого сразу\n\tпосле успешной регистрации запишем в сессию\n\tпометку об успешной авторизации:\n</p>\n<div class=\"block\" data-file=\"register.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_POST['login']) and !empty($_POST['password'])) {\n\t\t$login = $_POST['login'];\n\t\t$password = $_POST['password'];\n\t\t\n\t\t$query = \"INSERT INTO users SET login='$login', password='$password'\";\n\t\tmysqli_query($link, $query);\n\t\t\n\t\t$_SESSION['auth'] = true; // пометка об авторизации\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы после регистрации\n\t\tпользователь автоматически становился авторизованным.\n\t</p>\n</div>\n\n<h2>Добавляем id пользователя в сессию</h2>\n<p>\n\tПусть кроме пометки об авторизации мы бы\n\tхотели записать в сессию еще и его <code class=\"string inline\">id</code>.\n</p>\n<p>\n\tВ этом случае мы можем получить его с помощью\n\tфункции <code class=\"code inline\">mysqli_insert_id</code>. Эта функция\n\tполучает <code class=\"string inline\">id</code> последней вставленной\n\tв данном скрипте записи, то есть как раз\n\tто, что нам нужно.\n</p>\n<p>\n\tРеализуем:\n</p>\n<div class=\"block\" data-file=\"register.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_POST['login']) and !empty($_POST['password'])) {\n\t\t$login = $_POST['login'];\n\t\t$password = $_POST['password'];\n\t\t\n\t\t$query = \"INSERT INTO users SET login='$login', password='$password'\";\n\t\tmysqli_query($link, $query);\n\t\t\n\t\t$_SESSION['auth'] = true;\n\t\t\n\t\t$id = mysqli_insert_id($link);\n\t\t$_SESSION['id'] = $id; // пишем id в сессию\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите при регистрации в сессию еще и <code class=\"string inline\">id</code>\n\t\tпользователя.\n\t</p>\n</div>\n\n<h2>Скрываем пароль</h2>\n<p>\n\tПоле ввода пароля обычно представляет собой\n\tинпут с типом <code class=\"string inline\">password</code>, в котором\n\tвведенные символы скрываются под звездочками.\n\tЭто сделано для того, чтобы злоумышленник\n\tне мог подсмотреть пароль пользователя через\n\tплечо в момент регистрации.\n</p>\n<p>\n\tСокрытие пароля таким образом конечно хорошо,\n\tно есть, однако, проблема - пользователь\n\tне видит, что вводит. Он может ошибиться\n\tпри вводе какого-либо символа и зарегистрироваться\n\tне с тем паролем, с которым он хотел. Это\n\tбудет печально:(, так как он затем не сможет\n\tавторизоваться на сайте.\n</p>\n<p>\n\tСуществует стандартное решение этой проблемы:\n\tпользователю показываются два инпута для\n\tввода пароля - в первый инпут он вводит пароль,\n\tа во второй инпут - его подтверждение, то\n\tесть этот же пароль второй раз:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"login\"&gt;\n\t&lt;input type=\"password\" name=\"password\"&gt;\n\t&lt;input type=\"password\" name=\"confirm\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tЗадача нашего сайта - проверить, что пароль\n\tи его подтверждение совпадают, так как логично,\n\tчто в этом случае пользователь ввел именно\n\tто, что хотел ввести:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($_POST['login']) and !empty($_POST['password']) and !empty($_POST['confirm'])) {\n\t\tif ($_POST['password'] == $_POST['confirm']) {\n\t\t\t// регистрируем\n\t\t} else {\n\t\t\t// выведем сообщение о несовпадении\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы при отправке\n\t\tформы пароль сравнивался с его подтверждением.\n\t\tЕсли они совпадают - то продолжаем регистрацию,\n\t\tа если не совпадают - то выводим сообщение\n\t\tоб этом.\n\t</p>\n</div>\n\n<h2>Проверка логина на занятость</h2>\n<p>\n\tСейчас наша регистрация имеет одну проблему\n\t- новый пользователь нашего сайта может зарегистрироваться\n\tпод уже существующим логином, что, конечно\n\tже, недопустимо.\n</p>\n<p>\n\tДля решения проблемы необходимо перед запросом\n\tна добавление нового пользователя в базу\n\tданных, выполнить <code class=\"sql inline\">SELECT</code> запрос, который\n\tпроверит, занят желаемый логин или нет. Если\n\tне занят - регистрируем, если занят - не\n\tрегистрируем, а выводим сообщение об этом.\n</p>\n<p>\n\tДавайте напишем этот код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_POST['login']) and !empty($_POST['password'])) {\n\t\t$login = $_POST['login'];\n\t\t$password = $_POST['password'];\n\t\t\n\t\t$query = \"SELECT * FROM users WHERE login='$login'\";\n\t\t$user = mysqli_fetch_assoc(mysqli_query($link, $query));\n\t\t\n\t\tif (empty($user)) {\n\t\t\t$query = \"INSERT INTO users SET login='$login', password='$password'\";\n\t\t\tmysqli_query($link, $query);\n\t\t\t\n\t\t\t$_SESSION['auth'] = true;\n\t\t\t\n\t\t} else {\n\t\t\t// логин занят, выведем сообщение об этом\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы при попытке\n\t\tрегистрации выполнялась проверка на занятость\n\t\tлогина и, если он занят, - выводите сообщение\n\t\tоб этом и просите ввести другой логин.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/validation/","content":"\n\t\t\t\t<h1>Валидация данных при регистрации на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы не накладываем никаких ограничений\n\tна пару логин-пароль, однако, это неправильно.\n\tК примеру, сейчас у нас пользователи случайно\n\tили намеренно могут зарегистрироваться с\n\tпустым логином или паролем, или с паролем,\n\tсостоящим из одного символа. Такой пароль\n\tбудет слишком простым и не безопасным.\n</p>\n<p>\n\tУчтите, что если какое-то поле вбито некорректно,\n\tформа не должна очищаться, так как это будет\n\tдоставлять ему неудобство пользователю: он\n\tвводил-вводил данные, нажал - и все пропало,\n\tхотя ошибка возможно была в одном символе.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы нельзя было\n\t\tзарегистрировать пользователя с пустым логином\n\t\tили паролем.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы логин мог\n\t\tсодержать только латинские буквы и цифры.\n\t\tВ случае, если это не так, выводите сообщение\n\t\tоб этом над формой.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы логин был\n\t\tдлиной от <code class=\"number inline\">4</code> до <code class=\"number inline\">10</code> символов.\n\t\tВ случае, если это не так, выводите сообщение\n\t\tоб этом над формой.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы пароль был\n\t\tдлиной от <code class=\"number inline\">6</code> до <code class=\"number inline\">12</code> символов.\n\t\tВ случае, если это не так, выводите сообщение\n\t\tоб этом над формой.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте ваш код так, чтобы, если логин\n\t\tили пароль вбиты некорректно, над соответствующим\n\t\tинпутом выводилось сообщение об этом.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСпросите у пользователя при регистрации еще\n\t\tи email. Занесите его в базу данных. Выполните\n\t\tпроверку емейла на корректность и, если он\n\t\tнекорректен, над соответствующим инпутом\n\t\tвыведите сообщение об этом.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСпросите у пользователя при регистрации еще\n\t\tи дату рождения в формате <i>день.месяц.год</i>.\n\t\tЗанесите дату в базу данных. Выполните проверку\n\t\tдаты на соответствие формату.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСпросите у пользователя при регистрации еще\n\t\tи страну проживания. Предложите ему выбрать\n\t\tодну из стран с помощью выпадающего списка\n\t\t<code class=\"code inline\">select</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/hashing/","content":"\n\t\t\t\t<h1>Хеширование пароля на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tХранить пароль в открытом виде - неправильно.\n\tХакер-злоумышленник может получить доступ\n\tк вашей базе данных и украсть пароли.\n</p>\n<p>\n\tПоэтому обычно логин хранится в открытом\n\tвиде, а пароль хешируется специальной функцией\n\t<code class=\"code inline\">md5</code>, которая параметром принимает\n\tпароль, а возвращает его <dfn>хеш</dfn>, по которому\n\tнельзя восстановить этот самый пароль.\n</p>\n<p>\n\tДавайте, например, найдем хеш какой-нибудь строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\techo md5('12345'); // выведет '827ccb0eea8a706c4c34a16891f84e7b'\n?&gt;</code>\n</div>\n<p>\n\tСейчас нам необходимо переделать нашу регистрацию\n\tи нашу авторизацию. Для начала я бы советовал\n\tочистить таблицу с юзерами, так как там сейчас\n\tхранятся пароли в открытом виде, а должны\n\tхранится их хеши. Затем при тестировании\n\tрегистрации таблица заполнится данными в\n\tновом формате.\n</p>\n<p>\n\tДавайте теперь поправим нашу регистрацию\n\tтак, чтобы при сохранении нового пользователя\n\tв базу добавлялся не пароль, а его хеш.\n</p>\n<p>\n\tОписанная правка будет представлять собой\n\tчто-то такое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$login = $_POST['login'];\n\t$password = md5($_POST['password']); // преобразуем пароль в его хеш\n\t\n\t$query = \"INSERT INTO users SET login='$login', password='$password'\";\n?&gt;</code>\n</div>\n<p>\n\tВнесем аналогичные правки в авторизацию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$login = $_POST['login'];\n\t$password = md5($_POST['password']); // преобразуем пароль в его хеш\n\t\t\n\t$query = \"SELECT * FROM users WHERE login='$login' AND password='$password'\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВнесите изменения в регистрацию с учетом\n\t\tхеширования, зарегистрируйте пару новых пользователей,\n\t\tубедитесь, что в базу данных они добавились\n\t\tс хешированными паролями.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВнесите изменения в авторизацию с учетом\n\t\tхеширования, попробуйте авторизоваться под\n\t\tзарегистрированными ранее пользователями.\n\t</p>\n</div>\n\n<h2>Добавляем соль в регистрацию</h2>\n<p>\n\tИтак, вы уже знаете, что хеширование через\n\t<code class=\"code inline\">md5</code> - необратимый процесс и хакер,\n\tполучивший доступ к хешу, не сможет получить\n\tпо этому хешу пароль.\n</p>\n<p>\n\tНа самом деле это утверждение не совсем верное\n\t- в настоящее время злые хакеры составили\n\tбиблиотеки хешей популярных и не очень паролей\n\tи любой дурак может разгадать пароль, просто\n\tзагуглив его хеш.\n</p>\n<p>\n\tРечь идет о достаточно простых, популярных\n\tпаролях.\n</p>\n<p>\n\tЗагуглите, например, хеш <i>827ccb0eea8a706c4c34a16891f84e7b</i>\n\tи сразу в поиске гугла вы увидите, что это\n\tпароль <code class=\"string inline\">'12345'</code>.\n</p>\n<p>\n\tХеши достаточно сложных паролей таким образом\n\tне разгадать (попробуйте).\n</p>\n<p>\n\tВы можете спросить, в чем тогда проблема\n\t- давайте все мы будем регистрироваться со\n\tсложными паролями. Есть, однако, проблема\n\t- большинство пользователей не задумываются\n\tо безопасности своих данных и могут вводить\n\tдостаточно простые пароли.\n</p>\n<p>\n\tМы можем при регистрации заставлять придумывать\n\tболее длинные пароли, ограничивая, к примеру,\n\tминимальное количество символов <code class=\"number inline\">6</code>-ю\n\tили <code class=\"number inline\">8</code>-ю, однако, все равно будут появляться\n\tпароли вида <code class=\"string inline\">'123456'</code> или <code class=\"string inline\">'12345678'</code>.\n</p>\n<p>\n\tМожно, конечно, придумать более умный алгоритм\n\tпроверки пароля на сложность, но есть другое\n\tрешение.\n</p>\n<p>\n\tСуть этого решения такая: пароли надо <dfn>посолить</dfn>.\n\tСоль - это специальная случайная строка,\n\tкоторая будет добавляться к паролю при регистрации\n\tи хеш уже будет вычисляться не от простого\n\tпароля типа, а от строки соль+пароль, то\n\tесть от соленого пароля.\n</p>\n<p>\n\tТо есть при регистрации вы будете делать\n\tчто-то типа такого:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$salt = '1sJg3hfdf'; // соль - сложная случайная строка\n\t$password = md5($salt . $_POST['password']); // преобразуем пароль в соленый хеш\n?&gt;</code>\n</div>\n<p>\n\tПри этом соль будет разная для каждого пользователя,\n\tее нужно будет генерировать случайным образом\n\tв момент регистрации.\n</p>\n<p>\n\tВот готовая функция, которая сделает это:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tfunction generateSalt()\n\t{\n\t\t$salt = '';\n\t\t$saltLength = 8; // длина соли\n\t\t\n\t\tfor($i = 0; $i &lt; $saltLength; $i++) {\n\t\t\t$salt .= chr(mt_rand(33, 126)); // символ из ASCII-table\n\t\t}\n\t\t\n\t\treturn $salt;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tС помощью этой функции можно переписать наш\n\tкод вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$salt = generateSalt(); // соль\n\t$password = md5($salt . $_POST['password']); // соленый пароль\n?&gt;</code>\n</div>\n<p>\n\tЕще раз повторю, что это были изменения при\n\tрегистрации - в БД сохраняем не просто хеш\n\tпароля, а хеш соленого пароля.\n</p>\n<p>\n\tЭто еще не все: в таблице с юзерами кроме\n\tполя <code class=\"string inline\">login</code> и <code class=\"string inline\">password</code> нужно\n\tсделать еще и поле <code class=\"string inline\">salt</code>, в котором\n\tмы будем хранить соль каждого пользователя.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанную выше регистрацию с соленым\n\t\tпаролем.\n\t</p>\n</div>\n\n<h2>Добавляем соль в авторизацию</h2>\n<p>\n\tТеперь нам необходимо поменять авторизацию.\n\tЗдесь уже изменения будут более существенными.\n</p>\n<p>\n\tУже не получится проверить правильность пары\n\tлогин-пароль сразу же, одним запросом. Почему:\n\tпотому что, чтобы проверить пароль, надо\n\tполучить его соленый хеш, а соль хранится\n\tв базе данных и уникальная для каждого логина.\n</p>\n<p>\n\tПридется вначале получить запись только по\n\tлогину, прочитать соль, посолить введенный\n\tпароль и сравнить с соленым паролем из базы\n\tи только, если они совпадают, - авторизовывать\n\tпользователя.\n</p>\n<p>\n\tУчтите, что может такое быть, что логин вбит\n\tнеправильно, в этом случае проверку пароля\n\tможно не осуществлять, а сразу вывести, что\n\tавторизация не возможна - данные не верны:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$login = $_POST['login'];\n\t\n\t$query = \"SELECT * FROM users WHERE login='$login'\";\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n\t\t\n\tif (!empty($user)) {\n\t\t// пользователь с таким логином есть, теперь надо проверять пароль...\n\t} else {\n\t\t// пользователя с таким логином нет, выведем сообщение\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте добавим проверку пароля:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$login = $_POST['login'];\n\t\n\t$query = \"SELECT * FROM users WHERE login='$login'\";\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n\t\t\n\tif (!empty($user)) {\n\t\t$salt = $user['salt']; // соль из БД\n\t\t$hash = $user['password']; // соленый пароль из БД\n\t\t\n\t\t$password = md5($salt . $_POST['password']); // соленый пароль от юзера\n\t\t\n\t\t// Сравниваем соленые хеши\n\t\tif ($password == $hash) {\n\t\t\t// все ок, авторизуем...\n\t\t} else {\n\t\t\t// пароль не подошел, выведем сообщение\n\t\t}\n\t} else {\n\t\t// пользователя с таким логином нет, выведем сообщение\n\t}\n?&gt;</code>\n</div>\n<div class=\"notice\">\n\t<p>\n\t\tВ целях безопасности пользователю обычно\n\t\tне сообщают, что именно не подошло - логин\n\t\tили пароль, чтобы усложнить подбор пар логин-пароль\n\t\tхакерами. Просто выводят сообщение о том,\n\t\tчто пара логин-пароль неверна или что-то\n\t\tв таком роде.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанную выше авторизацию с соленым\n\t\tпаролем. Попробуйте зарегистрируйтесь, авторизуйтесь,\n\t\tубедитесь, что все работает.\n\t</p>\n</div>\n\n<h2>Используем функцию password_hash</h2>\n<p>\n\tНа самом деле функция <code class=\"code inline\">md5</code> и соление\n\tпароля с ее помощью считается устаревшим.\n\tМы изучали ее, чтобы вы поняли дальнейший\n\tматериал, а также потому, что вы можете столкнуться\n\tс этим, работая с чужими проектами.\n</p>\n<p>\n\tСуществует более совершенный способ получить\n\tсоленый пароль. Для этого используется функция\n\t<code class=\"code inline\">password_hash</code>. Первым параметром она\n\tпринимает строку, а вторым - алгоритм шифрования\n\t(о нем позднее), и возвращает хеш этой строки\n\tвместе с солью.\n</p>\n<p>\n\tПопробуйте несколько раз запустите этот код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\techo password_hash('12345', PASSWORD_DEFAULT);\n?&gt;</code>\n</div>\n<p>\n\tВы каждый раз будете получать разный результат\n\tи в этом результате первая часть строки будет\n\tявляться солью, а вторая часть - соленым паролем.\n</p>\n<p>\n\tПусть у нас есть хеш, полученный из функции\n\t<code class=\"code inline\">password_hash</code> и какой-то пароль. Чтобы\n\tпроверить, это хеш этого пароля или нет,\n\tследует использовать функцию <code class=\"code inline\">password_verify</code>\n\t- первым параметром она принимает пароль,\n\tа вторым - хеш, и возвращает <code class=\"code inline\">true</code>\n\tили <code class=\"code inline\">false</code>.\n</p>\n<p>\n\tДавайте посмотрим на примере:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$password = '12345'; // пароль\n\t$hash = '$2y$10$xoYFX1mFPxBSyxaRe3iIRutxkIWhxGShzEhjYUVd3qpCUKfJE1k7a'; // хеш\n\t\n\tif (password_verify($password, $hash)) {\n\t\t// хеш от этого пароля\n\t} else {\n\t\t// хеш не от этого пароля\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЧто это дает нам на практике: мы можем не\n\tсоздавать в базе данных отдельное поле для\n\tхранения соли, не заморачиваться с генерированием\n\tэтой соли - PHP все сделает за нас!\n</p>\n<p>\n\tТо есть получится, что в базе данных в поле\n\t<code class=\"string inline\">password</code> мы будем хранить соленый\n\tпароль вместе с его солью. При этом хешированный\n\tпароль будет иметь большую длину. Поэтому\n\tв базе данных нам нужно исправить размер\n\tполя с паролем и установить ее в <code class=\"number inline\">60</code>\n\tсимволов.\n</p>\n<p>\n\tТеперь давайте поправим код регистрации.\n\tВот то, что есть сейчас:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tfunction generateSalt()\n\t{\n\t\t$salt = '';\n\t\t$saltLength = 8; // длина соли\n\t\t\n\t\tfor($i = 0; $i &lt; $saltLength; $i++) {\n\t\t\t$salt .= chr(mt_rand(33, 126)); // символ из ASCII-table\n\t\t}\n\t\t\n\t\treturn $salt;\n\t}\n\t\n\t$salt = generateSalt(); //  соль\n\t$password = md5($salt . $_POST['password']); // преобразуем пароль в соленый хеш\n?&gt;</code>\n</div>\n<p>\n\tС помощью <code class=\"code inline\">password_hash</code> мы сократим это до:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$password = password_hash($_POST['password'], PASSWORD_DEFAULT);\n?&gt;</code>\n</div>\n<p>\n\tАналогичным образом подправится код авторизации:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$login = $_POST['login'];\n\t\n\t$query = \"SELECT * FROM users WHERE login='$login'\"; // получаем юзера по логину\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n\t\n\tif (!empty($user)) {\n\t\t$hash = $user['password']; // соленый пароль из БД\n\t\t\n\t\t// Проверяем соответствие хеша из базы введенному паролю\n\t\tif (password_verify($_POST['password'], $hash)) {\n\t\t\t// все ок, авторизуем...\n\t\t} else {\n\t\t\t// пароль не подошел, выведем сообщение\n\t\t}\n\t} else {\n\t\t// пользователя с таким логином нет, выведем сообщение\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте вашу авторизацию и регистрацию\n\t\tна новые изученные функции.\n\t</p>\n</div>\n\n<!--\n<h2>Второй параметр</h2>\n<p>\n\tДавайте теперь разберемся со вторым параметром\n\tфункции <code class=\"code inline\">password_hash</code> (<i>при первом\n\tчтении можно пропустить</i>). В нем мы указываем\n\tалгоритм шифрования. На самом деле, этот\n\tпараметр зарезервирован создателями PHP на\n\tбудущее.\n</p>\n<p>\n\tВ настоящее время алгоритмом по умолчанию\n\tбудет алгоритм <code class=\"code inline\">BCrypt</code> (то есть аналог\n\tmd5, но мощнее), который своим результатом\n\tвозвращает строку соль+хеш размером <code class=\"number inline\">60</code>\n\tсимволов.\n</p>\n<p>\n\tЭто значит, <b>что поле password в базе данных\n\tследует установить такого размера - <code class=\"number inline\">60</code>\n\tсимволов</b>, иначе ничего не будет работать\n\tверно.\n</p>\n<p>\n\tАлгоритм <code class=\"code inline\">BCrypt</code> можно указать явно\n\tво втором параметре функции <code class=\"code inline\">password_hash</code>,\n\tнаписав там <code class=\"sql inline\">PASSWORD_BCRYPT</code>.\n</p>\n<p>\n\tЕсли же оставить там <code class=\"sql inline\">PASSWORD_DEFAULT</code>\n\t- то PHP возьмет алгоритм по умолчанию, то\n\tесть тот же <code class=\"code inline\">BCrypt</code> - но это в настоящее\n\tвремя. В будущем возможно <code class=\"code inline\">BCrypt</code> устареет\n\tтакже, как и md5 и будет заменен более мощным\n\tалгоритмом.\n</p>\n<p>\n\tВ таком случае изменения в вашем коде произойдут\n\tавтоматически при переходе на новую версию PHP.\n</p>\n-->\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/profile/","content":"\n\t\t\t\t<h1>Реализация профиля на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем просмотр профиля\n\tпользователя. Под профилем понимается информация,\n\tкоторую этот пользователь указал при регистрации.\n</p>\n<p>\n\tСделаем так, чтобы можно было смотреть профиль\n\tлюбого из пользователей. Для этого сделаем\n\tстраницу <code class=\"path inline\">profile.php</code>, в которую <code class=\"sql inline\">GET</code>\n\tпараметром будем передавать <code class=\"string inline\">id</code> пользователя,\n\tкоторого мы хотим посмотреть.\n</p>\n<p>\n\tНа странице профиля мы будем показывать не\n\tвсю информацию, которую указал о себе пользователь.\n\tК примеру, пароль там показывать точно не\n\tстоит. Кроме того, скорее всего показ емейла\n\tтакже будет лишним, так как в этом случае\n\tспамеры могут собирать эти емейлы программами-парсерами\n\tи рассылать спам на них.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tПусть при регистрации мы спрашивали у пользователя\n\t\tлогин, пароль, имя, отчество, фамилию, дату\n\t\tрождения. Выведите в профиле пользователя\n\t\tвсе эти данные, кроме пароля.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tвместо даты рождения показывался текущий\n\t\tвозраст пользователя.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте страницу <code class=\"path inline\">users.php</code>, зайдя\n\t\tна которую любой пользователь нашего сайта\n\t\tможет увидеть список всех зарегистрированных\n\t\tпользователей нашего сайта в виде ссылок.\n\t\tКаждая ссылка будет вести на соответствующий\n\t\tпрофиль.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/account/","content":"\n\t\t\t\t<h1>Личный кабинет на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПод личным кабинетом понимается место, где\n\tпользователь может редактировать данные своего\n\tпрофиля. Давайте сделаем страницу <code class=\"path inline\">account.php</code>,\n\tзайдя на которую пользователь увидит форму\n\tдля редактирования данных своего профиля\n\t(кроме логина и пароля, их следует обрабатывать\n\tособым образом).\n</p>\n<p>\n\tОбратите внимание на то, что <code class=\"string inline\">id</code> пользователя\n\tмы не передаем <code class=\"sql inline\">GET</code> параметром - мы\n\tсделаем так, чтобы каждый пользователь на\n\tстранице <code class=\"path inline\">account.php</code> видел данные\n\tсвоего профиля, а не чужого.\n</p>\n<p>\n\tДля этого следует при авторизации пользователя\n\tмы должны в сессию записать <code class=\"string inline\">id</code> этого\n\tпользователя, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (password_verify($_POST['password'], $hash)) {\n\t\t$_SESSION['auth'] = true;\n\t\t$_SESSION['id'] = $user['id'];\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЗатем по заходу на страницу <code class=\"path inline\">account.php</code>\n\tмы будем делать <code class=\"sql inline\">SELECT</code> запрос, который\n\tбудет доставать из БД пользователя с <code class=\"string inline\">id</code>\n\tиз сессии:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$id = $_SESSION['id'];\n\t$query = \"SELECT * FROM users WHERE login='$id'\";\n\t\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n?&gt;</code>\n</div>\n<p>\n\tДанные пользователя мы должны показать в\n\tформе для редактирования. Пусть, к примеру,\n\tэто будут имя и фамилия пользователя:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"name\" value=\"&lt;?= $user['name'] ?&gt;\"&gt;\n\t&lt;input name=\"surname\" value=\"&lt;?= $user['surname'] ?&gt;\"&gt;\n\t&lt;input type=\"submit\" name=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПосле нажатия на кнопку отправки формы мы\n\tдолжны будем сделать запрос на обновление юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (!empty($_POST['submit'])) {\n\t\t$name = $_POST['name'];\n\t\t$surname = $_POST['surname'];\n\t\t\n\t\t$query = \"UPDATE users SET name='$name', surname='$surname' WHERE id=$id\";\n\t\tmysqli_query($link, $query);\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанный личный кабинет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/password-changing/","content":"\n\t\t\t\t<h1>Смена пароля на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСмену пароля нельзя просто сделать в личном\n\tкабинете. Дело в том, что пользователь может\n\tоставить свой компьютер без присмотра (например,\n\tв офисе), будучи авторизованным на нашем\n\tсайте. В этом случае, если разрешить просто\n\tменять пароль, то злоумышленник-недоброжелатель\n\tсможет сменить пароль на другой, что, конечно\n\tже, очень плохо.\n</p>\n<p>\n\tНеобходимо сделать так, чтобы смена пароля\n\tна новый требовала ввода старого пароля.\n</p>\n<p>\n\tДавайте реализуем страницу <code class=\"path inline\">changePassword.php</code>,\n\tзайдя на которую пользователь увидит форму\n\tс двумя инпутами - в первый он должен будет\n\tввести свой старый пароль, а во вторую - новый:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input name=\"old_password\"&gt;\n\t&lt;input name=\"new_password\"&gt;\n\t&lt;input type=\"submit\" name=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tПо нажатию на кнопку отправки мы должны сделать\n\tследующее:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$id = $_SESSION['id']; // id юзера из сессии\n\t$query = \"SELECT * FROM users WHERE id='$id'\";\n\t\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n\t\n\t$hash = $user['password']; // соленый пароль из БД\n\t$oldPassword = $_POST['old_password'];\n\t$newPassword = $_POST['new_password'];\n\t\n\t// Проверяем соответствие хеша из базы введенному старому паролю\n\tif (password_verify($oldPassword, $hash)) {\n\t\t$newPasswordHash = password_hash($newPassword, PASSWORD_DEFAULT);\n\t\t\n\t\t$query = \"UPDATE users SET password='$newPasswordHash' WHERE id='$id'\";\n\t\tmysqli_query($link, $query);\n\t} else {\n\t\t// старый пароль введен неверно, выведем сообщение\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанную смену пароля.\n\t</p>\n</div>\n\n<h2>Подтверждение пароля</h2>\n<p>\n\tЕсть еще один нюанс: старый и новый пароли\n\tследует вводить в инпуты с типом <code class=\"string inline\">password</code>.\n\tПолучается, что пользователь не будет видеть,\n\tчто именно он ввел вместо нового пароля,\n\tчто чревато ошибками. Необходимо сделать\n\tтак, чтобы для нового пароля вводился сам\n\tпароль и его подтверждение:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\" method=\"POST\"&gt;\n\t&lt;input type=\"password\" name=\"old_password\"&gt;\n\t&lt;input type=\"password\" name=\"new_password\"&gt;\n\t&lt;input type=\"password\" name=\"new_password_confirm\"&gt;\n\t&lt;input type=\"submit\" name=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте подтвержедние пароля при его смене.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/account-removing/","content":"\n\t\t\t\t<h1>Удаление аккаунта на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь сделаем возможность пользователю\n\tудалить свой аккаунт. Реализуйте для этого\n\tотдельную PHP страницу. По заходу на нее\n\tпользователь должен увидеть форму, в которую\n\tнеобходимо вбить пароль. Только после того,\n\tкак будет вбит верный пароль следует удалить\n\tаккаунт.\n</p>\n<p>\n\tДело в том, что удаление аккаунта - это важная\n\tоперация, а на все операции такого рода необходимо\n\tзапрашивать пароль, чтобы убедится в том,\n\tчто это не злоумышленник получил доступ к\n\tкомпьютеру пользователя.\n</p>\n<p>\n\tПокажу ключевой кусочек кода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$id = $_SESSION['id'];\n\t$query = \"SELECT * FROM users WHERE id='$id'\";\n\t\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n\t\n\t$hash = $user['password']; // соленый пароль из БД\n\t\t\n\t// Проверяем соответствие хеша из базы введенному старому паролю\n\tif (password_verify($_POST['password'], $hash)) {\n\t\t$query = \"DELETE FROM users WHERE id='$id'\";\n\t\tmysqli_query($link, $query);\n\t} else {\n\t\t//  пароль введен неверно, выведем сообщение\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте удаление аккаунта.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/auth/rights/","content":"\n\t\t\t\t<h1>Права доступа на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЧаще всего на сайте не один тип пользователей,\n\tа несколько и все они имеют разные права.\n\tК примеру, у вас могут быть обычные пользователи\n\tи админы. Админы будут иметь больше прав,\n\tчем обычные юзеры.\n</p>\n<p>\n\tКаким образом это реализуется: создадим в\n\tтаблице с юзерами еще одно поле, назовем\n\tего <code class=\"string inline\">status</code> и для каждого пользователя\n\tбудем хранить его статус: пусть для администраторов\n\tслово <code class=\"string inline\">'admin'</code>, а для обычных пользователей\n\t- слово <code class=\"string inline\">'user'</code>.\n</p>\n<p>\n\tТеперь при авторизации пользователя в <code class=\"code inline\">$_SESSION['status']</code>\n\tзапишем статус пользователя из базы данных:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (password_verify($_POST['password'], $hash)) {\n\t\t$_SESSION['auth'] = true;\n\t\t$_SESSION['id'] = $user['id'];\n\t\t$_SESSION['status'] = $user['status']; // записываем статус\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть теперь у нас на сайте есть какая-то\n\tстраница, к который имеют доступ только админы.\n\tСделаем так, чтобы только админы видели контент\n\tэтой страницы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\tif (!empty($_SESSION['auth']) and $_SESSION['status'] === 'admin') {\n\t\t// покажем контент страницы только админам\n\t}\n?&gt;</code>\n</div>\n\n<h2>Изменения в регистрации</h2>\n<p>\n\tТакже нам необходимо внести изменения в нашу\n\tрегистрацию. Теперь при регистрации пользователя\n\tмы должны в <code class=\"sql inline\">INSERT</code> запросе указывать\n\tего статус.\n</p>\n<p>\n\tОбычно при начальной регистрации все пользователи\n\tнашего сайта получают самый низший статус,\n\tто есть в нашем случае <code class=\"string inline\">'user'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$query = \"INSERT INTO users\n\t\tSET login='$login', password='$password', 'status'='user'\";\n?&gt;</code>\n</div>\n<p>\n\tСтатусы повыше обычно раздает администратор.\n\tОн в админке видит список пользователей и\n\tможет любого сделать, к примеру, администратором.\n</p>\n<p>\n\tКак же на сайте в таком случае появится первый\n\tадминистратор? Самое простое: зарегистрировать\n\tобычного пользователя и через PhpMyAdmin\n\tсделать его админом.\n</p>\n<p>\n\tБолее сложное: при первом запуске на хостинге\n\tзапускать установку сайта, спросить с помощью\n\tформы логин и пароль и зарегистрировать самого\n\tпервого пользователя сайта, которому и присвоить\n\tстатус администратора.\n</p>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tИзмените код регистрации так, чтобы все добавляемые\n\t\tпользователи получали статус <code class=\"string inline\">'user'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВручную поменяйте какому-нибудь пользователю\n\t\tего статус на <code class=\"string inline\">'admin'</code>. Авторизуйтесь\n\t\tпод этим пользователем.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте страницу <code class=\"path inline\">admin.php</code>, к которой\n\t\tбудут иметь доступ только пользователи со\n\t\tстатусом <code class=\"string inline\">'admin'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на странице <code class=\"path inline\">admin.php</code> список\n\t\tвсех зарегистрированных пользователей вашего\n\t\tсайта в виде таблицы. Пусть в таблице будут\n\t\tдве колонки: логин и статус.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tпоявилась еще и третья колонка, со ссылкой,\n\t\tс помощью которой админ сможет удалить любого\n\t\tпользователя.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tряды таблицы с админами красились в красный\n\t\tцвет, а обычными юзерами - в зеленый.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tпоявилась еще одна колонка. В этой колонке\n\t\tадмин сможет менять права пользователей.\n\t\tСделайте так, чтобы для всех обычных пользователей\n\t\tтам стояла ссылка <i>сделать его админом</i>,\n\t\tа для админа - ссылка <i>сделать его юзером</i>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы на всех страницах сайта,\n\t\tв хедере зарегистрированный пользователь\n\t\tвидел свой логин и статус.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tдля админов в хедере сайта также показывалась\n\t\tссылка на админку.\n\t</p>\n</div>\n\n<h2>Нормализируем базу данных</h2>\n<p>\n\tСейчас мы храним статусы наших пользователей\n\tв той же таблице, где и самих пользователей.\n\tЭто, однако, неправильно - у нас получается\n\tне нормализованная таблица, ведь слова <code class=\"string inline\">'user'</code>\n\tи <code class=\"string inline\">'admin'</code> повторяются много раз.\n</p>\n<p>\n\tНеобходимо выполнить нормализацию - вынесем\n\tнаши статусы в отдельную таблицу <code class=\"string inline\">statuses</code>:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>user</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>admin</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tА в таблице <code class=\"string inline\">users</code> сделаем колонку\n\t<code class=\"string inline\">status_id</code>. Теперь при регистрации\n\tмы в колонку <code class=\"string inline\">status_id</code> будем записывать\n\t<code class=\"string inline\">id</code> статуса из таблицы <code class=\"string inline\">statuses</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$query = \"INSERT INTO users\n\t\tSET login='$login', password='$password', status_id='1'\";\n?&gt;</code>\n</div>\n<p>\n\tСамые сложные изменения произойдут при авторизации:\n\tдля того, чтобы получить статус пользователя,\n\tнужно будет выполнить <code class=\"sql inline\">LEFT JOIN</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;?php\n\t$login = $_POST['login'];\n\t\n\t// Получаем юзера по логину и джойним статус:\n\t$query = \"SELECT *, statuses.name as status FROM users\n\t\tLEFT JOIN statuses\n\tON users.status_id=statuses.id WHERE login='$login'\";\n\t\n\t$result = mysqli_query($link, $query);\n\t$user = mysqli_fetch_assoc($result);\n\t\n\tif (!empty($user)) {\n\t\t$hash = $user['password'];\n\t\t\n\t\tif (password_verify($_POST['password'], $hash)) {\n\t\t\t$_SESSION['auth'] = true;\n\t\t\t$_SESSION['status'] = $user['status']; // статус\n\t\t} else {\n\t\t\t\n\t\t}\n\t} else {\n\t\t\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте вашу авторизацию и регистрацию\n\t\tв соответствии с описанным в теории.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВнесите изменения в работу админки (вывод\n\t\tстатусов пользователей, изменения статусов\n\t\tи так далее).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/intro/","content":"\n\t\t\t\t<h1>Введение в движок PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПредставим себе, что у вас есть сайт из ста\n\tстраниц. Все эти страницы имеют общую схему\n\tследующего вида:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;title&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;header&gt;\n\t\t\theader\n\t\t&lt;/header&gt;\n\t\t&lt;main&gt;\n\t\t\tcontent\n\t\t&lt;/main&gt;\n\t\t&lt;header&gt;\n\t\t\tfooter\n\t\t&lt;/header&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tПри этом обычно такие страницы отличаются\n\tлишь тайтлами и контентами, а все остальные\n\tблоки остаются неизменными от страницы к странице.\n</p>\n<p>\n\tЭто создает определенные неудобства. Скажем,\n\tнам нужно поменять текст в хедере сайта.\n\tВ этом случае нам придется изменить сто файлов\n\tс нашими страницами.\n</p>\n<p>\n\tЭто не очень удобно. Поэтому с помощью PHP\n\tсайт обычно делают на специальном движке.\n\tЭтот движок позволяет сделать так, чтобы\n\tшаблон нашего сайта размещался в одном единственном\n\tфайле, а в зависимости от запрошенного URL\n\tв этот файл подгружался различный контент.\n</p>\n<p>\n\tВ следующих уроках мы разработаем несколько\n\tвариантов простейшего движка и посмотрим,\n\tкакие проблемы возникают при его использовании.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/htaccess/","content":"\n\t\t\t\t<h1>Использование htaccess в движке PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля того, чтобы сделать движок сайта, для\n\tначала нужно сделать так, чтобы запрос любого\n\tURL сайта обрабатывался одним файлом PHP.\n</p>\n<p>\n\tЭто делается с помощью специального файла\n\t<code class=\"path inline\">.htaccess</code>. Давайте создадим этот файл\n\tи включим его, написав в начале его текста\n\tследующие строки:\n</p>\n<div class=\"block\" data-file=\".htaccess\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"htaccess\">RewriteEngine On\nRewriteBase /</code>\n</div>\n<p>\n\tПосле этого мы можем указывать, какой файл\n\tдолжен обрабатывать запрощенный URL. Это\n\tделается с помощью команды <code class=\"code inline\">RewriteRule</code>.\n</p>\n<p>\n\tПосмотрим на работу этой команды на практике.\n\tК примеру, сделаем так, чтобы адрес <code class=\"path inline\">/test</code>\n\tбыл обработан файлом <code class=\"path inline\">index.php</code>:\n</p>\n<div class=\"block\" data-file=\".htaccess\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"htaccess\">RewriteRule /test index.php</code>\n</div>\n<p>\n\tПервым параметром команда <code class=\"code inline\">RewriteRule</code>\n\tна самом деле принимает регулярное выражение.\n\tДавайте с его помощью сделаем так, чтобы\n\tвсе URL обрабатывались файлом <code class=\"path inline\">index.php</code>:\n</p>\n<div class=\"block\" data-file=\".htaccess\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"htaccess\">RewriteRule .+ index.php</code>\n</div>\n<p>\n\tОднако, часть адресов все-таки не должны\n\tперенаправляться. Это адреса, которые ведут\n\tк файлам ресурсов: к CSS, JavaScript, картинкам\n\tи так далее.\n</p>\n<p>\n\tОтменим их перенаправление с помощью команды\n\t<code class=\"code inline\">RewriteCond</code>:\n</p>\n<div class=\"block\" data-file=\".htaccess\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"htaccess\">RewriteCond %{REQUEST_URI} !\\.(js|css|ico|jpg|png)$\nRewriteRule .+ index.php</code>\n</div>\n<p>\n\tНа странице <code class=\"path inline\">index.php</code> мы можем получить\n\tзапрошенный URL с помощью суперглобального\n\tмассива <code class=\"code inline\">$_SERVER</code>:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$url = $_SERVER['REQUEST_URI'];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте файл <code class=\"path inline\">.htaccess</code>. С его помощью\n\t\tреализуйте перенаправление всех запросов\n\t\tна <code class=\"path inline\">index.php</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите на <code class=\"path inline\">index.php</code> запрошенный URL.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/files/","content":"\n\t\t\t\t<h1>Движок на файлах в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРеализуем движок сайта, который позволит\n\tнам сделать файл шаблона, к которому в зависимости\n\tот URL будет подключаться различный контент.\n</p>\n<p>\n\tПусть структура нашей страницы выглядит следующим\n\tобразом:\n</p>\n<div class=\"block\" data-file=\"layout.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;title&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;header&gt;\n\t\t\theader\n\t\t&lt;/header&gt;\n\t\t&lt;main&gt;\n\t\t\tcontent\n\t\t&lt;/main&gt;\n\t\t&lt;header&gt;\n\t\t\tfooter\n\t\t&lt;/header&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tДавайте в том месте, в которое должна происходить\n\tвставка контента вставим какую-нибудь придуманную\n\tнами команду на вставку, например вот такую:\n\t<code class=\"code inline\">{{ content }}</code>. Изменим шаблон нашего сайта:\n</p>\n<div class=\"block\" data-file=\"layout.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;title&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;header&gt;\n\t\t\theader\n\t\t&lt;/header&gt;\n\t\t&lt;main&gt;\n\t\t\t{{ content }}\n\t\t&lt;/main&gt;\n\t\t&lt;header&gt;\n\t\t\tfooter\n\t\t&lt;/header&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tСделаем теперь папку <code class=\"path inline\">view</code>, в которую\n\tбудем размещать файлы контента. Прямо в этой\n\tпапке или в подпапках.\n</p>\n<p>\n\tПервый файл будет таким:\n</p>\n<div class=\"block\" data-file=\"view/page1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\tcontent 1\n&lt;/div&gt;</code>\n</div>\n<p>\n\tВторой файл будет таким:\n</p>\n<div class=\"block\" data-file=\"view/dir/page2.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\tcontent 2\n&lt;/div&gt;</code>\n</div>\n<p>\n\tТретий файл будет таким:\n</p>\n<div class=\"block\" data-file=\"view/dir/sub/page3.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\tcontent 3\n&lt;/div&gt;</code>\n</div>\n<p>\n\tДавайте теперь сделаем так, чтобы по URL\n\tиз адресной строки подтягивался соответствующий\n\tфайл. В нашем случае по урлу <code class=\"path inline\">/page1</code>\n\tбудет первый файл, по урлу <code class=\"path inline\">/dir/page2</code>\n\t- второй, и по урлу <code class=\"path inline\">/dir/sub/page3</code>\n\t- третий.\n</p>\n<p>\n\tПриступим к реализации. Для начала в файле\n\t<code class=\"path inline\">.htaccess</code> сделаем так, чтобы все запрошенные\n\tадреса, кроме файлов ресурсов, редиректились\n\tна страницу <code class=\"path inline\">index.php</code>:\n</p>\n<div class=\"block\" data-file=\".htaccess\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"htaccess\">RewriteEngine On\nRewriteBase /\n\nRewriteCond %{REQUEST_URI} !\\.(js|css|ico|jpg|png|gif)$\nRewriteRule .+ index.php</code>\n</div>\n<p>\n\tНа странице <code class=\"path inline\">index.php</code> получим в переменную\n\tзапрошенный URL:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$url = $_SERVER['REQUEST_URI'];\n?&gt;</code>\n</div>\n<p>\n\tЗатем получим текст файла с шаблоном:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$layout = file_get_contents('layout.php');\n?&gt;</code>\n</div>\n<p>\n\tТеперь по URL получим из папки <code class=\"path inline\">view</code>\n\tсоответствующий файл контента:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$content = file_get_contents('view' . $url . '.php');\n?&gt;</code>\n</div>\n<p>\n\tЗаменим в тексте шаблона придуманную нами\n\tкоманду на полученный из файла контент:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$layout = str_replace('{{ content }}', $content, $layout);\n?&gt;</code>\n</div>\n<p>\n\tВыведем в браузер файл шаблона с подставленным\n\tшаблоном:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $layout;\n?&gt;</code>\n</div>\n<p>\n\tСоберем все вместе и получим следующий код:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$url = $_SERVER['REQUEST_URI'];\n\t\n\t$layout  = file_get_contents('layout.php');\n\t$content = file_get_contents('view' . $url . '.php');\n\t\n\t$layout = str_replace('{{ content }}', $content, $layout);\n\t\n\techo $layout;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанный движок на файлах.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/files-title/","content":"\n\t\t\t\t<h1>Тайтл в движке на файлах в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВо всех движках, в которых контент подключается\n\tк шаблону сайта, появляется проблема тайтла.\n\tДело в том, что страницы сайта отличаются\n\tне только контентами, но и тайтлами. При\n\tэтом тайтл в коде находится совсем в другом месте.\n</p>\n<p>\n\tПоэтому помимо вставки контента, нашему движку\n\tнужно указать место для вставки тайтла. Придумаем\n\tсоответствующую команду для этого:\n</p>\n<div class=\"block\" data-file=\"layout.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;{{ title }}&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;header&gt;\n\t\t\theader\n\t\t&lt;/header&gt;\n\t\t&lt;main&gt;\n\t\t\t{{ content }}\n\t\t&lt;/main&gt;\n\t\t&lt;header&gt;\n\t\t\tfooter\n\t\t&lt;/header&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tДавайте теперь рассмотрим варианты, как можно\n\tхранить и получать тайтлы страниц.\n</p>\n\n<h2>Тайтлы в массиве</h2>\n<p>\n\tСделаем теперь файл, в котором в виде массива\n\tбудем хранить урлы страниц и соответствующие\n\tим тайтлы:\n</p>\n<div class=\"block\" data-file=\"titles.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\treturn [\n\t\t'/page1'         =&gt; 'page 1 title',\n\t\t'/dir/page2'     =&gt; 'page 2 title',\n\t\t'/dir/sub/page3' =&gt; 'page 3 title',\n\t];\n?&gt;</code>\n</div>\n<p>\n\tНа странице <code class=\"path inline\">index.php</code> получим массив\n\tтайтлов в переменную:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$titles = require 'titles.php';\n?&gt;</code>\n</div>\n<p>\n\tПолучим тайтл запрошенной страницы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$title = $titles[$url];\n?&gt;</code>\n</div>\n<p>\n\tЗаменим в файле шаблона соответствующую команду\n\tна наш тайтл:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$layout = str_replace('{{ title }}', $title, $layout);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте в вашем движке тайтлы, хранящиеся\n\t\tв массиве.\n\t</p>\n</div>\n\n<h2>Тайтлы в контенте</h2>\n<p>\n\tГораздо удобнее хранить тайтл странице в\n\tтом же месте, где ее контент. Для этого в\n\tфайле контента можно придумать какую-нибудь\n\tкоманду, задающую файл этой страницы.\n</p>\n<p>\n\tНапример, можно сделать вот так:\n</p>\n<div class=\"block\" data-file=\"view/page1.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">{{ title: \"page 1 title\" }}\n&lt;div&gt;\n\tcontent 1\n&lt;/div&gt;</code>\n</div>\n<p>\n\tДавайте сделаем так, чтобы движок перед вставкой\n\tконтента извлекал из него тайтл и вставлял\n\tего в соответствующее место шаблона.\n</p>\n<p>\n\tДля начала получим тайтл из текста контента:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_match('#{{ title: \"(.+?)\" }}#', $content, $match);\n\t$title = match[1];\n?&gt;</code>\n</div>\n<p>\n\tА теперь в тексте контента удалим не нужную\n\tбольше команду, чтобы она не попала в текст\n\tстраницы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$content = preg_replace('#{{ title: \"(.+?)\" }}#', '', $content);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте в вашем движке тайтлы, хранящиеся\n\t\tв контенте страницы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/error-page/","content":"\n\t\t\t\t<h1>Страница 404 в движке на файлах в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЕсли пользователь вобьет в адресную строку\n\tнекорректный URL мы должны показать страницу\n\tс ошибкой. Пусть контент страницы с ошибкой\n\tбудет хранится в соответствующем файле:\n</p>\n<div class=\"block\" data-file=\"view/404.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\tpage not found\n&lt;/div&gt;</code>\n</div>\n<p>\n\tДля того, чтобы определить некорректность\n\tзапроса, нам необходимо проверить существование\n\tфайла контента, соответствующего запрошенному URL:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$path = 'view' . $url . '.php';\n\t\n\tif (file_exists($path)) {\n\t\t// файл есть\n\t} else {\n\t\t// файла нет\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте будем отдавать файл контента, если\n\tон есть, и файл с ошибкой, если контента нет:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$path = 'view' . $url . '.php';\n\t\n\tif (file_exists($path)) {\n\t\t$content = file_get_contents($path);\n\t} else {\n\t\t$content = file_get_contents('view/404.php');\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ случае с ошибкой мы должны отправить в\n\tбраузер заголовок с <code class=\"number inline\">404</code> ошибкой, чтобы\n\tявно сообщить о том, что страница не найдена.\n\tСделаем это:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$path = 'view' . $url . '.php';\n\t\n\tif (file_exists($path)) {\n\t\t$content = file_get_contents($path);\n\t} else {\n\t\theader('HTTP/1.0 404 Not Found');\n\t\t$content = file_get_contents('view/404.php');\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте в вашем движке отдачу страницы\n\t\tс <code class=\"number inline\">404</code> ошибкой.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/database/","content":"\n\t\t\t\t<h1>Движок на базе данных в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь сделаем движок сайта, в котором\n\tконтент страниц будет хранится не в файлах,\n\tа в базе данных. Пусть у нас в базе данных\n\tесть вот такая таблица:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>pages</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>title</th>\n\t\t\t<th>content</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>title1</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent1\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>title2</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent2\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>title3</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent3\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tПусть мы хотим получать наши страницы по\n\tурлам вида <code class=\"path inline\">/page/1</code>, где число будет\n\tпредставлять собой <code class=\"string inline\">id</code> той страницы,\n\tкоторую мы хотим получить.\n</p>\n<p>\n\tПриступим к реализации. Для начала в отдельном\n\tфайле сделаем подключение к базе данных и\n\tподключим этот файл к нашему:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$link = require 'connect.php';\n?&gt;</code>\n</div>\n<p>\n\tПолучим запрошенный URL:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$url = $_SERVER['REQUEST_URI'];\n?&gt;</code>\n</div>\n<p>\n\tС помощью регулярного выражения разделим\n\tурл на части:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_match('#/page/(\\d+)#', $url, $match);\n?&gt;</code>\n</div>\n<p>\n\tЗапишем <code class=\"string inline\">id</code> из кармана в переменную:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$id = $match[1];\n?&gt;</code>\n</div>\n<p>\n\tВыполним запрос к базе данных, по <code class=\"string inline\">id</code>\n\tполучив запрошенную страницу:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM pages WHERE id=$id\";\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t$page = mysqli_fetch_assoc($result);\n?&gt;</code>\n</div>\n<p>\n\tПолучим файл шаблона:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$layout = file_get_contents('layout.php');\n?&gt;</code>\n</div>\n<p>\n\tВ файле шаблона выполним вставку тайтла и\n\tконтента:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$layout = str_replace('{{ title }}', $page['title'], $layout);\n\t$layout = str_replace('{{ content }}', $page['content'], $layout);\n?&gt;</code>\n</div>\n<p>\n\tОтправим собранную страницу сайта в браузер:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $layout;\n?&gt;</code>\n</div>\n<p>\n\tСоберем все вместе и получим следующий код:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\trequire 'connect.php';\n\t\n\t$url = $_SERVER['REQUEST_URI'];\n\tpreg_match('#/page/(\\d+)#', $url, $match);\n\t$id = $match[1];\n\t\n\t$query  = \"SELECT * FROM pages WHERE id=$id\";\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t$page   = mysqli_fetch_assoc($result);\n\t\n\t$layout = file_get_contents('layout.php');\n\t$layout = str_replace('{{ title }}', $page['title'], $layout);\n\t$layout = str_replace('{{ content }}', $page['content'], $layout);\n\t\n\techo $layout;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанный движок. Проверьте его работу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/human-readable-url/","content":"\n\t\t\t\t<h1>ЧПУ в движке на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ современном мире адреса с циферками вида\n\t<code class=\"path inline\">/page/1</code> считаются некрасивыми. Более\n\tкрасиво, когда для страницы указывается не\n\tее номер, а текстовое имя, соответствующее\n\tтайтлу страницы, например, вот так: <code class=\"path inline\">/page/my-first-page</code>.\n</p>\n<p>\n\tТакие адреса называются ЧПУ - человеко-понятные\n\tурл. Наличие ЧПУ удобнее пользователю, чем\n\tничего не говорящие ему номера <code class=\"string inline\">id</code>.\n\tКроме того, за ЧПУ поисковые системы будут\n\tповышать позиции нашего сайта.\n</p>\n<p>\n\tКусочек урла, соответствующей имени страницы,\n\tназывается <dfn>слаг</dfn> (slug). Давайте в\n\tнашей базе данных добавим нашим страницам\n\tколонку со слагами:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>pages</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>slug</th>\n\t\t\t<th>title</th>\n\t\t\t<th>content</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>my-first-page</td>\n\t\t\t<td>title1</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent1\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>my-second-page</td>\n\t\t\t<td>title2</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent2\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>my-third-page</td>\n\t\t\t<td>title3</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent3\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tПеределаем теперь наш движок на работу со\n\tслагами вместо айди. Для этого исправим регулярку:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpreg_match('#/page/([a-z0-9_-]+)#', $url, $match);\n\t$slug = $match[1];\n?&gt;</code>\n</div>\n<p>\n\tИ в условии поиска страницы укажем слаг вместо\n\tайди:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT * FROM pages WHERE slug='$slug'\";\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте ваш движок сайта на работу с\n\t\tЧПУ. Потестируйте его работу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/routing/","content":"\n\t\t\t\t<h1>Простой роутинг в движке в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке на нашем сайте была только\n\tодна группа урлов. Конечно же, обычно на\n\tсайте бывает несколько типов адресов.\n</p>\n<p>\n\tКаждая группа адресов будет обрабатываться\n\tсвоим регулярным выражением, которые называются\n\t<dfn>маршрутами</dfn> или <dfn>роутами</dfn>. Соответственно\n\tпроцесс сопоставления маршрутов и кода для\n\tих обработки называется <dfn>маршрутизацией</dfn>\n\tили <dfn>роутингом</dfn>\n</p>\n<p>\n\tПусть, к примеру, у нас есть два типа адресов.\n\tДавайте для каждой группы напишем свой роут:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (preg_match('#/page/([a-z0-9_-]+)#', $url, $params)) {\n\t\t// одна страница по слагу\n\t}\n\t\n\tif (preg_match('#/page/all#', $url, $params)) {\n\t\t// список всех страниц\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДля удобства вынесем код обработки каждого\n\tроута в отдельный файл:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (preg_match('#/page/([a-z0-9_-]+)#', $url, $params)) {\n\t\t$page = include 'view/page/show.php';\n\t}\n\t\n\tif (preg_match('#/page/all#', $url, $params)) {\n\t\t$page = include 'view/page/all.php';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tСвоим результатом подключаемые файлы должны\n\tвозвращать массив с тайтлом и контентом страницы.\n</p>\n<p>\n\tДавайте напишем код первого файла, выводящего\n\tодну страницу по ее слагу:\n</p>\n<div class=\"block\" data-file=\"view/page/show.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$slug   = $params[1];\n\t$query  = \"SELECT * FROM pages WHERE slug='$slug'\";\n\t\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t$page   = mysqli_fetch_assoc($result);\n\t\n\treturn $page;\n?&gt;</code>\n</div>\n<p>\n\tА теперь напишем код второго файла, выводящего\n\tсписок ссылок на все страницы:\n</p>\n<div class=\"block\" data-file=\"view/page/all.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$query = \"SELECT slug, title FROM pages\";\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t\n\tfor ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);\n\t\n\t$content = '';\n\tforeach ($data as $page) {\n\t\t$content .= '\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;a href=\"/page/'  . $page['slug'] . '\"&gt;' . $page['title'] . '&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t';\n\t}\n\t\n\t$page = [\n\t\t'title' =&gt; 'список всех страниц',\n\t\t'content' =&gt; $content\n\t];\n\t\n\treturn $page;\n?&gt;</code>\n</div>\n<p>\n\tПосле выполнения одного из условий в переменной\n\t<code class=\"code inline\">$page</code> всегда будет массив из одной\n\tструктуры. Используем этот массив, чтобы\n\tподставить тайтл и контент в шаблон сайта:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$layout = file_get_contents('layout.php');\n\t$layout = str_replace('{{ title }}', $page['title'], $layout);\n\t$layout = str_replace('{{ content }}', $page['content'], $layout);\n\t\n\techo $layout;\n?&gt;</code>\n</div>\n<p>\n\tСоберем все вместе и получим следующий код:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$url = $_SERVER['REQUEST_URI'];\n\t\n\tif (preg_match('#/page/([a-z0-9_-]+)#', $url, $params)) {\n\t\t$page = include 'view/page/show.php';\n\t}\n\t\n\tif (preg_match('#/page/all#', $url, $params)) {\n\t\t$page = include 'view/page/all.php';\n\t}\n\t\n\t$layout = file_get_contents('layout.php');\n\t$layout = str_replace('{{ title }}', $page['title'], $layout);\n\t$layout = str_replace('{{ content }}', $page['content'], $layout);\n\t\n\techo $layout;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть сайт с юзерами. Сделайте\n\t\tстраницу для показа одного юзера, страницу\n\t\tдля вывода всех юзеров и страницу с формой\n\t\tдля добавления нового юзера.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/routing-named-parameters/","content":"\n\t\t\t\t<h1>Роутинг с именованными параметрами на PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим одно из регулярных выражений,\n\tобрабатывающих URL:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (preg_match('#/page/([a-z0-9_-]+)#', $url, $params)) {\n\t\t$page = include 'view/page/show.php';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ данном случае получается, что наш параметр\n\tпопадает в карман. Затем мы вытаскиваем значение\n\tпараметра из кармана по его номеру:\n</p>\n<div class=\"block\" data-file=\"view/page/show.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$slug = $params[1];\n?&gt;</code>\n</div>\n<p>\n\tЭто на самом деле не очень красиво, особенно\n\tесли параметров будет несколько. Более удачной\n\tидеей будет сделать параметры с именами вместо\n\tномеров. Для этого используем именованные\n\tкарманы в нашей регулярке:\n</p>\n<div class=\"block\" data-file=\"index.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif (preg_match('#/page/(?&lt;slug&gt;[a-z0-9_-]+)#', $url, $params)) {\n\t\t$page = include 'view/page/show.php';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ таком случае мы сможем получить значение\n\tпараметра по его имени:\n</p>\n<div class=\"block\" data-file=\"view/page/show.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$slug = $params['slug'];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте параметры в роутах вашего движка\n\t\tна именованные.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/routing-several-parameters/","content":"\n\t\t\t\t<h1>Несколько параметров в роутах движка в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь у нас на сайте есть категории\n\tи страницы, принадлежащие этим категориям.\n\tДавайте сделаем таблицу с категориями:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>categories</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>slug</th>\n\t\t\t<th>name</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>first-category</td>\n\t\t\t<td>name1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>second-category</td>\n\t\t\t<td>name2</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tИ таблицу со страницами:\n</p>\n<div class=\"block\">\n\t<table>\n\t\t<caption>pages</caption>\n\t\t<tr>\n\t\t\t<th>id</th>\n\t\t\t<th>slug</th>\n\t\t\t<th>title</th>\n\t\t\t<th>content</th>\n\t\t\t<th>category_id</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>1</td>\n\t\t\t<td>my-first-page</td>\n\t\t\t<td>title1</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent1\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>2</td>\n\t\t\t<td>my-second-page</td>\n\t\t\t<td>title2</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent2\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t\t<td>1</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>3</td>\n\t\t\t<td>my-third-page</td>\n\t\t\t<td>title3</td>\n\t\t\t<td>\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\tcontent3\n\t\t\t\t&lt;/div&gt;\n\t\t\t</td>\n\t\t\t<td>2</td>\n\t\t</tr>\n\t</table>\n</div>\n<p>\n\tНа нашем сайте мы разрешаем, чтобы слаги\n\tстраниц из разных категорий совпадали. Это\n\tзначит, что в урле мы должны указать сначала\n\tслаг категории, а потом слаг страницы вот\n\tпо такой схеме: <code class=\"path inline\">/page/:category/:page</code>,\n\tгде через двоеточие указаны места, в которых\n\tбудут изменяющиеся параметры.\n</p>\n<p>\n\tДавайте напишем роуты для нашего сайта:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$route = '/page/(?&lt;catSlug&gt;[a-z0-9_-]+)/(?&lt;pageSlug&gt;[a-z0-9_-]+)';\n\tif (preg_match(\"#$route#\", $url, $params)) {\n\t\t$page = include 'view/page/show.php';\n\t}\n\t\n\t$route = '/page/(?&lt;catSlug&gt;[a-z0-9_-]+)';\n\tif (preg_match(\"#$route#\", $url, $params)) {\n\t\t$page = include 'view/page/category.php';\n\t}\n\t\n\t$route = '/';\n\tif (preg_match('#$route#', $url, $params)) {\n\t\t$page = include 'view/page/all.php';\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ обработчике первого роута будем показывать\n\tзапрошенную страницу:\n</p>\n<div class=\"block\" data-file=\"view/page/show.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$catSlug = $params['catSlug'];\n\t$pageSlug = $params['pageSlug'];\n\t\n\t$query = \"SELECT pages.title, pages.content \n\t\tFROM pages\n\tLEFT JOIN\n\t\tcategory ON category.id=pages.category_id\n\tWHERE\n\t\tpages.slug='$pageSlug' AND category.slug='$catSlug'\";\n\t\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t$page = mysqli_fetch_assoc($result);\n\t\n\treturn $page;\n?&gt;</code>\n</div>\n<p>\n\tВ обработчике второго роута будем показывать\n\tсписок страниц из указанной категории:\n</p>\n<div class=\"block\" data-file=\"view/page/all.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$catSlug = $params['catSlug'];\n\t\n\t$query = \"SELECT pages.slug, pages.title FROM pages\n\tLEFT JOIN\n\t\tcategory ON category.id=pages.category_id\n\tWHERE\n\t\tcategory.slug='$catSlug'\";\n\t\n\t$result = mysqli_query($link, $query) or die(mysqli_error($link));\n\t\n\tfor ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);\n\t\n\t$content = '';\n\tforeach ($data as $page) {\n\t\t$content .= '\n\t\t\t&lt;div&gt;\n\t\t\t\t&lt;a href=\"/page/' . $catSlug . '/'  . $page['slug'] . '\"&gt;' . $page['title'] . '&lt;/a&gt;\n\t\t\t&lt;/div&gt;\n\t\t';\n\t}\n\t\n\t$page = [\n\t\t'title' =&gt; 'список всех страниц категории ' . $catSlug,\n\t\t'content' =&gt; $content\n\t];\n\t\n\treturn $page;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас есть сайт с городами и странами.\n\t\tПусть по адресу <code class=\"path inline\">/</code> выводится список\n\t\tвсех городов, по адресу <code class=\"path inline\">/:country</code>\n\t\tвыводится список городов указанной в параметре\n\t\tстраны, а по адресу <code class=\"path inline\">/:country/:city</code>\n\t\tописание указанного города.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/book/prime/driver/practicum/","content":"\n\t\t\t\t<h1>Практика на движок в PHP</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте доску объявлений. Пользователь\n\t\tзаходит на сайт, выбирает рубрику и размещает\n\t\tв ней свое объявление.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте форум с обязательной регистрацией.\n\t\tЗарегистрованный пользователь может создавать\n\t\tтемы, отвечать в них. Кроме обычных пользователей\n\t\tдолжны быть еще и модераторы, которые могут\n\t\tудалять любые темы и банить пользователей,\n\t\tа также администратор сайта, который имеет\n\t\tдоступ к админке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте социальную сеть. Как она будет\n\t\tработать: пользователь регистрируется, заполняет\n\t\tсвой профиль и затем может добавлять друзей,\n\t\tобщаться в личку, оставлять сообщения на\n\t\tсвоей и чужих стенах.\n\t</p>\n</div>\n</div>\t\t\t"}]