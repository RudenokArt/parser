[{"url":"/ru/php/framework/laravel/book/prime/basis/intro/","content":"\n\t\t\t\t<h1>Введение в PHP фреймворк Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tLaravel представляет собой PHP фреймворк,\n\tреализующий подход <a href=\"/ru/php/book/oop/mvc/using/intro/\">MVC</a>.\n\tВ Laravel есть контроллеры, представления\n\tи модели.\n</p>\n<p>\n\tТакже этот фреймворк предоставляет\n\tудобный роутинг, встроенный шаблонизатор,\n\tсвою оболочку над базами данных,\n\tсессиями, куками и флеш сообщения,\n\tудобное связывание таблиц баз данных,\n\tвалидация, тестирование\n\tи многое другое.\n</p>\n<p>\n\tТакже в Laravel встроен специальный генератор\n\tкода под названием Artisan. Этот генератор\n\tпозволяет легко и удобно создавать\n\tнужные классы.\n</p>\n<p>\n\tСо всем этим мы и будем разбираться\n\tв рамках данного учебника. Давайте\n\tприступим:)\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/docs/","content":"\n\t\t\t\t<h1>Изучение документации Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tФреймворк Laravel очень богат возможностями.\n\tВ данном учебнике я стараюсь не перегружать\n\tвас лишней информацией и о некоторых, редко\n\tиспользуемых вещах умалчиваю.\n</p>\n<p>\n\tПолную информацию по фреймворку вы найдете в\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/\">русской документации</a>.\n\tУчтите, что она может отставать от оригинальной,\n\tпоэтому имейте ввиду, что основной источник\n\tистины - это <a href=\"https://laravel.com/docs/9.x/\">англоязычная документация</a>.\n</p>\n<p>\n\tПосле прохождения учебника в обязательном\n\tпорядке изучите документацию по приведенным\n\tссылкам.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/install/","content":"\n\t\t\t\t<h1>Установка фреймворка Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте установим фреймворк.\n\tЯ рекомендую делать это через composer\n\t(другие варианты см. в <a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/installation.md\">документации</a>).\n</p>\n<p>\n\tДля начала в терминале перейдите в папку\n\tвашего сервера. Затем выполните следующую\n\tкоманду, которая установит фреймворк\n\tв папку <code class=\"path inline\">laravel.local</code> (можете задать любую):\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">composer create-project laravel/laravel laravel.local</code>\n</div>\n<p>\n\tКогда установка будет успешно завершена,\n\tвам нужно будет запустить фреймворк.\n\tДля этого в терминале перейдите\n\tв папку с установленным фреймворком:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">cd laravel.local</code>\n</div>\n<p>\n\tПосле этого выполните следующую\n\tкоманду:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan serve</code>\n</div>\n<p>\n\tВ результате фреймворк будет запущен\n\tна определенном ip и порту. В терминале\n\tвы увидите ссылку. Перейдите по ней\n\tи в браузере откроется главная страница\n\tнашего сайта. Это значит, что\n\tвсе работает.\n</p>\n<p>\n\tЗапускать фреймворк через artisan нужно\n\tбудет каждый раз перед началом работы.\n\tПоэтому запомните или запишите нужную\n\tкоманду.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tУстановите фреймворк.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапустите фреймворк через artisan.\n\t\tПроверьте в браузере, что все работает.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/file-structure/","content":"\n\t\t\t\t<h1>Файловая структура Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/structure.md\">документация по файловой структуре</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в какой папке размещаются\n\t\tконтроллеры.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в какой папке размещаются\n\t\tпредставления.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в какой папке размещаются\n\t\tмодели.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в какой папке размещаются\n\t\tфайлы CSS.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в какой папке размещаются\n\t\tфайлы JavaScript.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/configuration/","content":"\n\t\t\t\t<h1>Конфигурирование Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/configuration.md\">документация по конфигурированию</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОткройте файл <code class=\"path inline\">.env</code> и изучите его содержимое.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОткройте папку <code class=\"path inline\">config</code> и изучите\n\t\tсодержимое его файлов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, что делает функция <code class=\"code inline\">env</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, как включить режим обслуживания.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, как включить режим отладки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВключите режим отладки в конфигурационном файле.\n\t</p>\n</div>\n<!--\nрежим dev и продакшн\n-->\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/database/","content":"\n\t\t\t\t<h1>Настройка доступа к БД в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНастройки работы с БД хранятся в файле <code class=\"path inline\">config/database.php</code>.\n\tЗдесь вы можете указать все используемые\n\tвами соединения к БД, а также задать соединение\n\tпо умолчанию. Примеры настройки большинства\n\tподдерживаемых видов подключений находятся\n\tв этом же файле.\n</p>\n<p>\n\tLaravel поддерживает различные движки базы\n\tданных: MySQL, Postgres, SQLite,\n\tSQL Server. Движок по умолчанию указан в\n\tследующей настройке:\n</p>\n<div class=\"block\" data-file=\"config/database.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t'default' =&gt; env('DB_CONNECTION', 'mysql'),\n?&gt;</code>\n</div>\n<p>\n\tСкорее всего вы будете использовать движок\n\t<code class=\"code inline\">mysql</code>, поэтому нужно настроить доступы\n\tк вашей базе именно для этого движка.\n</p>\n<p>\n\tДля этого в подмассиве <code class=\"code inline\">connections</code>\n\tнайдите подмассив <code class=\"code inline\">mysql</code> и введите\n\tтам доступы к вашей базе:\n</p>\n<div class=\"block\" data-file=\"config/database.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t'mysql' =&gt; [\n\t\t'driver' =&gt; 'mysql',\n\t\t'host' =&gt; env('DB_HOST', '127.0.0.1'),\n\t\t'port' =&gt; env('DB_PORT', '3306'),\n\t\t'database' =&gt; env('DB_DATABASE', 'test'), // !\n\t\t'username' =&gt; env('DB_USERNAME', 'root'), // !\n\t\t'password' =&gt; env('DB_PASSWORD', 'root'), // !\n\t\t'unix_socket' =&gt; env('DB_SOCKET', ''),\n\t\t'charset' =&gt; 'utf8mb4',\n\t\t'collation' =&gt; 'utf8mb4_unicode_ci',\n\t\t'prefix' =&gt; '',\n\t\t'strict' =&gt; true,\n\t\t'engine' =&gt; null,\n\t],\n?&gt;</code>\n</div>\n<p>\n\tПосле этого перезапустите\n\tпроект с помощью команды:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan serve</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте базу данных через PMA (PhpMyAdmin).\n\t\tПропишите ее в конфигурации Laravel.\n\t</p>\n</div>\n\n<h2>Возможные проблемы</h2>\n<p>\n\tНе факт, что после этого Laravel сможет подключиться\n\tк базе. Дело в том, что файл с настройками\n\tкешируется и это может привести к проблемам,\n\tкоторые будут выражаться в ошибке <i>Access\n\tdenied for user 'homestead'@'localhost'</i>\n\tпри попытке подключится к БД.\n</p>\n<p>\n\tРешение проблемы описано тут: <a href=\"https://stackoverflow.com/questions/29756194/access-denied-for-user-homesteadlocalhost-using-password-yes#answers-header\">stackoverflow.com</a>.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/dump-functions/","content":"\n\t\t\t\t<h1>Отладочные функции в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ Laravel вместо функции <code class=\"code inline\">var_dump</code>\n\tможно использовать специальные функции\n\t<code class=\"code inline\">dd</code> и <code class=\"code inline\">dump</code>.\n</p>\n<p>\n\tФункция <code class=\"code inline\">dd</code> (<span class=\"translate-en\">Dump and Die</span>) выводит\n\tданные на экран и вызывает <code class=\"code inline\">die</code>,\n\tблокируя дальнейшее выполнение кода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = User::all();\n\tdd($users);\n?&gt;</code>\n</div>\n<p>\n\tФункция <code class=\"code inline\">dump</code> также выводит данные\n\tна экран, но не блокирет дальнейшее\n\tвыполнение кода:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = User::all();\n\tdump($users);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в чем разница между\n\t\tфункциями <code class=\"code inline\">dd</code> и <code class=\"code inline\">dump</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в каких случаях будет\n\t\tудобно использовать одну функцию,\n\t\tа в каких - другую.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/basis/debugbar/","content":"\n\t\t\t\t<h1>Панель debugbar в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРекомендую вам установить специальную панель\n\t<a href=\"https://github.com/barryvdh/laravel-debugbar\">laravel-debugbar</a>.\n\tДанная панель - удобный инструмент, позволяющий контролировать\n\tи отлаживать код.\n</p>\n<p>\n\tВы всегда будете в курсе того, сколько\n\tпроизошло SQL запросов, сколько они заняли времени,\n\tчто записалось в лог, сможете посмотреть информацию\n\tо текущем пользователе, какие представления использовались\n\tдля генерации страницы, какие данные в них передавались\n\tи многое другое. Также в любой момент вы сможете просмотреть\n\tинформацию о предыдущих запросах, даже если произошёл редирект.\n</p>\n<p>\n\tПанель устанавливается через composer:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">composer require barryvdh/laravel-debugbar --dev</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУстановите данную панель. Перезапустите Laravel.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОбновите страницу браузера, в которой\n\t\tоткрыт фреймворк и убедитесь,\n\t\tчто снизу появилась установленная панель.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПонажимайте на вкладки панели и\n\t\tопределите, что выводится в каждой\n\t\tиз них.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/intro/","content":"\n\t\t\t\t<h1>Введение в маршруты в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\t<dfn>Маршруты</dfn> (или роуты) указывают фреймворку,\n\tчто показывать при обращении к определенному\n\tURI в браузере.\n</p>\n<p>\n\tМаршруты настраиваются в файле <code class=\"path inline\">routes/web.php</code>.\n\tИзначально там уже есть вот такой маршрут:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/', function () {\n\t\treturn view('welcome');\n\t});\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, маршрут представляет собой\n\tстатический метод <code class=\"code inline\">get</code> класса <code class=\"code inline\">Route</code>.\n</p>\n<p>\n\tПервым параметром этот метод принимает\n\tURI, а вторым параметром - анонимную функцию,\n\tкоторая выполнится при обращению пользователя\n\tк данному URI в адресной строке браузера.\n</p>\n<p>\n\tТо, что вернет эта анонимная функция через\n\t<code class=\"code inline\">return</code> и покажется в окне браузера.\n\tСейчас наша функция возвращает результат\n\tработы функции <code class=\"code inline\">view</code>. Пока не будем\n\tразбираться, что делает эта функция,\n\tа поправим наш маршрут на следующее:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/', function () {\n\t\treturn '!!!';\n\t});\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, теперь при обращении к URI\n\t<code class=\"path inline\">/</code> (то есть к главной странице сайта),\n\tна экран выведется строка <code class=\"string inline\">'!!!'</code>.\n</p>\n<p>\n\tВ файле <code class=\"code inline\">web.php</code> можно писать любое\n\tколичество маршрутов, указывая соответствующие\n\tадреса, например, так:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/', function () {\n\t\treturn 'главная страница сайта';\n\t});\n\t\n\tRoute::get('/posts', function () {\n\t\treturn 'список постов';\n\t});\n\t\n\tRoute::get('/post/1', function () {\n\t\treturn 'первый пост';\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы при обращении на адрес\n\t\t<code class=\"path inline\">/test</code> в браузер выводилось\n\t\tкакое-нибудь сообщение.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы при обращении на адрес\n\t\t<code class=\"path inline\">/dir/test</code> в браузер выводилось\n\t\tкакое-нибудь сообщение.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/parameters/","content":"\n\t\t\t\t<h1>Параметры маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно сделать так, чтобы Laravel сам разбивал\n\tURI так, чтобы его отдельные части попадали\n\tв заданные переменные. Для этого предназначены\n\t<dfn>параметры</dfn> маршрутов.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть у нас есть адреса вида\n\t<code class=\"path inline\">/post/1</code>, где вместо единицы\n\tможет быть любое число.\n</p>\n<p>\n\tДавайте напишем соответствующий маршрут,\n\tобъявив вторую его часть параметром. Для\n\tэтого придумаем имя параметра и возьмем\n\tего в фигурные скобки, вот так:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function () {\n\t\treturn '';\n\t});\n?&gt;</code>\n</div>\n<p>\n\tПосле этого в параметр функции мы можем\n\tнаписать переменную, в которую будет\n\tпопадать значение нашего параметра:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn 'пост ' . $id;\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут, обрабатывающий адреса\n\t\tвида <code class=\"path inline\">/user/:name</code>, где вместо <code class=\"path inline\">:name</code>\n\t\tможет быть любая строка.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/several-parameters/","content":"\n\t\t\t\t<h1>Несколько параметров маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ маршрутах можно указывать несколько\n\tпараметров. Смотрите пример:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{catId}/{postId}', function ($catId, $postId) {\n\t\treturn $catId . ' ' . $postId;\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут, обрабатывающий адреса\n\t\tвида <code class=\"path inline\">/user/:surname/:name/</code>,\n\t\tгде параметры задают имя и фамилию юзера.\n\t</p>\n</div>\n\n<h2>Замечание</h2>\n<p>\n\tВ функцию-обработчик параметры попадают\n\tв порядке следования. Это значит, что имена\n\tпараметров и переменных не обязательно\n\tдолжны совпадать. Но лучше, конечно же,\n\tзадавать одинаковые имена параметров\n\tи соответствующих переменных, чтобы\n\tне было путаницы.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/optional-parameters/","content":"\n\t\t\t\t<h1>Необязательные параметры маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПараметры маршрутов можно объявлять\n\tне обязательными. Давайте посмотрим\n\tна примере. Пусть у нас есть следующий\n\tмаршрут:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/posts/page/{page}', function ($page) {\n\t\treturn 'страница номер ' . $page;\n\t});\n?&gt;</code>\n</div>\n<p>\n\tСделаем так, чтобы номер страницы был\n\tнеобязательным параметром. Для этого\n\tпосле его имени поставим знак вопроса:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/posts/page/{page?}', function ($page) {\n\t\treturn 'страница номер ' . $page;\n\t});\n?&gt;</code>\n</div>\n<p>\n\tНеобязательный параметр должен иметь\n\tзначение по умолчанию, иначе Laravel\n\tвыдаст ошибку. Исправим проблему,\n\tуказав  соответствующей переменной\n\tзначение по умолчанию:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/posts/page/{page?}', function ($page = 1) {\n\t\treturn 'страница номер ' . $page;\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть дан адрес вида <code class=\"path inline\">/city/:city</code>, где\n\t\tв параметре будет задаваться год.\n\t\tСделайте так, чтобы год был\n\t\tнеобязательным параметром\n\t\tи по умолчанию имел значение <code class=\"path inline\">minsk</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/parameter-constraints/","content":"\n\t\t\t\t<h1>Ограничения параметров маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак правило мы бы хотели наложить\n\tна параметры маршрутов некоторые ограничения.\n\tДавайте посмотрим на примере. Пусть у нас\n\tесть следующий маршрут:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn 'пост ' . $id;\n\t});\n?&gt;</code>\n</div>\n<p>\n\tОчевидно, что <code class=\"path inline\">id</code> должен быть числом.\n\tОднако, сейчас наш маршрут не следит\n\tза этим и поймает любой адрес такого вида,\n\tнапример, <code class=\"path inline\">/post/eee</code>.\n</p>\n<p>\n\tДавайте наложим ограничение на наш параметр.\n\tЭто делается с помощью метода <code class=\"code inline\">where</code>\n\tи регулярных выражений:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn 'пост ' . $id;\n\t})-&gt;where('id', '[0-9]+');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/user/:id</code>,\n\t\tгде вместо <code class=\"path inline\">:id</code> должно быть число.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПопробуйте обратиться через браузер\n\t\tк этому маршруту, передав параметром\n\t\tчисло.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПопробуйте обратиться через браузер\n\t\tк этому маршруту, передав параметром\n\t\tне число. Расскажите, что будет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/several-parameters-constraints/","content":"\n\t\t\t\t<h1>Ограничения на несколько параметров маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОграничения можно накладывать на несколько\n\tпараметров. Для этого нужно вызвать\n\tнесколько методов <code class=\"code inline\">where</code> в виде цепочки.\n</p>\n<p>\n\tПосмотрим на примере. Пусть у нас дан\n\tследующий маршрут с несколькими параметрами:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{slug}/{id}', function ($slug, $id) {\n\t\treturn 'пост ' . $slug . ' ' . $id;\n\t});\n?&gt;</code>\n</div>\n<p>\n\tЗададим этим параметрам соответствующие\n\tограничения:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{slug}/{id}', function ($slug, $id) {\n\t\treturn 'пост ' . $slug . ' ' . $id;\n\t})-&gt;where('slug', '[a-z0-9_-]+')-&gt;where('id', '[0-9]+');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/user/:id/:name</code>,\n\t\tгде вместо <code class=\"path inline\">:id</code> должно быть число,\n\t\tа вместо <code class=\"path inline\">:name</code> - строка, состоящая\n\t\tиз маленьких латинских букв количеством более\n\t\t<code class=\"number inline\">2</code>-х.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/posts/:date</code>,\n\t\tгде вместо <code class=\"path inline\">:date</code> должна быть дата\n\t\tв формате <span class=\"format\">год-месяц-день</span>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/:year/:month/:day</code>,\n\t\tгде вместо <code class=\"path inline\">:year</code> должен быть год,\n\t\tвместо <code class=\"path inline\">:month</code> - месяц, вместо <code class=\"path inline\">:day</code> - день.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/users/:order</code>,\n\t\tгде вместо <code class=\"path inline\">:order</code> должно быть одно\n\t\tиз значений: <code class=\"string inline\">'name'</code>, <code class=\"string inline\">'surname'</code>\n\t\tили <code class=\"string inline\">'age'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/pattern-parameters-constraints/","content":"\n\t\t\t\t<h1>Шаблонные ограничения параметров маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНе очень удобно каждый раз для ограничения\n\tпараметров прописывать одни и те же регулярки.\n\tПоэтому для популярных ограничений в Laravel\n\tсозданы специальные методы. Давайте их\n\tрассмотрим.\n</p>\n<p>\n\tСледующий метод ограничивает\n\tпараметр только цифрами:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\t//\n\t})-&gt;whereNumber('id');\n?&gt;</code>\n</div>\n<p>\n\tСледующий метод ограничивает\n\tпараметр только буквами:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{slug}', function ($slug) {\n\t\t//\n\t})-&gt;whereAlpha('slug');\n?&gt;</code>\n</div>\n<p>\n\tСледующий метод ограничивает\n\tпараметр цифрами и буквами:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{slug}', function ($slug) {\n\t\t//\n\t})-&gt;whereAlphaNumeric('slug');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/user/:id</code>,\n\t\tгде вместо <code class=\"path inline\">:id</code> должно быть число.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут вида <code class=\"path inline\">/city/:name</code>,\n\t\tгде вместо <code class=\"path inline\">:name</code> должны быть буквы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/global-parameters-constraints/","content":"\n\t\t\t\t<h1>Глобальные ограничения параметров в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно сделать так, чтобы параметр с определенным\n\tименем всегда имел заданное ограничение в любых\n\tмаршрутах. Это нужно прописовать в методе <code class=\"code inline\">boot</code>\n\tкласса <code class=\"code inline\">RouteServiceProvider</code>.\n</p>\n<p>\n\tДавайте для примера зададим глобальное ограничение\n\tдля параметра с именем <code class=\"path inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"App\\Providers\\RouteServiceProvider.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function boot()\n\t{\n\t    Route::pattern('id', '[0-9]+');\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь любой маршрут, у которого есть параметр\n\t<code class=\"path inline\">id</code>, выполнится только если <code class=\"path inline\">id</code> будет числом:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn '!!!'; // только если число\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\t Наложите глобальное ограничение\n\t\t на параметр <code class=\"path inline\">slug</code>. Пусть\n\t\t он может содержать буквы и цифры,\n\t\t а также дефис и подчеркивание.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/resolving-conflicts/","content":"\n\t\t\t\t<h1>Разрешение конфликтов маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tLaravel проверяет маршруты по порядку\n\tих записи. Если найден подходящий маршрут,\n\tто дальнейшая проверка прекращается.\n</p>\n<p>\n\tИз-за этого маршруты могут конфликтовать\n\tдруг с другом. Например, в следующем\n\tпримере второй маршут никогда не будет\n\tдостигнут, так обращение к нему будет\n\tперехвачено первым маршрутом:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn 'id';\n\t});\n\tRoute::get('/post/all', function () {\n\t\treturn 'all';\n\t});\n?&gt;</code>\n</div>\n<p>\n\tДля избежания конфликтов следует\n\tписать более частные случаи маршрутов\n\tвначале, а потом - более общие.\n\tПоменяем порядок следования наших\n\tмаршрутов и проблема исчезнет:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/all', function () {\n\t\treturn 'all';\n\t});\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn 'id';\n\t});\n?&gt;</code>\n</div>\n<p>\n\tМожно также наложить ограничение на параметры.\n\tВ этом случае причина конфликта исчезнет.\n\tДавайте укажем, что наши <code class=\"path inline\">id</code> должны\n\tбыть числами. В этом случае второй маршрут\n\tуже не будет частным случаем первого\n\tи все будет работать верно:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', function ($id) {\n\t\treturn 'id';\n\t})-&gt;where('id', '[0-9]+');\n\tRoute::get('/post/all', function () {\n\t\treturn 'all';\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРазрулите конфликт маршрутов:\n\t</p>\n\t<div class=\"block\" data-file=\"routes/web.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/user/{id}', function ($id) {\n\t\treturn 'id';\n\t});\n\tRoute::get('/user/all', function () {\n\t\treturn 'all';\n\t});\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРазрулите конфликт маршрутов:\n\t</p>\n\t<div class=\"block\" data-file=\"routes/web.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/user/{id?}', function ($id = null) {\n\t\treturn 'id';\n\t});\n\tRoute::get('/user/', function () {\n\t\treturn 'user';\n\t});\n\tRoute::get('/user/all', function () {\n\t\treturn 'all';\n\t});\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРазрулите конфликт маршрутов:\n\t</p>\n\t<div class=\"block\" data-file=\"routes/web.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/user/{name}/{id?}', function ($name, $id) {\n\t\treturn 'name id';\n\t});\n\tRoute::get('/user/all', function () {\n\t\treturn 'all';\n\t});\n\tRoute::get('/user/all/desc', function () {\n\t\treturn 'all desc';\n\t});\n?&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРазрулите конфликт маршрутов:\n\t</p>\n\t<div class=\"block\" data-file=\"routes/web.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/user/{id}', function ($id) {\n\t\treturn 'id';\n\t})-&gt;where('slug', '[a-z0-9_-]+');\n\tRoute::get('/user/{id}', function ($id) {\n\t\treturn 'id';\n\t})-&gt;where('id', '[0-9]+');\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/route-groups/","content":"\n\t\t\t\t<h1>Группировка маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно группировать маршруты, адреса\n\tкоторых начинаются на одинаковую часть.\n\tДавайте посмотрим на примере. Пусть\n\tу нас есть такие адреса:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/blog/post/all', function ($id) {\n\t\treturn 'all';\n\t});\n\tRoute::get('/blog/post/{id}', function ($id) {\n\t\treturn $id;\n\t});\n?&gt;</code>\n</div>\n<p>\n\tВынесем общую часть:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::prefix('blog')-&gt;group(function () {\n\t\tRoute::get('/post/all', function ($id) {\n\t\t\treturn 'all';\n\t\t});\n\t\tRoute::get('/post/{id}', function ($id) {\n\t\t\treturn $id;\n\t\t});\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСгрупируйте следующие маршруты:\n\t</p>\n\t<div class=\"block\" data-file=\"routes/web.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/admin/users', function ($id) {\n\t\treturn 'all';\n\t});\n\tRoute::get('/admin/user/{id}', function ($id) {\n\t\treturn $id;\n\t});\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/routing/named-routes/","content":"\n\t\t\t\t<h1>Именованные маршруты в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМаршрутам можно давать имена.\n\tЭти имена в дальнейшем могут быть\n\tиспользованы для различных целей.\n\tДавайте посмотрим на примере.\n\tПусть дан такой маршрут:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/all', function () {\n\t\treturn 'all';\n\t});\n?&gt;</code>\n</div>\n<p>\n\tДавайте дадим ему имя:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/all', function () {\n\t\treturn 'all';\n\t})-&gt;name('posts');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДайте имя следующему маршруту:\n\t</p>\n\t<div class=\"block\" data-file=\"routes/web.php\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/user/profile', function () {\n\t\treturn 'profile';\n\t});\n?&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/controllers/intro/","content":"\n\t\t\t\t<h1>Контроллеры в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак правило маршруты, создаваемые в файле\n\t<code class=\"path inline\">routes/web.php</code> не будут сами обрабатывать\n\tзапрос, а отправят его на определенное\n\t<dfn>действие</dfn> заданного <dfn>контроллера</dfn>.\n</p>\n<p>\n\tКонтроллеры размещаются в папке <code class=\"path inline\">app/Http/Controllers</code>.\n\tДавайте для примера сделаем какой-нибудь контроллер,\n\tнапример, <code class=\"code inline\">PostController</code>.\n</p>\n<p>\n\tДля этого в папке с контроллерами создадим\n\tфайл с классом контроллера, подчиняющийся\n\tправилам <a href=\"/ru/php/book/oop/autoloading/default/\">автозагрузки классов</a>.\n</p>\n<p>\n\tНашему контроллеру соответствует файл <code class=\"code inline\">PostController.php</code>.\n\tДавайте создадим его и в этом файле\n\tразместим следующий код:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnamespace App\\Http\\Controllers;\n\t\n\tclass PostController extends Controller\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь создадим <dfn>действие</dfn>, то есть\n\tметод нашего контроллера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn 'hello world';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТаким образом у нас есть контроллер и его\n\tдействие. В следующем уроке мы научимся делать\n\tтак, чтобы по обращению к определенному URL\n\tвызывалось заданное действие некоторого\n\tконтроллера.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте контроллер <code class=\"code inline\">UserController</code>\n\t\tи в нем сделайте действие <code class=\"code inline\">show</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/controllers/routes/","content":"\n\t\t\t\t<h1>Маршруты для контроллеров в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь в файле с роутами будем\n\tделать так, чтобы маршруты обрабатывались\n\tзаданными контроллерами.\n</p>\n<p>\n\tДля этого вторым параметром метода <code class=\"code inline\">get</code>\n\tнужно передать массив, состоящий из двух элементов:\n\tимени контроллера с его пространством имен\n\tи имени действия. Общая схема выглядит так:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get(маршрут, [полное имя контроллера, имя действия]);\n?&gt;</code>\n</div>\n<p>\n\tДавайте зададим маршрут, который будет вызывать\n\tметод <code class=\"code inline\">show</code> нашего контроллера <code class=\"code inline\">PostController</code>:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post', ['App\\\\Http\\\\Controllers\\\\PostController', 'show']);\n?&gt;</code>\n</div>\n<p>\n\tКак вы видите, указывать имя контроллера в виде строки\n\tне очень удобно. Это длинно и нужно удваивать слеши\n\tв пространстве имен (т.к. это строка). Существует\n\tболее удобный (и общепринятый способ). Давайте\n\tего разберем.\n</p>\n<p>\n\tПервым делом нужно в файле с роутами\n\t<a href=\"/ru/php/book/oop/namespaces/command-use/\">заюзать</a>\n\tнаш контроллер:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Http\\Controllers\\PostController;\n?&gt;</code>\n</div>\n<p>\n\tПосле этого мы сможем воспользоваться\n\tстатическим свойством класса <code class=\"code inline\">::class</code>.\n\tМодифицируем наш маршрут:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post', [PostController::class, 'show']);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы при обращении на\n\t\tадрес <code class=\"path inline\">/user</code> вызывалось действие\n\t\t<code class=\"code inline\">show</code> контроллера <code class=\"code inline\">UserController</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы при обращении на\n\t\tадрес <code class=\"path inline\">/user/all</code> вызывалось действие\n\t\t<code class=\"code inline\">all</code> контроллера <code class=\"code inline\">UserController</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/controllers/generation/","content":"\n\t\t\t\t<h1>Генерация контроллеров в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСоздавать контроллеры вручную не очень\n\tэффективно. Лучше использовать для этого\n\tгенератор кода artisan. Он автоматически\n\tсоздаст файл с нужным классом и пропишет\n\tв нем пространство имен и нужные зависимости.\n</p>\n<p>\n\tДавайте для примера создадим\n\t<code class=\"code inline\">CityController</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:controller CityController</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью artisan создайте\n\t\tконтроллер <code class=\"code inline\">ArticleController</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью artisan создайте\n\t\tконтроллер <code class=\"code inline\">CategoryController</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/controllers/parameters/","content":"\n\t\t\t\t<h1>Параметры маршрутов в контроллерах Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь добавим к нашему маршруту параметр:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', [PostController::class, 'show']);\n?&gt;</code>\n</div>\n<p>\n\tПереданный параметр будет попадать в параметр\n\tметода нашего действия:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show($id)\n\t\t{\n\t\t\treturn 'post ' . $id;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут, обрабатывающий адреса\n\t\tвида <code class=\"path inline\">/user/:name</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут, обрабатывающий адреса\n\t\tвида <code class=\"path inline\">/user/:surname/:name</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/controllers/applying-parameters/","content":"\n\t\t\t\t<h1>Применение параметров маршрутов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРассмотрим некоторое практическое\n\tприменение параметров маршрутов.\n\tДавайте в зависимости от значения\n\tпараметра будем отдавать различный\n\tтекст.\n</p>\n<p>\n\tПусть у нашего маршрута есть параметр:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/{id}', [PostController::class, 'show']);\n?&gt;</code>\n</div>\n<p>\n\tПусть также в действии контроллера хранится\n\tмассив, в котором ключами будут значения\n\tпараметра, а значениями - соответствующие\n\tтексты:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = [\n\t\t\t\t1 =&gt; 'текст 1',\n\t\t\t\t2 =&gt; 'текст 2',\n\t\t\t\t3 =&gt; 'текст 3',\n\t\t\t\t4 =&gt; 'текст 4',\n\t\t\t\t5 =&gt; 'текст 5',\n\t\t\t];\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте отдадим в браузер текст,\n\tсоответствующий значению параметра:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show($id)\n\t\t{\n\t\t\t$posts = [\n\t\t\t\t1 =&gt; 'текст 1',\n\t\t\t\t2 =&gt; 'текст 2',\n\t\t\t\t3 =&gt; 'текст 3',\n\t\t\t\t4 =&gt; 'текст 4',\n\t\t\t\t5 =&gt; 'текст 5',\n\t\t\t];\n\t\t\t\n\t\t\treturn $posts[$id];\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<p>\n\tПусть есть массив с именами\n\tюзеров и их городами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = [\n\t\t'user1' =&gt; 'city1',\n\t\t'user2' =&gt; 'city2',\n\t\t'user3' =&gt; 'city3',\n\t\t'user4' =&gt; 'city4',\n\t\t'user5' =&gt; 'city5',\n\t];\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте маршрут, который параметром\n\t\tбудет принимать имя юзера, а в браузером\n\t\tрезультатом отправлять его город.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы, если параметром\n\t\tпередано несуществующее имя, в браузер\n\t\tвыводилось сообщение об этом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/intro/","content":"\n\t\t\t\t<h1>Введение в представления в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, в окно браузера выводится\n\tто, что вернет действие через <code class=\"code inline\">return</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn 'text'; // выведется на экран\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ реальной жизни, однако, контроллеры не\n\tвозвращают текст непосредственно,\n\tа подтягивают его из представления.\n</p>\n<p>\n\tПредставление представляет собой файл с HTML\n\tкодом. При этом обычно каждому действию контроллера\n\tсоответствует свой файл.\n</p>\n<p>\n\tДля того, чтобы получить представление,\n\tиспользуется функция <code class=\"code inline\">view</code>.\n\tЭта функция параметром принимает название\n\tфайла представления (без расширения)\n\tи возвращает его текст.\n</p>\n<p>\n\tФайлы представления хранятся в папке <code class=\"path inline\">resources/views</code>.\n\tДавайте перейдем в эту папку и сделаем в\n\tней файл <code class=\"path inline\">test.blade.php</code> с таким текстом:\n</p>\n<div class=\"block\" data-file=\"resources/views/test.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;my view&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\tmy view\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tКак вы видите, наш файл <code class=\"path inline\">test.blade.php</code>\n\tимеет два расширения: первое <code class=\"path inline\">.php</code>\n\tи второе <code class=\"path inline\">.blade</code>. Второе расширение\n\tпоказывает Laravel то, что мы в нашем файле\n\tможем использовать команды шаблонизатора\n\tBlade. Пока мы просто написали HTML код без\n\tкоманд шаблонизатора, но скоро их добавим.\n</p>\n<p>\n\tДавайте сделаем так, чтобы наше действие\n\tотправило в браузер текст созданного нами представления.\n\tДля этого действие должно вернуть результат\n\tработы функции <code class=\"code inline\">view</code>, в которой параметром\n\tмы укажем имя файла представления (только имя,\n\tбез расширения):\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn view('test');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте представление для какого-нибудь\n\t\tдействия одного из ваших контроллеров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/data-passing/","content":"\n\t\t\t\t<h1>Передача данных в представление Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь будем передавать какие-нибудь\n\tданные из контроллера в представление.\n</p>\n<p>\n\tДля этого предназначен второй параметр функции\n\t<code class=\"code inline\">view</code>. В этот параметр мы можем передать\n\tассоциативный массив. В представлении все ключи\n\tэтого массива станут переменными, а элементы -\n\tзначениями этих переменных.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПередадим в представление какой-нибудь\n\tмассив с данными:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn view('test', ['var1' =&gt; '1', 'var2' =&gt; '2']);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ результате в представлении будет доступна\n\tпеременная <code class=\"code inline\">$var1</code> со значением <code class=\"number inline\">1</code>\n\tи переменная <code class=\"code inline\">$var2</code> со значением <code class=\"number inline\">2</code>.\n</p>\n<p>\n\tДля того, чтобы вывести содержимое\n\tпеременной в представлении, нужно\n\tнаписать ее в двойных фигурных скобках.\n\tСделаем это:\n</p>\n<div class=\"block\" data-file=\"resources/views/test.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;my view&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\tvariable one: {{ $var1 }}\n\t\tvariable two: {{ $var2 }}\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tШаблонизатор Blade вместо соответствующих\n\tкоманд подставит значения переменных и в\n\tбраузер отправится следующий HTML код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;my view&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\tvariable one: 1\n\t\tvariable two: 2\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в действии контроллера даны переменные\n\t\t<code class=\"code inline\">$name</code> и <code class=\"code inline\">$surname</code>. Передайте значения\n\t\tэтих переменных в представление и выведите\n\t\tсодержимое каждой из этих переменных на экран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/files-structure/","content":"\n\t\t\t\t<h1>Структура файлов представлений в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас файл с нашим представлением хранится\n\tнепосредственно в папке <code class=\"path inline\">resources/views</code>.\n\tБолее принято, однако, для представлений\n\tкаждого контроллера создавать свою\n\tподпапку, а в этой подпапке размещать\n\tфайлы представлений для действий.\n</p>\n<p>\n\tПосмотрим на примере. Пусть наш контроллер имеет\n\tназвание <code class=\"code inline\">PostController</code>, а наше действие - <code class=\"code inline\">show</code>.\n\tЭто значит, что внутри папки <code class=\"path inline\">resources/views</code>\n\tнужно создать папку <code class=\"path inline\">post</code>, а в ней файл\n\t<code class=\"path inline\">show.blade.php</code>, соответствующий нашему действию.\n</p>\n<p>\n\tИмя представления, которое мы передаем параметром\n\tфункции <code class=\"code inline\">view</code>, теперь должно содержать\n\tдве части: имя папки <code class=\"string inline\">post</code> и имя файла\n\t<code class=\"string inline\">show</code>. Эти части разделяются точкой.\n\tДавайте исправим код нашего контроллера\n\tв соответствии с описанным:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn view('post.show');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеренесите ваше представление в\n\t\tсоответствующую папку.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/site-layout/","content":"\n\t\t\t\t<h1>Макет сайта в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ представлениях контроллера обычно\n\tразмещают не весь макет сайта,\n\tа только его изменяющийся\n\tконтент. А макет сайта выносят\n\tв отдельный файл, в который\n\tавтоматически в специальное место\n\tбудет вставляться контент страницы.\n</p>\n<p>\n\tДавайте сделаем это. Разместим код\n\tобщего макета сайта в следующем\n\tфайле:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;title&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\tтут подключается контент\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tВ этом файле будет доступна специальная\n\tпеременная <code class=\"code inline\">$slot</code>, которая указывает\n\tместо вставки контента. Давайте\n\tвоспользуемся ею:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;title&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t{{ $slot }}\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОписанным способом сделайте файл\n\t\tс макетом сайта.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/site-layout-content/","content":"\n\t\t\t\t<h1>Контент в макете сайта в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь исправим представление\n\tконтроллера. Уберем в нем лишний код,\n\tоставив только контент сайта:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">page content</code>\n</div>\n<p>\n\tТеперь с помощью специального тега\n\t<code class=\"code inline\">&lt;x-layout&gt;</code> обернем текст\n\tнашего представление. Содержимое\n\tэтого тега и будет вставлено в\n\tмакет сайта вместо переменной <code class=\"code inline\">$slot</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\tpage content\n&lt;/x-layout&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте представление для метода\n\t\t<code class=\"code inline\">show</code> контроллера <code class=\"code inline\">User</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы это представление\n\t\tвыводилось в общем макете сайта.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/site-layout-title/","content":"\n\t\t\t\t<h1>Тайтл в макете сайта в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь в макете сайта\n\tукажем место, в которое будет\n\tвставлен тайтл страницы.\n\tЭто делается с помощью\n\tпеременной <code class=\"code inline\">$title</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;{{ $title }}&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t{{ $slot }}\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tТеперь в представлении контроллера\n\tзададим текст нашего тайтла. Это\n\tделается с помощью тега\n\t<code class=\"code inline\">&lt;x-slot&gt;</code> следующим\n\tобразом:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\t&lt;x-slot:title&gt;\n\t\tpage title\n\t&lt;/x-slot&gt;\n\t\n\tpage content\n&lt;/x-layout&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ контроллере с юзерами сделайте\n\t\tтри метода и представления к ним.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ каждом представлении разместите\n\t\tсвой тайтл и контент.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЧерез браузер обратитесь к созданным\n\t\tметодам. Убедитесь, что все работает.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/content-variable/","content":"\n\t\t\t\t<h1>Контент из переменной в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь текст контента не прописан\n\tжестко в представлении, а передается\n\tиз контроллера:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn view('post.show', [\n\t\t\t\t'text' =&gt; 'page content',\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем переданный текст\n\tв представлении:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\t&lt;x-slot:title&gt;\n\t\tpage title\n\t&lt;/x-slot&gt;\n\t\n\t{{ $text }}\n&lt;/x-layout&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте контроллер с юзерами\n\t\tтак, чтобы контент каждого представления\n\t\tпередавался из контроллера.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/views/title-variable/","content":"\n\t\t\t\t<h1>Тайтл в макете сайта в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь в представление передается\n\tне только контент, но и тайтл:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn view('post.show', [\n\t\t\t\t'title' =&gt; 'page title',\n\t\t\t\t'text'  =&gt; 'page content',\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем переданный тайтл\n\tв представлении:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\t&lt;x-slot:title&gt;\n\t\t{{ $title }}\n\t&lt;/x-slot&gt;\n\t\n\t{{ $text }}\n&lt;/x-layout&gt;</code>\n</div>\n<p>\n\tВ слоте для тайтла вместе с переменной\n\tможно вывести и какой-нибудь текст:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\t&lt;x-slot:title&gt;\n\t\t{{ $title }} - site.com\n\t&lt;/x-slot&gt;\n\t\n\t{{ $text }}\n&lt;/x-layout&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте контроллер с юзерами\n\t\tтак, чтобы тайтл каждого представления\n\t\tпередавался из контроллера.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/intro/","content":"\n\t\t\t\t<h1>Введение в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном разделе мы начнем изучать\n\tшаблонизатор Blade, встроенный в Laravel.\n\tЭтот шаблонизатор предоставляет нам набор\n\tспециальных команд, которые мы можем использовать\n\tв файлах представлений. Таким образом мы\n\tможем избежать смешения HTML и PHP\n\tкода, а также получить некоторые\n\tдополнительные возможности.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/variables-tags/","content":"\n\t\t\t\t<h1>Вывод переменных в тегах в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПеременные, которые передаются в представление\n\tиз действия контроллера, обычно выводятся\n\tвнутри каких-нибудь тегов. Пусть, к примеру,\n\tиз действия передаются переменные <code class=\"code inline\">$var1</code>,\n\t<code class=\"code inline\">$var2</code> и <code class=\"code inline\">$var3</code>. Давайте выведем\n\tкаждую из этих переменных в отдельном абзаце:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;p&gt;{{ $var1 }}&lt;/p&gt;\n&lt;p&gt;{{ $var2 }}&lt;/p&gt;\n&lt;p&gt;{{ $var3 }}&lt;/p&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в действии контроллера даны переменные\n\t\t<code class=\"code inline\">$name</code>, <code class=\"code inline\">$age</code> и <code class=\"code inline\">$salary</code>.\n\t\tПередайте значения этих переменных в\n\t\tпредставление и выведите содержимое каждой из\n\t\tэтих переменных в отдельном абзаце.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/variables-attributes/","content":"\n\t\t\t\t<h1>Вывод переменных в атрибуты в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПеременные на самом деле можно выводить в\n\tлюбом месте страницы, например, в атрибутах\n\tтегов. Например, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;p class=\"{{ $var }}\"&gt;&lt;/p&gt;\n&lt;p style=\"{{ $var }}\"&gt;&lt;/p&gt;\n&lt;input value=\"{{ $var }}\"&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в действии дана переменная, содержащая\n\t\tCSS класс. Передайте эту переменную в представление\n\t\tи для какого-нибудь тега значением атрибута\n\t\t<code class=\"code inline\">class</code> укажите нашу переменную.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в представлении даны <code class=\"number inline\">3</code> инпута.\n\t\tПередайте из действия в представление <code class=\"number inline\">3</code>\n\t\tпеременные, значения которых запишите в атрибуты\n\t\t<code class=\"code inline\">value</code> наших инпутов.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в представлении дан абзац. Передайте\n\t\tиз действия в представление переменную, содержащую\n\t\tCSS код, задающий красный цвет текста. С\n\t\tпомощью атрибута <code class=\"code inline\">style</code> покрасьте наш\n\t\tабзац в красный цвет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в действии дана переменная <code class=\"code inline\">$text</code>,\n\t\tсодержащая текст ссылки, и переменная <code class=\"code inline\">$href</code>,\n\t\tсодержащая адрес ссылки. Передайте эти переменные\n\t\tв представление и сформируйте с их помощью\n\t\tHTML ссылку.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/arbitrary-code/","content":"\n\t\t\t\t<h1>Выполнение произвольного кода в командах Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ фигурных скобках Blade можно не только выводить\n\tпеременные, но и выполнять произвольный PHP\n\tкод, например, вызывать стандартные функции:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">current timestamp: {{ time() }}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите в представлении текущую дату\n\t\tв формате <span class=\"format\">день.месяц.год</span>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/arrays/","content":"\n\t\t\t\t<h1>Работа с массивами в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИз действия в представление можно также\n\tпередавать и массивы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\treturn view('test', ['arr' =&gt; [1, 2]]);\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем элементы нашего массива на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">первый элемент массива: {{ $arr[0] }}\nвторой элемент массива: {{ $arr[1] }}</code>\n</div>\n<p>\n\tТак как в фигурных скобках можно выполнять\n\tлюбой PHP код, то можно, например, найти\n\tсумму элементов массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">сумма: {{ $arr[0] + $arr[1] }}</code>\n</div>\n<p>\n\tМожно также найти количество элементов\n\tмассива с помощью PHP функции <code class=\"code inline\">count</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">{{ count($arr) }}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление передаются\n\t\tданные работника в виде массива. Пусть в\n\t\tмассиве будет ключ <code class=\"code inline\">name</code>, ключ\n\t\t<code class=\"code inline\">age</code> и ключ <code class=\"code inline\">salary</code>.\n\t\tВыведите каждый элемент массива\n\t\tв отдельном абзаце.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в представление какой-нибудь массив.\n\t\tВыведите на экран количество элементов в\n\t\tэтом массиве.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/variables-checking/","content":"\n\t\t\t\t<h1>Проверка переменных в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно выполнять проверку переменных\n\tчерез <a href=\"/ru/php/book/prime/conditions/ternary-operator/\">тернарный оператор</a>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">{{ $var ? 'eee' : 'bbb' }}</code>\n</div>\n<p>\n\tМожно также выполнять проверку переменных\n\tчерез <a href=\"/ru/php/book/prime/conditions/null-coalescing/\">оператор объединения с null</a>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">{{ $var ?? 'eee' }}</code>\n</div>\n<p>\n\tВ результате проверки можно выполнять\n\tпроизвольный код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">{{ $year ?? date('Y') }}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление передается\n\t\tпеременная <code class=\"code inline\">$city</code>. Выведите\n\t\tв представлении названия города из этой переменной.\n\t\tЕсли же город не передан - пусть по умолчанию\n\t\tвыведется город <code class=\"string inline\">'Москва'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление передается\n\t\tмассив <code class=\"code inline\">$location</code> с ключами <code class=\"code inline\">country</code>,\n\t\t<code class=\"code inline\">city</code>. Выведите каждый элемент это массива\n\t\tв отдельном абзаце. Сделайте так, чтобы,\n\t\tесли не задана страна, то по умолчанию вывелась\n\t\t<code class=\"string inline\">'Россия'</code>, а если не задан город, то\n\t\tпо умолчанию вывелась <code class=\"string inline\">'Москва'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление передаются\n\t\tпеременные <code class=\"code inline\">$year</code>, <code class=\"code inline\">$month</code>\n\t\tи <code class=\"code inline\">$day</code>. Сделайте так,\n\t\tчтобы, если какая-либо из этих переменных\n\t\tне задана, то вместо нее выведется текущее\n\t\tзначение (текущий год, месяц или день).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/unescaped-data-output/","content":"\n\t\t\t\t<h1>Вывод неэкранированных данных в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПо умолчанию оператор <code class=\"code inline\">{{ }}</code> автоматически\n\tобрабатывает данные через функцию <a href=\"/ru/php/manual/string/htmlentities/\"><code class=\"code inline\">htmlentities</code></a>\n\tдля предотвращения XSS-атак. Если вы не хотите экранировать\n\tданные, используйте такой синтаксис:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">Hello, {!! $name !!}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в переменной <code class=\"code inline\"></code> хранится строка\n\t\tс тегами, например:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$str = '&lt;b&gt;text&lt;/b&gt;';\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите эту строку на экран так, чтобы теги\n\t\tвыполнили свое действие (то есть чтобы в\n\t\tданном случае текст стал жирным).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/comments/","content":"\n\t\t\t\t<h1>Комментарии в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСинтаксис Blade предусматривает комментарии.\n\tВ отличие от HTML комментариев, Blade комментарии\n\tне включаются в HTML код, отправляемый в браузер.\n</p>\n<p>\n\tПример комментарией:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">{{-- комментарий --}}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью комментариев Blade закомментируйте\n\t\tкакую-нибудь часть кода представления.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/conditions/","content":"\n\t\t\t\t<h1>Условия в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью Blade директивы <code class=\"code inline\">@if</code>\n\tможно задавать условия в представлениях.\n\tДавайте посмотрим на примере.\n</p>\n<p>\n\tПусть из действия в представление\n\tпередается переменная, определяющая,\n\tавторизован пользователь\n\tили нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\treturn view('post.show', [\n\t\t'isAuth' =&gt; true\n\t]);\n?&gt;</code>\n</div>\n<p>\n\tПокажем текст только для\n\tавторизованного пользователя:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if ($isAuth)\n\tвы авторизованы\n@endif</code>\n</div>\n<p>\n\tА тепер покажем текст\n\tдля неавторизованного пользователя:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if (!$isAuth)\n\tвы не авторизованы\n@endif</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление\n\t\tпередается переменная, содержащая\n\t\tвозраст пользователя.\n\t\tПокажите в представлении текст\n\t\tтолько для пользователей старше\n\t\t<code class=\"number inline\">18</code> лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/else-directive/","content":"\n\t\t\t\t<h1>Директива @else в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСледующий пример демонстрирует работу директивы\n\t<code class=\"code inline\">@else</code>, работающий подобно своему PHP\n\tаналогу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if ($isAuth)\n\tвы авторизованы\n@else\n\tвы не авторизованы\n@endif</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите разный текст для\n\t\tпользователя старше и младше\n\t\t<code class=\"number inline\">18</code> лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/elseif-directive/","content":"\n\t\t\t\t<h1>Директива @elseif в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСледующий пример демонстрирует работу директивы\n\t<code class=\"code inline\">@elseif</code>, работающей подобно своему PHP\n\tаналогу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if ($num &gt; 0)\n\tбольше нуля\n@elseif ($num === 0)\n\tноль\n@else\n\tменьше нуля\n@endif</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите разный текст для\n\t\tпользователя старше, младше,\n\t\tи для тех, кому сейчас ровно <code class=\"number inline\">18</code> лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/unless-directive/","content":"\n\t\t\t\t<h1>Директива @unless в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДиректива <code class=\"code inline\">@unless</code> представляет собой\n\tкоманду <i>пока не</i> и не имеет аналога\n\tв PHP. Рассмотрим работу данной директивы\n\tна практическом примере.\n</p>\n<p>\n\tПусть в переменной <code class=\"code inline\">$isAuth</code> хранится\n\tпометка об авторизации пользователя. В том\n\tслучае, если пользователь еще не авторизован,\n\tвыведем ему сообщение об этом, пока используя\n\tдирективу <code class=\"code inline\">@if</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if (!$isAuth)\n\tвы еще не авторизованы\n@endif</code>\n</div>\n<p>\n\tКак вы видите, перед именем переменной нам\n\tприходится писать восклицательный знак, чтобы\n\tсделать отрицание.\n</p>\n<p>\n\tМожно избавится от этого восклицательного\n\tзнака, воспользовавшись директивой <code class=\"code inline\">@unless</code>,\n\tкоторая сама по себе является отрицанием:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@unless ($isAuth)\n\tвы еще не авторизованы\n@endunless</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление передается\n\t\tвозраст пользователя. Если возраст пользователь\n\t\tнесовершеннолетний, то выведите сообщение\n\t\tоб этом. Для решения задачи воспользуйтесь\n\t\tдирективой <code class=\"code inline\">@unless</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/complex-conditions/","content":"\n\t\t\t\t<h1>Сложные команды в условиях Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ условиях можно давать более сложные команды.\n\tПусть, например, из представления передается\n\tмассив. Давайте подсчитаем количество элементов\n\tв этом массиве и, в зависимости от количества,\n\tвыведем разный текст:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if (count($arr) &gt;= 1)\n\tв массиве есть записи\n@else\n\tв массиве нет записей\n@endif</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть из действия в представление передается\n\t\tмассив с числами. Если количество элементов\n\t\tв этом массиве больше нуля, то выведите на\n\t\tэкран сумму этих элементов, а если количество\n\t\tэлементов равно нулю, то выведите сообщение\n\t\tоб этом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/foreach-directive/","content":"\n\t\t\t\t<h1>Директива @foreach в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы с вами разберем директиву\n\t<code class=\"code inline\">@foreach</code> шаблонизатора Blade,\n\tпредставляющую собой цикл для перебора массива.\n</p>\n<p>\n\tРассмотрим работу данной директивы на практическом\n\tпримере. Пусть из действия в представление\n\tпередается какой-то массив <code class=\"code inline\">$arr</code>.\n</p>\n<p>\n\tПереберем этот массив циклом и выведем его\n\tэлементы на экран:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $elem }}\n@endforeach</code>\n</div>\n<p>\n\tДавайте выведем каждый элемент массива в\n\tотдельном абзаце:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t&lt;p&gt;{{ $elem }}&lt;/p&gt;\n@endforeach</code>\n</div>\n<p>\n\tДавайте выведем элементы нашего массива в\n\tвиде списка <code class=\"code inline\">ul</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;ul&gt;\n\t@foreach ($arr as $elem)\n\t\t&lt;li&gt;{{ $elem }}&lt;/li&gt;\n\t@endforeach\n&lt;/ul&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tс числами. Выведите этот массив в виде списка\n\t\t<code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tв пункты списка выводились квадраты элементов\n\t\tмассива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tв пункты списка выводились квадратные корни\n\t\tэлементов массива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/foreach-keys/","content":"\n\t\t\t\t<h1>Ключи массива в цикле @foreach в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно также получить в отдельную переменную\n\tключи массива, аналогично циклу <code class=\"code inline\">foreach</code>\n\tв PHP:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $key =&gt; $elem)\n\t{{ $key }} {{ $elem }}\n@endforeach</code>\n</div>\n<p>\n\tЧасто бывает так, что хотелось бы вывести\n\tрядом с элементами массива их порядковые\n\tномера, но не очень удобно то, что нумерация\n\tв массивах начинается с <code class=\"number inline\">0</code>. Для решения\n\tпроблемы можно просто прибавлять единицу\n\tна выводе ключа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $key =&gt; $elem)\n\t{{ $key + 1 }} {{ $elem }}\n@endforeach</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tсо строками. Выведите этот массив в виде\n\t\tсписка <code class=\"code inline\">ul</code> так, чтобы выводились и\n\t\tключи, и значения элементов массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tна выводе к ключу прибавлялась единица.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/foreach-conditions/","content":"\n\t\t\t\t<h1>Условия и циклы @foreach в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДирективу <code class=\"code inline\">@foreach</code> можно комбинировать\n\tс директивой <code class=\"code inline\">@if</code>. Выведем, например,\n\tтолько положительные элементы массива:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;ul&gt;\n\t@foreach ($arr as $elem)\n\t\t@if ($elem &gt; 0)\n\t\t\t&lt;li&gt;{{ $elem }}&lt;/li&gt;\n\t\t@endif\n\t@endforeach\n&lt;/ul&gt;</code>\n</div>\n<p>\n\tА теперь, наоборот, выведем список только\n\tв том случае, если количество элементов в\n\tмассиве больше нуля:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@if (count($arr) &gt; 0)\n\t&lt;ul&gt;\n\t\t@foreach ($arr as $elem)\n\t\t\t&lt;li&gt;{{ $elem }}&lt;/li&gt;\n\t\t@endforeach\n\t&lt;/ul&gt;\n@endif</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tс числами. Выведите этот массив в виде списка\n\t\t<code class=\"code inline\">ul</code>. Сделайте так, чтобы в список попадали\n\t\tтолько элементы, значениями которых служат\n\t\tчетные числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз действия в представление передается переменная\n\t\t<code class=\"code inline\">$data</code>. Эта переменная может содержать\n\t\tмассив с числами либо быть обычным числом.\n\t\tЕсли переменная <code class=\"code inline\">$data</code> - массив, то\n\t\tвыведите элементы этого массива в виде списка\n\t\t<code class=\"code inline\">ul</code>, а если переменная <code class=\"code inline\">$data</code>\n\t\t- число, то выведите это число в абзаце.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/foreach-nested/","content":"\n\t\t\t\t<h1>Вложенные циклы @foreach в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть из действия в представление\n\tпередается вот такой массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем элементы этого массива, используя\n\tвложенный друг в друга директивы <code class=\"code inline\">@foreach</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $subArr)\n\t@foreach ($subArr as $elem)\n\t\t{{ $elem }}\n\t@endforeach\n@endforeach</code>\n</div>\n<p>\n\tА теперь при выводе в представлении давайте\n\tиз нашего массива сформируем два вложенных\n\tсписка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;ul&gt;\n\t@foreach ($arr as $subArr)\n\t\t&lt;li&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t@foreach ($subArr as $elem)\n\t\t\t\t\t&lt;li&gt;{{ $elem }}&lt;/li&gt;\n\t\t\t\t@endforeach\n\t\t\t&lt;/ul&gt;\n\t\t&lt;/li&gt;\n\t@endforeach\n&lt;/ul&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление\n\t\tдвухмерный массив с числами. Выведите\n\t\tего в виде HTML таблицы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/foreach-multi-arrays/","content":"\n\t\t\t\t<h1>Перебор многомерных массивов в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас дан вот такой массив с пользователями:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = [\n\t\t[\n\t\t\t'name' =&gt; 'user1',\n\t\t\t'age' =&gt; 21,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user2',\n\t\t\t'age' =&gt; 22,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user3',\n\t\t\t'age' =&gt; 23,\n\t\t],\n\t];\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем содержимое этого массива\n\tв виде списка <code class=\"code inline\">ul</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;ul&gt;\n\t@foreach ($users as $user)\n\t\t&lt;li&gt;{{ $user['name'] }} {{ $user['age'] }}&lt;/li&gt;\n\t@endforeach\n&lt;/ul&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tс работниками:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$employees = [\n\t\t[\n\t\t\t'name' =&gt; 'user1',\n\t\t\t'surname' =&gt; 'surname1',\n\t\t\t'salary' =&gt; 1000,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user2',\n\t\t\t'surname' =&gt; 'surname2',\n\t\t\t'salary' =&gt; 2000,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user3',\n\t\t\t'surname' =&gt; 'surname3',\n\t\t\t'salary' =&gt; 3000,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите этот массив в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите массив из предыдущей задачи\n\t\tв виде HTML таблицы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/forelse-directive/","content":"\n\t\t\t\t<h1>Цикл @forelse в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ Blade также встроен интересный цикл <code class=\"code inline\">@forelse</code>,\n\tтакже перебирающий массивы. Работает он следующим\n\tобразом: если в массиве есть элементы, то\n\tцикл их переберет, а если элементов нет,\n\tто выведет сообщение из блока <code class=\"code inline\">@empty</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@forelse ($arr as $elem)\n\t&lt;p&gt;{{ $elem }}&lt;/p&gt;\n@empty\n\t&lt;p&gt;в массиве нет элементов&lt;/p&gt;\n@endforelse</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с именами юзеров. Если\n\t\tв массиве есть элементы, то выведите\n\t\tкаждый элемент в своем абзаце.\n\t\tЕсли элементов нет, выведите\n\t\tсообщение об этом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/variable-loop/","content":"\n\t\t\t\t<h1>Переменная $loop в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри переборе массива с помощью <code class=\"code inline\">foreach</code>\n\tвнутри цикла доступна специальная переменная\n\t<code class=\"code inline\">$loop</code>. Она обеспечивает доступ к некоторой\n\tполезной информации об итерациях цикла.\n</p>\n<p>\n\tПосмотрим на примерах. Пусть\n\tмы перебираем циклом некоторый\n\tмассив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $elem }}\n@endforeach</code>\n</div>\n<p>\n\tДавайте на примере этого массива\n\tизучим возможности переменной <code class=\"code inline\">$loop</code>.\n</p>\n\n<h2>Граничные итерации</h2>\n<p>\n\tМожно также узнать первая это или\n\tпоследняя итерация цикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t@if ($loop-&gt;first)\n\t\tпервая итерация\n\t@endif\n\t\n\t@if ($loop-&gt;last)\n\t\tпоследняя итерация\n\t@endif\n\t\n\t{{ $elem }}\n@endforeach</code>\n</div>\n\n<h2>Четность</h2>\n<p>\n\tМожно также узнать четность\n\tитерации цикла:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t@if ($loop-&gt;odd)\n\t\tнечетная итерация\n\t@endif\n\t\n\t@if ($loop-&gt;even)\n\t\tчетная итерация\n\t@endif\n\t\t\n\t{{ $elem }}\n@endforeach</code>\n</div>\n\n<h2>Итерации</h2>\n<p>\n\tМожно узнать индекс текущей итерации\n\t(начинается с нуля):\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $loop-&gt;index }}\n\t{{ $elem }}\n@endforeach</code>\n</div>\n<p>\n\tМожно узнать номер текущей итерации\n\t(начинается с единицы):\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $loop-&gt;iteration }}\n\t{{ $elem }}\n@endforeach</code>\n</div>\n<p>\n\tМожно узнать, сколько итераций\n\tосталось:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $loop-&gt;remaining }}\n\t{{ $elem }}\n@endforeach</code>\n</div>\n\n<h2>Количество элементов</h2>\n<p>\n\tМожно узнать количество элементов\n\tв перебираемом массиве:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $loop-&gt;count }}\n\t{{ $elem }}\n@endforeach</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tИз действия в представление передается массив\n\t\tсо строками. Выведите элементы этого массива\n\t\tв виде списка <code class=\"code inline\">ul</code>. Сделайте так, чтобы\n\t\tперед значением элемента, выводился еще и\n\t\tпорядковый номер итерации, начиная с <code class=\"number inline\">0</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tпорядковый номер итерации начинался с <code class=\"number inline\">1</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tдля первой <code class=\"code inline\">li</code> добавлялся CSS класс\n\t\t<code class=\"code inline\">first</code>, а для последней - класс <code class=\"code inline\">last</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз действия в представление передается массив\n\t\tс числами. Выведите каждый элемент этого\n\t\tмассива в своем теге <code class=\"code inline\">b</code>, а три последних\n\t\tэлемента массива - в теге <code class=\"code inline\">i</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/break-directive/","content":"\n\t\t\t\t<h1>Директива @break в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно завершать работу цикла с помощью\n\tдирективы <code class=\"code inline\">@break</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $elem }}\n\t\n\t@if ($elem == 3)\n\t\t@break\n\t@endif\n@endforeach</code>\n</div>\n<p>\n\tМожно включить условие в строку\n\tобъявления директивы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t{{ $elem }}\n\t\n\t@break($elem == 3)\n@endforeach</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами.\n\t\tПереберите этот массив циклом\n\t\tдо первого нулевого элемента.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/continue-directive/","content":"\n\t\t\t\t<h1>Директива @continue в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно переходить к следующей итерации\n\tцикла с помощью директивы\n\t<code class=\"code inline\">@continue</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t@if ($elem == 3)\n\t\t@continue\n\t@endif\n\t\n\t{{ $elem }}\n@endforeach</code>\n</div>\n<p>\n\tМожно включить условие в строку\n\tобъявления директивы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@foreach ($arr as $elem)\n\t@continue($elem == 3)\n\t\n\t{{ $elem }}\n@endforeach</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив с числами. Выведите эти\n\t\tчисла в виде списка <code class=\"code inline\">ul</code>.\n\t\tПри выводе пропускайте\n\t\tнулевые элементы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/for-directive/","content":"\n\t\t\t\t<h1>Цикл @for в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ Blade также встроен и цикл <code class=\"code inline\">for</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@for ($i = 0; $i &lt; 10; $i++)\n\tзначение счетчика: {{ $i }}\n@endfor</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью цикла <code class=\"code inline\">@for</code> выведите <code class=\"number inline\">10</code>\n\t\tабзацев, заполненных числами от <code class=\"number inline\">1</code>\n\t\tдо <code class=\"number inline\">10</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/php-code-block/","content":"\n\t\t\t\t<h1>Блок PHP кода в Blade в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ некоторых случаях бывает полезно встроить\n\tPHP код в представления. Вы можете использовать\n\tBlade директиву <code class=\"code inline\">@php</code> для выполнения блока\n\tчистого PHP в вашем шаблоне:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@php\n\t//\n@endphp</code>\n</div>\n<p>\n\tДавайте выполним какой-нибудь код:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">@php\n\techo 123;\n@endphp</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОписанным способом выполните какой-нибудь PHP код.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/blade/practicum/","content":"\n\t\t\t\t<h1>Практика по шаблонизатору Blade фреймворка Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tссылок:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$links = [\n\t\t[\n\t\t\t'text' =&gt; 'text1',\n\t\t\t'href' =&gt; 'href1',\n\t\t],\n\t\t[\n\t\t\t'text' =&gt; 'text2',\n\t\t\t'href' =&gt; 'href2',\n\t\t],\n\t\t[\n\t\t\t'text' =&gt; 'text3',\n\t\t\t'href' =&gt; 'href3',\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tСформируйте из нашего массива следующий HTML код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;a href=\"http://href1\"&gt;text1&lt;/a&gt;\n&lt;a href=\"http://href2\"&gt;text2&lt;/a&gt;\n&lt;a href=\"http://href3\"&gt;text3&lt;/a&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tкаждая ссылка выводилась в отдельном теге\n\t\t<code class=\"code inline\">li</code> тега <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tс работниками:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$employees = [\n\t\t[\n\t\t\t'name' =&gt; 'user1',\n\t\t\t'surname' =&gt; 'surname1',\n\t\t\t'salary' =&gt; 1000,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user2',\n\t\t\t'surname' =&gt; 'surname2',\n\t\t\t'salary' =&gt; 2000,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user3',\n\t\t\t'surname' =&gt; 'surname3',\n\t\t\t'salary' =&gt; 3000,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user4',\n\t\t\t'surname' =&gt; 'surname4',\n\t\t\t'salary' =&gt; 4000,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user5',\n\t\t\t'surname' =&gt; 'surname5',\n\t\t\t'salary' =&gt; 5000,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите этот массив в виде следующей таблицы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;user1&lt;/td&gt;\n\t\t&lt;td&gt;surname1&lt;/td&gt;\n\t\t&lt;td&gt;1000&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;user2&lt;/td&gt;\n\t\t&lt;td&gt;surname2&lt;/td&gt;\n\t\t&lt;td&gt;2000&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;user3&lt;/td&gt;\n\t\t&lt;td&gt;surname3&lt;/td&gt;\n\t\t&lt;td&gt;3000&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;user4&lt;/td&gt;\n\t\t&lt;td&gt;surname4&lt;/td&gt;\n\t\t&lt;td&gt;4000&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;user5&lt;/td&gt;\n\t\t&lt;td&gt;surname5&lt;/td&gt;\n\t\t&lt;td&gt;5000&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tв первом ряду появились заголовки таблицы:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;th&gt;Имя&lt;/th&gt;\n\t\t&lt;th&gt;Фамилия&lt;/th&gt;\n\t\t&lt;th&gt;Зарплата&lt;/th&gt;\n\t&lt;/tr&gt;\n\t...</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tпоявилась еще одна колонка в начале таблицы,\n\t\tв которой будут выводится порядковые номера\n\t\tработников (то есть ключи элементов массива).\n\t\tНумерация должна начинаться с единицы, а\n\t\tне с нуля.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tна экран выводились только работники с зарплатой\n\t\tболее <code class=\"number inline\">2000</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из действия в представление массив\n\t\tс пользователей:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$users = [\n\t\t[\n\t\t\t'name' =&gt; 'user1',\n\t\t\t'surname' =&gt; 'surname1',\n\t\t\t'banned' =&gt; true,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user2',\n\t\t\t'surname' =&gt; 'surname2',\n\t\t\t'banned' =&gt; false,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user3',\n\t\t\t'surname' =&gt; 'surname3',\n\t\t\t'banned' =&gt; true,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user4',\n\t\t\t'surname' =&gt; 'surname4',\n\t\t\t'banned' =&gt; false,\n\t\t],\n\t\t[\n\t\t\t'name' =&gt; 'user5',\n\t\t\t'surname' =&gt; 'surname5',\n\t\t\t'banned' =&gt; false,\n\t\t],\n\t];\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tВыведите этот массив в виде HTML таблицы\n\t\tс тремя колонками: имя, фамилия и статус.\n\t\tВ последней колонке должен выводится статус\n\t\tпользователя: забанен он или нет. Если ключ\n\t\t<code class=\"code inline\">banned</code> для данного пользователя имеет\n\t\tзначение <code class=\"code inline\">true</code>, то выводите слово <code class=\"string inline\">'забанен'</code>,\n\t\tа если <code class=\"code inline\">false</code>, то слово <code class=\"string inline\">'активен'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tцвет текста <code class=\"code inline\">tr</code> с забаненным пользователем\n\t\tбыл красного цвета, а с активным пользователем\n\t\t- зеленого.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз действия в представление передается массив\n\t\tсо строками. Переберите этот массив циклом\n\t\tи в каждой итерации цикла создайте инпут,\n\t\tсделав значением инпута элемент массива.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИз действия в представление передается массив\n\t\tсо строками. Сделайте из этого массива выпадающий\n\t\tсписок <code class=\"code inline\">select</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте в действии контроллера массив с\n\t\tчислами от <code class=\"number inline\">1</code> до последнего дня текущего\n\t\tмесяца. Передайте этот массив в представление.\n\t\tСделайте также переменную, в которой будет\n\t\tхранится номер текущего дня. Также передайте\n\t\tэту переменную в представление.\n\t</p>\n\t<p>\n\t\tПереберите циклом переданный массив и выведите\n\t\tего в виде списка <code class=\"code inline\">ul</code>. При этом тегу\n\t\t<code class=\"code inline\">li</code>, в котором хранится номер текущего\n\t\tдня месяца добавьте класс <code class=\"code inline\">active</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/collections/","content":"\n\t\t\t\t<h1>Коллекции в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/collections.md\">документация по коллекциям</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСамостоятельно отработайте изученный материал.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/intro/","content":"\n\t\t\t\t<h1>Введение в миграции в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри работе с базами данных возникает\n\tхарактерная проблема. Дело в том, что\n\tвы создаете базу данных у себя на компьютере,\n\tа затем должны перенести ее на хостинг,\n\tлибо дать другим участникам вашей команды.\n</p>\n<p>\n\tАналогичная проблема возникает и\n\tпри любых изменениях в структуре\n\tбазы данных. Например, в какой-то таблице\n\tвы добавили новую колонку. Вам нужно как-то\n\tпередать это измениение на хостинг и\n\tдругим участникам команды.\n</p>\n<p>\n\tКак правило, это не очень удобно,\n\tведь все изменения нужно вносить\n\tвручную через PhpMyAdmin.\n\tПоэтому в Laravel придуман специальный\n\tмеханизм контроля и переноса структуры\n\tбаз данных. Он называется <dfn>миграции</dfn>.\n</p>\n<p>\n\tМиграции представляют собой файлы, в\n\tкоторых вы описываете начальную структуру,\n\tа также изменения, которые вы вносите\n\tв структуру вашей базы данных.\n</p>\n<p>\n\tДля каждого нового изменения по специальным\n\tправилам создается новый файл. Затем этот\n\tфайл вы можете передать другим участникам\n\tкоманды или выложить на хостинг.\n\tПолучив файл, другие участники команды\n\tвыполнят artisan команду, которая применит\n\tполученные миграции к базе.\n</p>\n<p>\n\tПри этом миграции всегда можно откатить\n\tназад, если что-то пошло не так. А можно\n\tвообще вернуть проект в исходную точку\n\tи начать работу заново.\n</p>\n<p>\n\tВ Laravel разработка любого проекта начинается\n\tс описания структуры базы данных\n\tчерез миграции. Это значит, что в PhpMyAdmin\n\tвы работать практически не будете.\n</p>\n<p>\n\tВ следующих уроках мы будем подробно\n\tразбираться с возможностями миграций.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/file-structure/","content":"\n\t\t\t\t<h1>Структура файлов миграций в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОбщая схема работы с миграциями будет следующей.\n\tПусть вы хотите что-то изменить в структуре\n\tбазы данных. Для этого вы командой artisan\n\tсоздаете файл с миграцией, затем в этом\n\tфайле прописываете изменения в структуре\n\tбазы данных, а затем выполняете еще\n\tодну команду artisan, которая применит\n\tописанные вами изменения.\n</p>\n<p>\n\tФайлы миграций располагаются в папке\n\t<code class=\"path inline\">database/migrations</code>. Имя каждого файла\n\tсостоит из названия миграции и метки времени,\n\tкоторая позволяет фреймворку определять\n\tпорядок применения миграций.\n</p>\n<p>\n\tФайлы миграций создаются с помощью\n\tartisan команды <code class=\"code inline\">make:migration</code>,\n\tпосле которой указывается имя миграции.\n</p>\n<p>\n\tВ результате будет создан класс\n\tс миграцией, в котором будут\n\tметоды <code class=\"code inline\">up</code> и <code class=\"code inline\">down</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass ИмяМиграции extends Migration\n\t{\n\t    public function up()\n\t    {\n\t       \n\t    }\n\t\n\t   \tpublic function down()\n\t    {\n\t        \n\t    }\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ методе <code class=\"code inline\">up</code> мы должны прописать команды,\n\tкоторые осуществляют миграцию, а в методе\n\t<code class=\"code inline\">down</code> команды, которые позволят\n\tоткатить эту миграцию назад.\n</p>\n<p>\n\tИмя миграции должно соответствовать\n\tсути изменения. В этом случае Laravel\n\tсгенерирует дополнительный код,\n\tосуществляющий миграцию и ее откат.\n</p>\n<p>\n\tПосмотрим на практике. Давайте создадим\n\tмиграцию, которая будет создавать\n\tтаблицу <code class=\"string inline\">posts</code>. Для этого в качестве\n\tимени миграции выберем <code class=\"code inline\">create_posts_table</code>.\n</p>\n<p>\n\tТеперь выполнем в терминале\n\tследующую команду:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:migration create_posts_table</code>\n</div>\n<p>\n\tВ результате Laravel создаст файл\n\tс классом миграции. При этом он поймет\n\tиз названия, что мы хотим создать новую\n\tтаблицу и сгенерирует доплнительный код\n\tдля создания и отката этой миграции.\n</p>\n<p>\n\tСтруктура созданного файла будет\n\tвыглядеть следующим образом:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.create_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CreatePostsTable extends Migration\n\t{\n\t   \tpublic function up()\n\t    {\n\t        Schema::create('posts', function (Blueprint $table) {\n\t           // тут будут команды миграции\n\t        });\n\t    }\n\t\n\t    public function down()\n\t    {\n\t        Schema::dropIfExists('posts');\n\t    }\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ папке с миграциями изначально уже\n\t\tесть некоторые миграции. Нам они пока\n\t\tне нужны. Уберите их из этой папки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью команды artisan сделайте\n\t\tмиграцию, создающую таблицу <code class=\"string inline\">users</code>.\n\t\tИзучите код сгенерированного файла.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/running/","content":"\n\t\t\t\t<h1>Запуск миграций в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся запускать\n\tмиграции. Пусть для примера у нас\n\tесть следующая тестовая миграция,\n\tсоздающая таблицу с постами (приведенные\n\tкоманды мы еще будем изучать в следующих\n\tуроках):\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.create_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CreatePostsTable extends Migration\n\t{\n\t\tpublic function up()\n\t\t{\n\t\t\tSchema::create('posts', function (Blueprint $table) {\n\t\t\t\t$table-&gt;id();\n\t\t\t\t$table-&gt;string('name');\n\t\t\t\t$table-&gt;text('text');\n\t\t\t});\n\t\t}\n\t\n\t\tpublic function down()\n\t\t{\n\t\t\tSchema::dropIfExists('posts');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте применим нашу миграцию.\n\tДля этого нужно выполнить artisan\n\tкоманду <code class=\"code inline\">migrate</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, создающую\n\t\tтаблицу с юзерами. Примените\n\t\tее. Откройте PMA и убедитесь,\n\t\tчто ваша миграция применилась.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/tables-fields/","content":"\n\t\t\t\t<h1>Колонки таблиц в миграциях Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся задавать колонки,\n\tкоторые будут в созданной таблице.\n\tПусть у нас есть следующая\n\tмиграция:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.create_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function up()\n\t{\n\t\tSchema::create('posts', function (Blueprint $table) {\n\t\t\t// тут задаются колонки таблицы\n\t\t});\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ коде миграции метод <code class=\"code inline\">Schema::create</code>\n\tсоздает таблицу. Имя таблицы указывается\n\tпервым параметром. Вторым параметром передается\n\tколлбэк, в который Laravel автоматически\n\tпередает объект с методами для создания\n\tколонок. Давайте рассмотрим эти методы.\n</p>\n\n<h2>Колонка Id</h2>\n<p>\n\tСледующий метод создает поле с именем <code class=\"string inline\">id</code>,\n\tпредставляющее собой первичный ключ:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;id();\n?&gt;</code>\n</div>\n\n<h2>Первичный ключ</h2>\n<p>\n\tСледующий метод также создает\n\tпервичный ключ, но позволяет\n\tзадать имя колонке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;increments('id');\n?&gt;</code>\n</div>\n\n<h2>Тип INTEGER</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем и типом <code class=\"string inline\">INTEGER</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;integer('votes');\n?&gt;</code>\n</div>\n\n<h2>Тип VARCHAR</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем и типом <code class=\"string inline\">VARCHAR</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;string('name');\n?&gt;</code>\n</div>\n\n<h2>Тип VARCHAR с длиной</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем, типом <code class=\"string inline\">VARCHAR</code>\n\tи заданной длиной:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;string('name', 100);\n?&gt;</code>\n</div>\n\n<h2>Тип TEXT</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем и типом <code class=\"string inline\">TEXT</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;text('text');\n?&gt;</code>\n</div>\n\n<h2>Тип DATE</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем и типом <code class=\"string inline\">DATE</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;date('created_at');\n?&gt;</code>\n</div>\n\n<h2>Тип DATETIME</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем и типом <code class=\"string inline\">DATETIME</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;dateTime('created_at');\n?&gt;</code>\n</div>\n\n<h2>Тип TIMESTAMP</h2>\n<p>\n\tСледующий метод создает поле\n\tс указанным именем и типом <code class=\"string inline\">TIMESTAMP</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$table-&gt;timestamp('added_on');\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, создающую\n\t\tтаблицу со статьями. Пусть у этой\n\t\tтаблицы будут поля с заголовком\n\t\tстатьи, ее текстом, датой создания.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, создающую\n\t\tтаблицу с юзерами. Пусть у этой\n\t\tтаблицы будут поля с именем,\n\t\tфамилией, датой рождения,\n\t\tдатой создания юзера.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/fields-adding/","content":"\n\t\t\t\t<h1>Добавление новых полей в миграциях Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся изменять структуру\n\tуже созданных таблиц с помощью миграций.\n\tДля начала давайте научимся добавлять\n\tв таблицу новые поля.\n</p>\n<p>\n\tДля начала давайте создадим файл\n\tс миграцией на изменение таблицы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:migration change_posts_table</code>\n</div>\n<p>\n\tДля изменения таблицы у фасада\n\t<code class=\"code inline\">Schema</code> нужно вызвать метод\n\t<code class=\"code inline\">table</code> вместо метода <code class=\"code inline\">create</code>:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.change_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function up()\n\t{\n\t\tSchema::table('posts', function (Blueprint $table) {\n\t\t\t\n\t\t});\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь можно описывать новые колонки\n\tтаким же образом, как мы это делали\n\tпри создании таблиц. Давайте для примера\n\tдобавим несколько новых полей:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.change_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function up()\n\t{\n\t\tSchema::table('posts', function (Blueprint $table) {\n\t\t\t$table-&gt;string('title');\n\t\t\t$table-&gt;text('desc');\n\t\t});\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПрименим созданную миграцию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, добавляющую\n\t\tновые колонки в таблицу с юзерами.\n\t\tПримените ее. Откройте PMA и убедитесь,\n\t\tчто ваша миграция применилась.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/preparing-fields-changing/","content":"\n\t\t\t\t<h1>Подготовка к изменению полей в миграциях Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно также изменять созданные поля.\n\tЕсть, однако, нюанс. Для этого необходимо\n\tустановить с помощью composer дополнительный\n\tпакет <code class=\"string inline\">doctrine/dbal</code>. Давайте сделаем\n\tэто:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">composer require doctrine/dbal</code>\n</div>\n<p>\n\tЕсли вы планируете изменять столбцы,\n\tсозданные с помощью метода <code class=\"code inline\">timestamp</code>,\n\tвы также должны добавить следующую\n\tконфигурацию в файл <code class=\"path inline\">config/database.php</code> вашего приложения:\n</p>\n<div class=\"block\" data-file=\"config/database.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Database\\DBAL\\TimestampType;\n\t\n\t'dbal' =&gt; [\n\t    'types' =&gt; [\n\t        'timestamp' =&gt; TimestampType::class,\n\t    ],\n\t],\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУстановите библиотеку Doctrine DBAL.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВнесите изменение в конфигурацию,\n\t\tчтобы можно было пользоваться\n\t\tметодом <code class=\"code inline\">timestamp</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/updating-fields-attributes/","content":"\n\t\t\t\t<h1>Изменение атрибутов полей в миграциях Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно изменять тип данных существующего поля.\n\tЭто делается с помощью метода <code class=\"code inline\">change</code>.\n\tДавайте посмотрим на пример.\n</p>\n<p>\n\tПусть в таблице с постами мы\n\tзадали поле <code class=\"string inline\">title</code> размером <code class=\"number inline\">50</code> символов.\n\tДавайте увеличим это поле до <code class=\"number inline\">100</code>\n\tсимволов:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.change_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function up()\n\t{\n\t\tSchema::table('posts', function (Blueprint $table) {\n\t\t\t$table-&gt;string('title', 100)-&gt;change();\n\t\t});\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ таблице с юзерами\n\t\tизмените размер поля <code class=\"string inline\">name</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/fields-removing/","content":"\n\t\t\t\t<h1>Удаление полей в миграциях в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля удаления полей используется метод <code class=\"code inline\">dropColumn</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::table('posts', function (Blueprint $table) {\n\t\t$table-&gt;dropColumn('name');\n\t});\n?&gt;</code>\n</div>\n<p>\n\tМожно удалить несколько столбцов таблицы,\n\tпередав в качестве параметра метода\n\tмассив их имен:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::table('posts', function (Blueprint $table) {\n\t\t$table-&gt;dropColumn(['name', 'desc']);\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите из таблицы с юзерами\n\t\tполе age.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите из таблицы с юзерами\n\t\tполя name и surname.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/fields-renaming/","content":"\n\t\t\t\t<h1>Переименование полей в миграциях Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля переименования полей используется\n\tметод <code class=\"code inline\">renameColumn</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::table('posts', function (Blueprint $table) {\n\t\t$table-&gt;renameColumn('name', 'title');\n\t});\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ таблице с юзерами переименуйте\n\t\tполе name в поле <code class=\"string inline\">first_name</code>,\n\t\tа поле surname в <code class=\"string inline\">second_name</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/fields-modifiers/","content":"\n\t\t\t\t<h1>Модификаторы полей в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри создании и изменении полей мы можем\n\tне только задавать им тип, но и указывать\n\tнекоторые модификаторы.\n</p>\n\n<h2>Обнуляемость</h2>\n<p>\n\tС помощью метода <code class=\"code inline\">nullable</code> можно\n\tсделать столбец обнуляемым:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::create('posts', function (Blueprint $table) {\n\t\t$table-&gt;string('desc')-&gt;nullable();\n\t});\n?&gt;</code>\n</div>\n<p>\n\tМожно задавать модификатор не только\n\tпри создании поля, но и при его изменении:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::table('posts', function (Blueprint $table) {\n\t\t$table-&gt;string('desc')-&gt;nullable()-&gt;change();\n\t});\n?&gt;</code>\n</div>\n\n<h2>Значение по умолчанию</h2>\n<p>\n\tС помощью метода <code class=\"code inline\">default</code> можно\n\tуказать для поля значение по умолчанию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::create('posts', function (Blueprint $table) {\n\t\t$table-&gt;string('desc')-&gt;default('some value');\n\t});\n?&gt;</code>\n</div>\n\n<h2>Комментарии</h2>\n<p>\n\tС помощью метода <code class=\"code inline\">comment</code> можно\n\tдобавлять комментарии к столбцам:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::create('posts', function (Blueprint $table) {\n\t\t$table-&gt;string('desc')-&gt;comment('my comment');\n\t});\n?&gt;</code>\n</div>\n\n<h2>Безнаковость</h2>\n<p>\n\tС помощью метода <code class=\"code inline\">unsigned</code> можно\n\tсделать поле типа <code class=\"string inline\">integer</code> беззнаковыми <code class=\"string inline\">UNSIGNED</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::create('posts', function (Blueprint $table) {\n\t\t$table-&gt;integer('vote')-&gt;unsigned();\n\t});\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте в таблице с юзерами\n\t\tкомментарий к полю <code class=\"string inline\">email</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте так, чтобы в таблице с юзерами\n\t\tполе <code class=\"string inline\">salary</code> по умолчанию\n\t\tпринимало значение <code class=\"number inline\">0</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРазрешите в таблице с юзерами\n\t\tполю <code class=\"string inline\">age</code> принимать значение\n\t\t<code class=\"code inline\">null</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте в таблице с юзерами\n\t\tполе <code class=\"string inline\">age</code> беззнаковым.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/fields-order/","content":"\n\t\t\t\t<h1>Порядок полей в миграциях Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно менять порядок полей в таблицах.\n\tДля этого есть два метода (только для баз MySQL).\n</p>\n\n<h2>На первое место</h2>\n<p>\n\tМетод <code class=\"code inline\">first</code> помещает поле первым\n\tв таблице:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.change_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function up()\n\t{\n\t\tSchema::table('posts', function (Blueprint $table) {\n\t\t\t$table-&gt;string('title')-&gt;first()-&gt;change();\n\t\t});\n\t}\n?&gt;</code>\n</div>\n\n<h2>После поля</h2>\n<p>\n\tА метод <code class=\"code inline\">after</code> помещает поле\n\tпосле указанного поля:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.change_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function up()\n\t{\n\t\tSchema::table('posts', function (Blueprint $table) {\n\t\t\t$table-&gt;string('title')-&gt;after('id')-&gt;change();\n\t\t});\n\t}\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tВ таблице с юзерами\n\t\tпереместите поле <code class=\"string inline\">name</code>\n\t\tна первое место.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте к таблице с юзерами\n\t\tновое поле <code class=\"string inline\">sex</code> поле\n\t\tполя <code class=\"string inline\">id</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/tables-removing/","content":"\n\t\t\t\t<h1>Удаление таблиц в миграциях в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля удаления таблиц используется\n\tметод <code class=\"code inline\">drop</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::drop('posts');\n?&gt;</code>\n</div>\n<p>\n\tПеред удалением можно выполнить\n\tпроверку существование таблицы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::dropIfExists('posts');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите таблицу с юзерами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПопробуйте удалить несуществующую таблицу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/tables-renaming/","content":"\n\t\t\t\t<h1>Переименование таблиц в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля переименования существующей таблицы\n\tиспользуется метод <code class=\"code inline\">rename</code>.\n\tПервым параметром он принимает\n\tстарое имя таблицы, а вторым - новое.\n\tДавайте переменуем таблицу <code class=\"string inline\">posts</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tSchema::rename('posts', 'articles');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПереименуйте таблицу с юзерами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/rolling-back-preparing/","content":"\n\t\t\t\t<h1>Подготовка к откату миграций в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВы уже знаете, что структура файла\n\tмиграции должна выглядеть следующим\n\tобразом:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.create_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CreatePostsTable extends Migration\n\t{\n\t\tpublic function up()\n\t\t{\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic function down()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ предыдущих уроках мы писали команды\n\tв методе <code class=\"code inline\">up</code>. Этот метод задает\n\tто, как наша база будет изменена\n\tпри миграции.\n</p>\n<p>\n\tВ методе <code class=\"code inline\">down</code> следует писать\n\tкоманды, которые позволят описанную\n\tоткатить миграцию.\n</p>\n<p>\n\tДля примера давайте сделаем миграцию,\n\tсоздающую таблицу. Соответственно при\n\tоткате миграции мы должны эту\n\tтаблицу удалить:\n</p>\n<div class=\"block\" data-file=\"database/migrations/метка.create_posts_table.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CreatePostsTable extends Migration\n\t{\n\t\tpublic function up()\n\t\t{\n\t\t\tSchema::create('posts', function (Blueprint $table) {\n\t\t\t\t\n\t\t\t});\n\t\t}\n\t\t\n\t\tpublic function down()\n\t\t{\n\t\t\tSchema::dropIfExists('posts');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, которая добавляет\n\t\tв таблицу новое поля. Пропишите\n\t\tоткат этой миграции.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, которая удаляет\n\t\tполе из таблицы. Пропишите\n\t\tоткат этой миграции.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, которая удаляет\n\t\tнесколько полей из таблицы. Пропишите\n\t\tоткат этой миграции.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, которая поменяет\n\t\tпорядок полей в таблице. Пропишите\n\t\tоткат этой миграции.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграцию, которая переименовывает\n\t\tтаблицу. Пропишите откат этой миграции.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/rolling-back/","content":"\n\t\t\t\t<h1>Откат миграций в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся откатывать\n\tпримененные миграции назад. Это\n\tделается с помощью различных\n\tartisan команд.\n</p>\n\n<h2>Откат последней миграции</h2>\n<p>\n\tС помощью следующей команды можно\n\tоткатить последнюю миграцию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate:rollback</code>\n</div>\n\n<h2>Несколько шагов назад</h2>\n<p>\n\tМожно сделать откат определенного числа\n\tмиграций, указав параметр step для команды\n\trollback. Например, следующая команда\n\tоткатит последние пять миграций:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate:rollback --step=5</code>\n</div>\n\n<h2>Отмена всех</h2>\n<p>\n\tСледующая команда отменит изменения\n\tвсех миграций вашего приложения:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate:reset</code>\n</div>\n\n<h2>Перезапуск</h2>\n<p>\n\tСледующая команда откатит все миграции,\n\tа затем выполнит их снова:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate:refresh</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tВыполните миграцию, а потом откатите\n\t\tее назад.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОткатите миграции на 3 шага назад.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОткатите все миграции.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПерезапустите все миграции.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/indexes-creating/","content":"\n\t\t\t\t<h1>Индексы в миграциях в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/migrations.md#indexes\">раздел про индексы</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ таблице с юзерами сделайте индекс\n\t\tпо полю <code class=\"string inline\">email</code>.\n\t</p>\n</div>\n\n<!--\nСоздание индексов\nПостроитель структур поддерживает несколько типов индексов. Сначала давайте посмотрим на пример, в котором задаётся, что значения столбца должны быть уникальными. Для создания индекса мы можем просто сцепить метод unique() с определением столбца:\n\n$table->string('email')->unique();\nДругой вариант — создать индекс после определения столбца. Например:\n\n$table->unique('email');\nВы можете даже передать массив столбцов в метод index() для создания сложного индекса:\n\n$table->index(['account_id', 'created_at']);\n\n\n\nДоступные типы индексов\n\nКоманда\tОписание\n$table->primary('id');\tДобавление первичного ключа\n$table->primary(['first', 'last']);\tДобавление составных ключей\n$table->unique('email');\tДобавление уникального индекса\n$table->unique('state', 'my_index_name');\tДобавление своего имени индекса (для версии 5.2 и выше)\n$table->unique(['first', 'last']);\tДобавление составного уникального индекса (для версии 5.3 и выше)\n$table->index('state');\tДобавление базового индекса\n\n\nУдаление индексов\nДля удаления индекса необходимо указать его имя. По умолчанию Laravel автоматически назначает имена индексам. Просто соедините имя таблицы, имя столбца-индекса и тип индекса. Вот несколько примеров:\n\nКоманда\tОписание\n$table->dropPrimary('users_id_primary');\tУдаление первичного ключа из таблицы \"users\"\n$table->dropUnique('users_email_unique');\tУдаление уникального индекса из таблицы \"users\"\n$table->dropIndex('geo_state_index');\tУдаление базового индекса из таблицы \"geo\"\nЕсли вы передадите массив столбцов в метод для удаления индексов, будет сгенерировано стандартное имя индекса на основе имени таблицы, столбца и типа ключа:\n\nSchema::table('geo', function (Blueprint $table) {\n  $table->dropIndex(['state']); // Удаление индекса 'geo_state_index'\n});\n\n<p>\n\t\n</p>\n<div class=\"block\"> file=\"\"\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t\n?&gt;</code>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/12/","content":""},{"url":"/ru/php/framework/laravel/book/prime/database/migrations/production-force/","content":"\n\t\t\t\t<h1>Принудительные миграции в продакшене в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНекоторые операции миграций разрушительны,\n\tзначит они могут привести к потере ваших данных.\n\tДля предотвращения случайного запуска этих команд\n\tна вашей боевой БД перед их выполнением запрашивается\n\tподтверждение. Для принудительного запуска команд\n\tбез подтверждения используйте ключ <code class=\"code inline\">--force</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate --force</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте миграцию на удаление\n\t\tтаблицы. Выполните ее принудительно.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/intro/","content":"\n\t\t\t\t<h1>Наполнение БД фиктивными данными в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ Laravel можно заполнять таблицы БД\n\tфиктивными данными. Это делается\n\tс помощью специальных классов <dfn>сидеров</dfn>.\n\tЭти классы располагаются в папке <code class=\"path inline\">database/seeders</code>.\n</p>\n<p>\n\tПо умолчанию там уже есть класс <code class=\"code inline\">DatabaseSeeder</code>,\n\tпредставляющий собой заготовку, которой\n\tможно пользоваться. У этого класса есть\n\tметод <code class=\"code inline\">run</code>, в котором мы будем\n\tпрописывать команды на заполнение таблиц\n\tбазы данных:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t    public function run()\n\t    {\n\t        // команды\n\t    }\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОткройте в редакторе описанный класс\n\t\t<code class=\"code inline\">DatabaseSeeder</code>. Изучите его.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/tables-filling/","content":"\n\t\t\t\t<h1>Заполнение таблиц через сидеры в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь пропишем в нашем\n\tсидере команды на заполнение\n\tкакой-нибудь таблицы.\n</p>\n<p>\n\tДля начала нам нужно заюзать фасад <code class=\"code inline\">DB</code>\n\tпозволяющий осуществлять вставку данных:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Support\\Facades\\DB; // подключаем\n\t\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\t// команды\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь вставим в таблицу с постами\n\tновый пост. Это делается следующим образом:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Support\\Facades\\DB;\n\t\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\tDB::table('posts')-&gt;insert([\n\t\t\t\t'title' =&gt; 'title 1',\n\t\t\t\t'slug'  =&gt; 'post-1',\n\t\t\t\t'text'  =&gt; 'text text text 1',\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно вставить не одну запись,\n\tа сразу несколько:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Support\\Facades\\DB;\n\t\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\tDB::table('posts')-&gt;insert([\n\t\t\t\t[\n\t\t\t\t\t'title' =&gt; 'title 1',\n\t\t\t\t\t'slug'  =&gt; 'post-1',\n\t\t\t\t\t'text'  =&gt; 'text text text 1',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'title' =&gt; 'title 2',\n\t\t\t\t\t'slug'  =&gt; 'post-2',\n\t\t\t\t\t'text'  =&gt; 'text text text 2',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'title' =&gt; 'title 3',\n\t\t\t\t\t'slug'  =&gt; 'post-3',\n\t\t\t\t\t'text'  =&gt; 'text text text 3',\n\t\t\t\t],\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь можно в терминале запустить\n\tкоманду на вставку данных из сидера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan db:seed</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте данные в таблицу с юзерами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/random-strings-generation/","content":"\n\t\t\t\t<h1>Генерация случайных строк в сидерах в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно сделать так, чтобы Laravel\n\tгенерировал случайные строки для\n\tтого, чтобы не приходилось придумывать\n\tданные для вставки самостоятельно.\n</p>\n<p>\n\tДля этого используется специальный\n\tкласс <code class=\"code inline\">Str</code>. Давайте его заюзаем:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Support\\Str; // подключаем\n\t\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tУ этого класса есть статический метод\n\t<code class=\"code inline\">random</code>, генерирующий случайную\n\tстроку заданной длины. Воспользуемся\n\tэтим методом для генерации вставляемых\n\tстрок:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\tDB::table('posts')-&gt;insert([\n\t\t\t\t'title' =&gt; Str::random(10),\n\t\t\t\t'slug'  =&gt; Str::random(10),\n\t\t\t\t'text'  =&gt; Str::random(50),\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните таблицу с юзерами\n\t\t<code class=\"number inline\">10</code>-ю записями со случайными\n\t\tстроками.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/string-part-generation/","content":"\n\t\t\t\t<h1>Генерация части строки в сидерах в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНе обязательно генерировать случайным образом\n\tвсе значение поля. Можно сделать только часть\n\tстроки и выполнить конкатенацию.\n</p>\n<p>\n\tПусть для примера у нас есть таблица\n\tс доменами. Давайте будем генерировать\n\tдоменное имя, а доменную зону прибавим\n\tс помощью конкатенации:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\tDB::table('domains')-&gt;insert([\n\t\t\t\t'name' =&gt; Str::random(10) . '.com',\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь давайте сгенерируем\n\tдомены третьего уровня:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\tDB::table('domains')-&gt;insert([\n\t\t\t\t'name' =&gt; Str::random(5) . '.' . Str::random(10) . '.com',\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗаполните таблицу с юзерами,\n\t\tсгенерировав емейлы по изученному\n\t\tпринципу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/passwords-hashes/","content":"\n\t\t\t\t<h1>Хеширование паролей в сидерах в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tТаблица с юзерами в Laravel особенная.\n\tПо ней осуществляется авторизация пользователей.\n\tДля этого в таблице должно быть поле\n\t<code class=\"string inline\">password</code>, содержащее хеш пароля.\n</p>\n<p>\n\tПоэтому при генерации юзеров мы должны\n\tвместо паролей вставлять хеши этих\n\tпаролей. Давайте сделаем это.\n\tДля начала подключим фасад <code class=\"code inline\">Hash</code>\n\tдля хеширования пароля:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Support\\Facades\\Hash\n\t\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t    public function run()\n\t    {\n\t\t\t\n\t    }\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь с помощью метода <code class=\"code inline\">make</code>\n\tпри вставке нового юзера захешируем\n\tпридуманный нами пароль:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\tDB::table('users')-&gt;insert([\n\t\t\t\t'name' =&gt; Str::random(10),\n\t\t\t\t'email' =&gt; Str::random(10).'@gmail.com',\n\t\t\t\t'password' =&gt; Hash::make('12345'),\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыполните вставку <code class=\"number inline\">10</code> юзеров,\n\t\tзахешировав их пароли.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/distinct-classes/","content":"\n\t\t\t\t<h1>Отдельные классы сидеров в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНе обязательно размещать все сидеры\n\tв одном классе <code class=\"code inline\">DatabaseSeeder</code>.\n\tИх можно разносить по разным классам.\n</p>\n<p>\n\tСделаем, к примеру, сидер для заполнения\n\tтаблицы с постами:\n</p>\n<div class=\"block\" data-file=\"database/seeders/PostSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnamespace Database\\Seeders;\n\t\n\tuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\n\tuse Illuminate\\Database\\Seeder;\n\tuse Illuminate\\Support\\Str;\n\t\n\tclass PostSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЗапустим его отдельно следующей командой:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan db:seed --class=PostSeeder</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте отдельный сидер для\n\t\tтаблицы с юзерами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте отдельный сидер для\n\t\tтаблицы с городами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте отдельный сидер для\n\t\tтаблицы со странами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/common-calling/","content":"\n\t\t\t\t<h1>Общий вызов отдельных сидеров в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tУдобно разбивать сидеры по отдельным файлам,\n\tно не очень удобно вызывать каждый сидер\n\tпо-отдельности. Для упрощения можно\n\tв <code class=\"code inline\">DatabaseSeeder</code> прописать автоматический\n\tвызов всех отдельных сидеров.\n</p>\n<p>\n\tПусть, к примеру, у нас есть два отдельных\n\tсидера: <code class=\"code inline\">PostSeeder</code> и <code class=\"code inline\">CommentSeeder</code>.\n\tДавайте вызовем их в основном сидере.\n\tДля этого для начала заюзаем наши\n\tотдельные сидеры:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse PostSeeder;\n\tuse CommentSeeder;\n\t\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь пропишем их вызов с помощью\n\tспециального метода <code class=\"code inline\">call</code>:\n</p>\n<div class=\"block\" data-file=\"database/seeders/DatabaseSeeder.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass DatabaseSeeder extends Seeder\n\t{\n\t\tpublic function run()\n\t\t{\n\t\t\t$this-&gt;call([\n\t\t\t\tPostSeeder::class,\n\t\t\t\tCommentSeeder::class,\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь можно запустить все прописанные\n\tсидеры с помощью уже известной вам\n\tкоманды на запуск основного сидера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan db:seed</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПропишите в основном сидере сидер\n\t\tс для юзеров, сидер для городов\n\t\tи сидер для стран.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/full-rebuilding/","content":"\n\t\t\t\t<h1>Полное перестроение БД в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно полностью перестроить базу данных,\n\tзаново выполнив все миграции и сидеры.\n\tЭто делается с помощью следующей команды:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan migrate:fresh --seed</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыполните полное перестроение БД.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/seeders/test-tables/","content":"\n\t\t\t\t<h1>Тестовые таблицы в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте создадим и наполним тестовые таблицы,\n\tкоторыми мы будем пользоваться в следующих\n\tразделах учебника при изучении работы\n\tс базами данных:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>posts</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">title</span><span class=\"type\">(varchar)</span></li><li><span class=\"name\">slug</span><span class=\"type\">(varchar)</span></li><li><span class=\"name\">likes</span><span class=\"type\">(integer)</span></li><li><span class=\"name\">created_at</span><span class=\"type\">(datetime)</span></li><li><span class=\"name\">updated_at</span><span class=\"type\">(datetime)</span></li></ul></div></div>\n<div class=\"block\"><div class=\"tastr\"><h4>users</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span><span class=\"type\">(varchar)</span></li><li><span class=\"name\">email</span><span class=\"type\">(varchar)</span></li><li><span class=\"name\">age</span><span class=\"type\">(integer)</span></li><li><span class=\"name\">salary</span><span class=\"type\">(integer)</span></li><li><span class=\"name\">created_at</span><span class=\"type\">(datetime)</span></li><li><span class=\"name\">updated_at</span><span class=\"type\">(datetime)</span></li></ul></div></div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте миграции и сидеры для\n\t\tуказанных таблиц.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/intro/","content":"\n\t\t\t\t<h1>Построитель запросов Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак правило, при работе с фреймворками\n\tне требуется писать SQL запросы вручную.\n\tОбычно фреймворки предоставляют некий набор\n\tфункций, с помощью которых можно работать\n\tс базой данных.\n\tВ Laravel для работы с БД есть несколько\n\tразных способов. Самым базовым является\n\tиспользование построителя запросов (QueryBuilder, QB).\n</p>\n<p>\n\tПостроитель запросов позволяет отправлять\n\tзапросы к базе, используя PHP команды,\n\tизбавляя программиста от написания сырого SQL.\n\tПри этом построитель запросов защищает\n\tваш код от инъекций и вам нет необходимости\n\tэкранировать строки перед их передачей в запрос.\n</p>\n<p>\n\tПостроитель запросов представляет собой\n\tфасад с именем <code class=\"code inline\">DB</code>. Подключим его\n\tк контроллеру:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnamespace App\\Http\\Controllers;\n\tuse Illuminate\\Support\\Facades\\DB; // подключаем фасад DB\n\t\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПодключите фасад <code class=\"code inline\">DB</code> к контроллеру\n\t\tюзеров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/getting-all-notes/","content":"\n\t\t\t\t<h1>Получение всех записей через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте с помощью фасада <code class=\"code inline\">DB</code>\n\tполучим все записи из таблицы <code class=\"string inline\">posts</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = DB::table('posts')-&gt;get();\n\t\t\tdump($posts);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЭти записи можно перебрать циклом:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = DB::table('posts')-&gt;get();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКаждая запись представляет собой объект,\n\tсвойствами которого служат поля таблицы БД:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = DB::table('posts')-&gt;get();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post-&gt;title);\n\t\t\t\tdump($post-&gt;text);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все записи из таблицы <code class=\"string inline\">users</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПереберите полученные записи циклом\n\t\tи выведите каждую из записей.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/records-view-output/","content":"\n\t\t\t\t<h1>Вывод полученных записей в представлении в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте отправим полученные записи\n\tв представление:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = DB::table('posts')-&gt;get();\n\t\t\treturn view('post.show', ['posts' =&gt; $posts]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВыведем их в представлении в нужном виде:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\t@foreach ($posts as $post)\n\t\t&lt;div&gt;\n\t\t\t&lt;h2&gt;{{ $post-&gt;title }}&lt;/h2&gt;\n\t\t\t&lt;div&gt;\n\t\t\t\t{{ $post-&gt;text }}\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t@endforeach\n&lt;/x-layout&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все записи из таблицы <code class=\"string inline\">users</code>\n\t\tи выведите их в представлении в виде\n\t\tHTML таблицы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/viewing-sql-queries/","content":"\n\t\t\t\t<h1>Просмотр SQL запросов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри работе с построителем запросов иногда бывает\n\tнужно посмотреть, какой SQL запрос совершается\n\tк базе. Для этого есть различные способы.\n</p>\n\n<h2>Через Debugbar</h2>\n<p>\n\tСамый лучший способ - это установить панель\n\t<a href=\"/ru/php/framework/laravel/book/prime/basis/debugbar/\">debugbar</a>\n\tи отслеживать запросы через нее. Для этого нужно\n\tперейти на вкладку Queries.\n</p>\n\n<h2>Через QueryLog</h2>\n<p>\n\tПеред запросом включаем лог запросов\n\tи сразу после запроса делаем дамп:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\tDB::enableQueryLog();\n\t\t\tDB::table('posts')-&gt;where('id', '&gt;', 5)-&gt;get();\n\t\t\tdump(DB::getQueryLog());\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Через toSql</h2>\n<p>\n\tСледующий способ также отобразит запрос,\n\tно без подставления переменных в условие\n\tзапроса:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$query = DB::table('posts')-&gt;where('id', '&gt;', 5)-&gt;toSql();\n\t\t\tdump($query);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Дамп</h2>\n<p>\n\tМожно посмотреть запрос через\n\tметод <code class=\"code inline\">dd</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\tDB::table('posts')-&gt;where('id', '&gt;', 5)-&gt;dd();\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно также посмотреть запрос через\n\tметод <code class=\"code inline\">dump</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\tDB::table('posts')-&gt;where('id', '&gt;', 5)-&gt;dump();\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий запрос:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;where('id', '!=', 3)-&gt;get();\n?&gt;</code>\n\t</div>\n\t<p>\n\t\tПосмотрите различными способами,\n\t\tкакой SQL запрос выполняется на самом\n\t\tделе.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОпределите, за какое время был\n\t\tвыполнен приведенный запрос.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/selection-fields/","content":"\n\t\t\t\t<h1>Поля выборки через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНе всегда нужно выбирать все столбцы из таблицы БД.\n\tС помощью метода <code class=\"code inline\">select</code> можно указать\n\tнеобходимые поля в выборке:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')-&gt;select('title', 'text')-&gt;get();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПри получении данных из таблицы\n\t\tс юзерами оставьте в выборке только\n\t\tполя <code class=\"string inline\">name</code> и <code class=\"string inline\">email</code>.\n\t</p>\n</div>\n\n<h2>Переименование столбцов</h2>\n<p>\n\tПри выборке можно осуществлять переименовывание\n\tстолбцов. Давайте сделаем так, чтобы поле <code class=\"string inline\">text</code>\n\tв полученной выборке называлось <code class=\"string inline\">post_text</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')-&gt;select('title', 'text as post_text')-&gt;get();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПри получении данных из таблицы\n\t\tс юзерами переименуйте поле <code class=\"string inline\">email</code>\n\t\tна <code class=\"string inline\">user_email</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/condition-where/","content":"\n\t\t\t\t<h1>Условия where при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри получении данных можно задавать условие на выборку.\n\tЭто делается при помощи метода <code class=\"code inline\">where</code>. Давайте\n\tдля примера с помощью этого метода получим все\n\tпосты, количество лайков у которых равно <code class=\"number inline\">100</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')-&gt;where('likes', 100)-&gt;get();\n?&gt;</code>\n</div>\n<p>\n\tА теперь получим посты, у которых количество\n\tлайков больше <code class=\"number inline\">100</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')-&gt;where('likes', '&gt;', 100)-&gt;get();\n?&gt;</code>\n</div>\n<p>\n\tА теперь получим посты, у которых количество\n\tлайков не равно <code class=\"number inline\">100</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')-&gt;where('likes', '!=', 100)-&gt;get();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом,\n\t\tравным <code class=\"number inline\">30</code> лет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом,\n\t\tне равным <code class=\"number inline\">30</code> лет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом,\n\t\tбольше <code class=\"number inline\">30</code> лет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом,\n\t\tменьше <code class=\"number inline\">30</code> лет.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом,\n\t\tменьшим или равным <code class=\"number inline\">30</code> лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/several-conditions-where/","content":"\n\t\t\t\t<h1>Несколько условий where при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ запросе можно написать несколько\n\tусловий <code class=\"code inline\">where</code>. В этом случае\n\tони объединятся через логическое <code class=\"code inline\">И</code>.\n\tДавайте посмотрим на примере. Напишем\n\tследующий запрос:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;where('likes', '&gt;', 10)\n\t\t-&gt;where('likes', '&lt;', 20)\n\t\t-&gt;get();\n?&gt;</code>\n</div>\n<p>\n\tВ результате к базе выполнится\n\tследующий запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT * FROM posts WHERE likes &gt; 10 AND likes &lt; 20</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом\n\t\tот <code class=\"number inline\">20</code> до <code class=\"number inline\">30</code> лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/condition-orWhere/","content":"\n\t\t\t\t<h1>Условия orWhere при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью метода <code class=\"code inline\">orWhere</code> можно\n\tобъединять условия через логическое <code class=\"code inline\">ИЛИ</code>.\n\tДавайте посмотрим на примере:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;where('id', '=', 10)\n\t\t-&gt;orWhere('likes', '&gt;', 10)\n\t\t-&gt;get();\n?&gt;</code>\n</div>\n<p>\n\tВ результате к базе выполнится\n\tследующий запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT * FROM posts WHERE id = 10 OR likes &gt; 10</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом <code class=\"number inline\">30</code>\n\t\tили <code class=\"string inline\">id</code>, большем <code class=\"number inline\">4</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом <code class=\"number inline\">30</code>,\n\t\tили зарплатой <code class=\"number inline\">500</code>,\n\t\tили <code class=\"string inline\">id</code>, большем <code class=\"number inline\">4</code>, \n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/complex-conditions/","content":"\n\t\t\t\t<h1>Сложные условия при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри выборке можно конструировать условия\n\tлюбой сложности. Для этого в метод <code class=\"code inline\">orWhere</code>\n\tнужно параметром передать анонимную функцию,\n\tв которой будут писаться сгрупированные команды:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;where('id', '=', 3)\n\t\t-&gt;orWhere(function($query) {\n\t\t\t// тут пишем сгрупированные команды\n\t\t})\n\t-&gt;get();\n?&gt;</code>\n</div>\n<p>\n\tВнутри функции будет доступен объект <code class=\"code inline\">$query</code>,\n\tк которому можно применять методы построителя\n\tзапроса. \n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;where('id', '=', 3)\n\t\t-&gt;orWhere(function($query) {\n\t\t\t$query\n\t\t\t\t-&gt;where('likes', '&gt;', 10)\n\t\t\t\t-&gt;where('likes', '&lt;', 50);\n\t\t})\n\t-&gt;get();\n?&gt;</code>\n</div>\n<p>\n\tВ результате к базе выполнится\n\tследующий запрос:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"sql\">SELECT * FROM posts WHERE id = 3 OR (likes &gt; 10 AND likes &gt; 50)</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров, у которых\n\t\tзарплата равна <code class=\"number inline\">500</code> либо\n\t\tвозраст от <code class=\"number inline\">20</code> до <code class=\"number inline\">30</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров, у которых\n\t\tвозраст от <code class=\"number inline\">20</code> до <code class=\"number inline\">30</code>, либо\n\t\tзарплата от <code class=\"number inline\">400</code> до <code class=\"number inline\">800</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/getting-one-row/","content":"\n\t\t\t\t<h1>Получение одной строки через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЧасто нам нужно получить из базы\n\tне массив строк, а одну строку.\n\tДля этого вместо метода <code class=\"code inline\">get</code>\n\tнужно воспользоваться методом <code class=\"code inline\">first</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = DB::table('posts')-&gt;where('id', 1)-&gt;first();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с <code class=\"string inline\">id</code>, равным <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в представление юзера,\n\t\tполученного в предыдущей задаче.\n\t\tВыведите его имя, возраст и email\n\t\tв отдельных абзацах.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/getting-column-value/","content":"\n\t\t\t\t<h1>Получение значения одного столбца через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно извлечь значение одной колонки\n\tопределенного ряда. Для этого используется\n\tметод <code class=\"code inline\">value</code>. В следующем примере\n\tнаш запрос найдет первую запись, подпадающую\n\tпод условие и возьмет из нее значение\n\tполя <code class=\"string inline\">title</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$title = DB::table('posts')-&gt;where('id', '1')-&gt;value('title');\n\techo $title;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите email юзера с <code class=\"string inline\">id</code>,\n\t\tравным <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в представление email,\n\t\tполученный в предыдущей задаче.\n\t\tВыведите его в абзаце.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/getting-column-collection/","content":"\n\t\t\t\t<h1>Получение коллекции значений столбца через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно получить коллекцию значений одного столбца,\n\tсобранную со всех рядов. Для этого используется\n\tметод <code class=\"code inline\">pluck</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$titles = DB::table('posts')-&gt;pluck('title');\n\tdump($titles);\n?&gt;</code>\n</div>\n<p>\n\tМожно перебрать полученные данные циклом:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$titles = DB::table('posts')-&gt;pluck('title');\n\t\n\tforeach ($titles as $title) {\n\t\techo $title;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно получить не все посты,\n\tа только подпадающие под условие:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$titles = DB::table('posts')\n\t\t-&gt;where('id', '&gt;', '3')\n\t\t-&gt;pluck('title');\n\t\t\n\tdump($titles);\n?&gt;</code>\n</div>\n<!--\n<p>\n\tС полученным результатом можно выполнять\n\tвсе операции, доступные для коллекций.\n\tСмотрите пример:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$titles = DB::table('posts')-&gt;pluck('title');\n\t\n\t// todo\n?&gt;</code>\n</div>\n-->\n<div class=\"task\">\n\t<p>\n\t\tПолучите коллекцию имен всех юзеров.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в представление коллекцию\n\t\tюзеров, полученную в предыдущей задаче.\n\t\tВыведите эти данные в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/condition-whereBetween/","content":"\n\t\t\t\t<h1>Условие whereBetween при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">whereBetween</code> проверяет, что значения\n\tстолбца находится в указанном интервале:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;whereBetween('likes', [1, 100])\n\t\t-&gt;get();\n\t\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<p>\n\tМетод <code class=\"code inline\">whereNotBetween</code> проверяет, что значения\n\tстолбца находится вне указанного интервала:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;whereNotBetween('likes', [1, 100])\n\t\t-&gt;get();\n\t\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров, возраст которых находится\n\t\tв промежутке от <code class=\"number inline\">30</code> до <code class=\"number inline\">40</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров, возраст которых находится\n\t\tНЕ в промежутке от <code class=\"number inline\">30</code> до <code class=\"number inline\">40</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/condition-whereIn/","content":"\n\t\t\t\t<h1>Условие whereIn при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">whereIn</code> проверяет, что значения\n\tстолбца содержатся в указанном массиве:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;whereIn('id', [1, 2, 3])\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<p>\n\tМетод <code class=\"code inline\">whereNotIn</code> проверяет, что значения\n\tстолбца не содержатся в указанном массиве:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;whereNotIn('id', [1, 2, 3])\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров с <code class=\"string inline\">id</code>,\n\t\tравными <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>, <code class=\"number inline\">3</code> и <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров с <code class=\"string inline\">id</code>,\n\t\tНЕ равными <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code>, <code class=\"number inline\">3</code> и <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/null-checking/","content":"\n\t\t\t\t<h1>Проверка на NULL при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">whereNull</code> проверяет, что значения\n\tстолбца равны <code class=\"code inline\">NULL</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;whereNull('updated_at')\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<p>\n\tМетод <code class=\"code inline\">whereNotNull</code> проверяет, что\n\tзначения столбца не равны <code class=\"code inline\">NULL</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;whereNotNull('updated_at')\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте оба изученных метода\n\t\tна каком-нибудь поле таблицы\n\t\tс юзерами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/dynamic-conditions/","content":"\n\t\t\t\t<h1>Динамические условия при выборке в QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно использовать динамические условия,\n\tв которых после слова <code class=\"code inline\">where</code> будет\n\tнаписано имя поля таблицы. Для примера\n\tдавайте сделаем условие по полю <code class=\"string inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = DB::table('posts')\n\t\t-&gt;whereId(1)\n\t\t-&gt;get();\n\t\n\tdump($post);\n?&gt;</code>\n</div>\n<p>\n\tА теперь сделаем условие по полю <code class=\"string inline\">slug</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = DB::table('posts')\n\t\t-&gt;whereSlug('my-page')\n\t\t-&gt;get();\n\t\n\tdump($post);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с полем <code class=\"string inline\">id</code>,\n\t\tравным <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с полем <code class=\"string inline\">name</code>,\n\t\tравным <code class=\"string inline\">'john'</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с полем <code class=\"string inline\">email</code>,\n\t\tравным <code class=\"string inline\">'john@mail.com'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/dynamic-conditions-combinations/","content":"\n\t\t\t\t<h1>Комбинации динамических условий QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно комбинировать условия\n\tв одном методе:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = DB::table('posts')\n\t\t-&gt;whereIdAndSlug(1, 'my-page')\n\t\t-&gt;first();\n\t\n\tdump($post);\n?&gt;</code>\n</div>\n<p>\n\tМожно также объединять условия\n\tчерез логическое <code class=\"code inline\">ИЛИ</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = DB::table('posts')\n\t\t-&gt;whereIdOrSlug(1, 'my-page')\n\t\t-&gt;first();\n\t\n\tdump($post);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с полем <code class=\"string inline\">id</code>, равным <code class=\"number inline\">3</code>,\n\t\tИ полем <code class=\"string inline\">age</code>, равным <code class=\"string inline\">20</code>\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с полем <code class=\"string inline\">id</code>, равным <code class=\"number inline\">3</code>,\n\t\tИЛИ полем <code class=\"string inline\">age</code>, равным <code class=\"string inline\">20</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/data-sorting/","content":"\n\t\t\t\t<h1>Сортировка данных при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">orderBy</code> позволяет отсортировать\n\tрезультат запроса по заданному столбцу:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;orderBy('likes')\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<p>\n\tВторой параметр метода задаёт направление сортировки.\n\tОн может быть либо <code class=\"string inline\">'asc'</code>, либо <code class=\"string inline\">'desc'</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;orderBy('likes', 'desc')\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров и отсортируйте\n\t\tих по возрастанию возраста.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров и отсортируйте\n\t\tих по убыванию зарплаты.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/sorting-by-date/","content":"\n\t\t\t\t<h1>Сортировка по дате при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетоды <code class=\"code inline\">latest</code> и <code class=\"code inline\">oldest</code> позволяют легко\n\tотсортировать результаты по дате. По умолчанию выполняется\n\tсортировка по столбцу <code class=\"string inline\">created_at</code>.\n</p>\n<p>\n\tДавайте отсортируем посты по убыванию даты:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;latest()\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<p>\n\tА теперь отсортируем посты по возрастанию даты:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;oldest()\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров и отсортируйте\n\t\tих по возрастанию поля <code class=\"string inline\">created_at</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров и отсортируйте\n\t\tих по убыванию поля <code class=\"string inline\">created_at</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров с возрастом больше <code class=\"number inline\">30</code>\n\t\tи отсортируйте их по возрастанию\n\t\tполя <code class=\"string inline\">created_at</code>.\n\t</p>\n</div>\n\n<h2>Указания поля сортировки</h2>\n<p>\n\tМожно передать имя столбца для сортировки по нему.\n\tДля примера давайте отсортируем по возрастанию\n\tдаты, хранящейся в поле <code class=\"string inline\">date</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;oldest('date')\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров и отсортируйте\n\t\tих по убыванию поля <code class=\"string inline\">updated_at</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров с возрастом больше <code class=\"number inline\">30</code>\n\t\tи отсортируйте их по возрастанию\n\t\tполя <code class=\"string inline\">updated_at</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/random-sorting/","content":"\n\t\t\t\t<h1>Случайная сортировка при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля сортировки результатов запроса в случайном порядке\n\tможно использовать метод <code class=\"code inline\">inRandomOrder</code>. Давайте\n\tдля примера получим все посты и отсортируем их\n\tв случайном порядке:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;inRandomOrder()\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<p>\n\tА теперь давайте получим один случайный пост:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = DB::table('posts')\n\t\t-&gt;inRandomOrder()\n\t\t-&gt;first();\n\t\t\n\tdump($post);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров, отсортированных\n\t\tв случайном порядке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите одного случайного юзера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с возрастом от\n\t\t<code class=\"number inline\">20</code> до <code class=\"number inline\">30</code>, отсортированных\n\t\tв случайном порядке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите одного случайного юзера\n\t\tс возрастом от <code class=\"number inline\">20</code> до <code class=\"number inline\">30</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/rows-amount/","content":"\n\t\t\t\t<h1>Количество записей в выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">take</code> позволяет задать количество\n\tполучаемых записей. Например, получим\n\tпервые <code class=\"number inline\">5</code> записей:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;take(5)\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите первых <code class=\"number inline\">3</code> юзера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите первых <code class=\"number inline\">3</code> юзера\n\t\tс возрастом, равным <code class=\"number inline\">30</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/selection-offset/","content":"\n\t\t\t\t<h1>Сдвиг при выборке через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">skip</code> позволяет задать\n\tсдвиг при выборке. Обязательно должен\n\tиспользоваться в комбинации с <code class=\"code inline\">take</code>.\n\tДавайте для примера получим пять записей,\n\tначиная с четвертой:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;skip(3)\n\t\t-&gt;take(5)\n\t\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите <code class=\"number inline\">10</code> юзеров, начиная с пятого.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите <code class=\"number inline\">10</code> юзеров с возрастом <code class=\"number inline\">30</code>,\n\t\tначиная с третьего.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/data-inserting/","content":"\n\t\t\t\t<h1>Вставка данных через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля вставки данных используется метод <code class=\"code inline\">insert</code>.\n\tОн принимает параметром массив\n\tимен столбцов и значений:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;insert([\n\t\t'title' =&gt; 'page',\n\t\t'slug'  =&gt; 'slug',\n\t]);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВставьте нового юзера в таблицу\n\t\tс юзерами.\n\t</p>\n</div>\n\n<h2>Получение id</h2>\n<p>\n\tМожно получить <code class=\"string inline\">id</code> вставленной записи,\n\tиспользовов для вставки метод <code class=\"code inline\">insertGetId</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$id = DB::table('posts')-&gt;insertGetId([\n\t\t'title' =&gt; 'page',\n\t\t'slug'  =&gt; 'slug',\n\t]);\n\t\n\techo $id;\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВставьте нового юзера в таблицу\n\t\tс юзерами. Выведите на экран\n\t\t<code class=\"string inline\">id</code> вставленного юзера.\n\t</p>\n</div>\n\n<h2>Массовая вставка</h2>\n<p>\n\tМожно вставить в таблицу сразу несколько\n\tзаписей одним вызовом <code class=\"code inline\">insert</code>.\n\tДавайте для примера вставим несколько постов.\n\tДля этого нужно передать параметром\n\tдвухмерный массив:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;insert([\n\t\t[\n\t\t\t'title' =&gt; 'page1',\n\t\t\t'slug'  =&gt; 'slug1',\n\t\t],\n\t\t[\n\t\t\t'title' =&gt; 'page2',\n\t\t\t'slug'  =&gt; 'slug2',\n\t\t]\n\t]);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВставьте трех новых юзеров\n\t\tв таблицу с юзерами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/data-updating/","content":"\n\t\t\t\t<h1>Обновление данных через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля изменения данных используется метод <code class=\"code inline\">update</code>.\n\tОн принимает параметром массив имен столбцов и значений.\n</p>\n<p>\n\tДавайте обновим запись с указанным <code class=\"string inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;where('id', 1)-&gt;update([\n\t\t'title' =&gt; 'page',\n\t\t'slug'  =&gt; 'slug',\n\t]);\n?&gt;</code>\n</div>\n<p>\n\tТеперь обновим заданную группу записей:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;where('id', '&gt;', 5)-&gt;update([\n\t\t'title' =&gt; 'page',\n\t\t'slug'  =&gt; 'slug',\n\t]);\n?&gt;</code>\n</div>\n<p>\n\tА теперь обновим вообще все записи:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;update([\n\t\t'title' =&gt; 'page',\n\t\t'slug'  =&gt; 'slug',\n\t]);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИзмените юзера с <code class=\"string inline\">id</code>, равным <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВсем юзерам с возрастом <code class=\"string inline\">30</code>\n\t\tустановите зарплату <code class=\"number inline\">500</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/increment-decrement/","content":"\n\t\t\t\t<h1>Инкремент и декремент данных через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью методов <code class=\"code inline\">increment</code> и <code class=\"code inline\">decrement</code>\n\tможно увеличивать значения числовых полей.\n\tДавайте посмотрим, как это делается.\n</p>\n<p>\n\tУвеличим значение поля на единицу:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')\n\t\t-&gt;where('id', 1)\n\t\t-&gt;increment('likes');\n?&gt;</code>\n</div>\n<p>\n\tУменьшим значение поля на единицу:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')\n\t\t-&gt;where('id', 1)\n\t\t-&gt;decrement('likes');\n?&gt;</code>\n</div>\n<p>\n\tУвеличим значение поля на заданное значение:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')\n\t\t-&gt;where('id', 1)\n\t\t-&gt;increment('likes', 5);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУвеличьте на <code class=\"number inline\">1</code> возраст\n\t\tзаданному юзеру.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУменьшите на <code class=\"number inline\">1</code> возраст\n\t\tзаданному юзеру.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВсем юзерам с возрастом <code class=\"string inline\">30</code>\n\t\tувеличьте зарплату на <code class=\"number inline\">100</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/data-removing/","content":"\n\t\t\t\t<h1>Удаление данных через QB в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля изменения данных используется метод <code class=\"code inline\">delete</code>.\n\tДавайте удалим запись с указанным <code class=\"string inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')\n\t\t-&gt;where('id', 1)\n\t\t-&gt;delete();\n?&gt;</code>\n</div>\n<p>\n\tТеперь удалим заданную группу записей:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')\n\t\t-&gt;where('id', '&gt;', 5)\n\t\t-&gt;delete();\n?&gt;</code>\n</div>\n<p>\n\tА теперь удалим вообще все записи:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tDB::table('posts')-&gt;delete();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите юзера с <code class=\"string inline\">id</code>, равным <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите юзеров с возрастом <code class=\"string inline\">30</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите всех юзеров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/builder/tables-joining/","content":"\n\t\t\t\t<h1>Соединение таблиц в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью метода <code class=\"code inline\">leftJoin</code> можно выполнять\n\tсоединение таблиц. Давайте посмотрим на примерах.\n\tПусть у нас кроме таблицы с постами есть\n\tеще и таблица с категориями, которым принадлежат\n\tпосты.\n</p>\n<p>\n\tДавайте напишем запрос, который получит\n\tпосты вместе с их категориями:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = DB::table('posts')\n\t\t-&gt;leftJoin('categories', 'category.id', '=', 'posts.category_id')\n\t-&gt;get();\n\t\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте таблицу <code class=\"code inline\">users</code>\n\t\tи таблицу <code class=\"code inline\">cities</code> с городами,\n\t\tв которых живут юзеры.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью построителя запросов получите\n\t\tсписок всех юзеров вместе с их городами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/intro/","content":"\n\t\t\t\t<h1>Введение в Eloquent Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри работе с базами данных в фреймворках\n\tчасто используют подход, в котором\n\tкаждой таблице в базе данных соответствует\n\tсвой PHP класс (<dfn>модель</dfn>). При этом каждая\n\tзапись в таблице будет представлять собой\n\tобъект этого класса.\n</p>\n<p>\n\tВ результате получится, что мы будем\n\tобращаться к базе, вызывая методы\n\tсоответствующего объекта. То есть\n\tполучится некая ООП обертка над\n\tбазой данных.\n</p>\n<p>\n\tТакая обертка называется ORM -\n\tсистема объектно-реляционного отображения.\n\tВ Laravel такая система называется Eloquent.\n</p>\n<p>\n\tКаждая таблица базы данных имеет\n\tсоответствующий класс-модель, который используется\n\tдля работы с этой таблицей. Модели позволяют\n\tзапрашивать данные из таблиц, а также вставлять\n\tв них новые записи.\n</p>\n<p>\n\tМодели располагаются в папке <code class=\"path inline\">app</code>.\n\tИмя модели должно соответствовать\n\tимени таблицы. При этом имя таблице\n\tдается во множественном числе,\n\tа имя модели - в единственном\n\tи с большой буквы. Например,\n\tдля таблицы <code class=\"string inline\">posts</code> вам нужно\n\tсделать модель <code class=\"code inline\">Post</code>.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/models-generation/","content":"\n\t\t\t\t<h1>Генерация моделей Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\t Для создания файлов моделей используются\n\t команды artisan. Давайте для примера\n\t создадим модель <code class=\"code inline\">Post</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:model Post</code>\n</div>\n<p>\n\tВ результате будет создан следующий файл:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnamespace App;\n\t\n\tuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\tuse Illuminate\\Database\\Eloquent\\Model;\n\t\n\tclass Post extends Model\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью artisan сгенерируйте модель\n\t\tдля таблицы <code class=\"string inline\">cities</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДля таблицы <code class=\"string inline\">users</code> уже есть\n\t\tмодель по умолчанию. Нам она пока\n\t\tне нужна. Переместите этот файл\n\t\tв другое место, чтобы он нам не мешал.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью artisan сгенерируйте модель\n\t\tдля таблицы <code class=\"string inline\">users</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/controller-use-models/","content":"\n\t\t\t\t<h1>Подключение модели Eloquent к контроллеру в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПосле того, как создан файл с классом\n\tмодели, эту модель можно использовать\n\tв контроллере для получения и изменения\n\tданных.\n</p>\n<p>\n\tДля этого нужно подключить класс модели\n\tк контроллеру с помощью команды <code class=\"code inline\">use</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Models\\Post;\n\t\n\tclass PostController extends Controller\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПосле подключения модели мы можем\n\tиспользовать ее внутри методов\n\tконтроллера:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t// тут можно пользоваться моделью\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПодключите модель <code class=\"code inline\">Users</code> к\n\t\tвашему контроллеру.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/models-getting-data/","content":"\n\t\t\t\t<h1>Получение данных из моделей Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью статического метода <code class=\"code inline\">all</code>\n\tможно получить все записи\n\tиз таблицы.\n\tДавайте обратимся к модели <code class=\"code inline\">Post</code>\n\tи получим все данные из таблицы <code class=\"string inline\">posts</code>\n\tв виде массива объектов:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\tdump($posts); // массив объектов\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКаждый объект в массиве будет\n\tпринадлежать классу модели <code class=\"code inline\">Post</code>.\n\tДавайте переберем массив циклом и обратимся\n\tк каждому объекту по отдельности:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post); // объект класса Post\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКаждая объект представляет собой одну\n\tзапись в таблице. Свойствами этого объекта\n\tслужат поля таблицы:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post-&gt;title);\n\t\t\t\tdump($post-&gt;text);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте юзеров в представление\n\t\tи выведите их в виде HTML таблицы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/models-query-builder/","content":"\n\t\t\t\t<h1>Конструктор запросов в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВсе методы, доступные в конструкторе запросов,\n\tтакже доступны при работе с моделями Eloquent.\n</p>\n<p>\n\tСмотрите пример:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = Post::where('id', '&gt;', 3)-&gt;get();\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров\n\t\tс возрастом <code class=\"number inline\">30</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с зарплатой\n\t\tот <code class=\"number inline\">100</code> до <code class=\"number inline\">300</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров, начиная\n\t\tс четвертого.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров, начиная\n\t\tс четвертого, <code class=\"number inline\">5</code> штук.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех юзеров с <code class=\"string inline\">id</code>,\n\t\tравным <code class=\"number inline\">1</code>, <code class=\"number inline\">3</code>, <code class=\"number inline\">4</code>\n\t\tили <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/getting-one-record/","content":"\n\t\t\t\t<h1>Получение одной записи в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью конструктора запросов можно\n\tполучить одну запись. Для этого нужно\n\tиспользовать комбинацию методов\n\t<code class=\"code inline\">where</code> и <code class=\"code inline\">first</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = Post::where('id', 1)-&gt;first();\n\tdump($post);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с возрастом <code class=\"number inline\">30</code>.\n\t\tПередайте его в представление.\n\t\tВыведите данные этого юзера\n\t\tв отдельных тегах.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/getting-one-record-by-id/","content":"\n\t\t\t\t<h1>Получение записей по id в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью специального метода <code class=\"code inline\">find</code>\n\tможно получить запись по ее <code class=\"string inline\">id</code>.\n\tСмотрите пример:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = Post::find(1); // получаем запись с id 1\n\tdump($post);\n?&gt;</code>\n</div>\n<p>\n\tМожно получить группу записей,\n\tпередав их <code class=\"string inline\">id</code> в виде массива:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$posts = Post::find([1, 2, 3]);\n\tdump($posts);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера с <code class=\"string inline\">id</code>, равным <code class=\"number inline\">3</code>.\n\t\tПередайте его в представление.\n\t\tВыведите данные этого юзера\n\t\tв отдельных тегах.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзеров с <code class=\"string inline\">id</code>, равными <code class=\"number inline\">3</code>,\n\t\t<code class=\"number inline\">4</code> и <code class=\"number inline\">5</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/records-creating/","content":"\n\t\t\t\t<h1>Создание новой записи в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью моделей можно не только получать\n\tзаписи из базы, но и создавать новые.\n\tЭто делается в красивом ООП стиле.\n</p>\n<p>\n\tДля начала нужно создать новый экземпляр\n\tобъекта модели:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = new Post;\n?&gt;</code>\n</div>\n<p>\n\tЗатем нужно записать в его свойства\n\tнужные данные:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post-&gt;title = 'title';\n\t$post-&gt;text  = 'text text text';\n?&gt;</code>\n</div>\n<p>\n\tПосле этого можно вызвать метод\n\tsave для сохранения данных в базу:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post-&gt;save();\n?&gt;</code>\n</div>\n<p>\n\tСоберем весь наш код вместе:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = new Post;\n\t\n\t$post-&gt;title = 'title';\n\t$post-&gt;text  = 'text text text';\n\t\n\t$post-&gt;save();\n?&gt;</code>\n</div>\n<div class=\"notice\">\n\t<p>\n\t\tПри описанном сохранении поля <code class=\"string inline\">created_at</code>\n\t\tи <code class=\"string inline\">updated_at</code> будут\n\t\tустановлены автоматически.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте нового юзера в вашу\n\t\tбазу данных.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/records-changing/","content":"\n\t\t\t\t<h1>Изменение записи в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">save</code> можно использовать и для\n\tизменения существующей модели в БД. Для изменения\n\tмодели вам нужно получить ее, изменить необходимые\n\tатрибуты и вызвать метод <code class=\"code inline\">save</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = Post::find(1);\n\t$post-&gt;title = 'new title';\n\t\n\t$post-&gt;save();\n?&gt;</code>\n</div>\n<div class=\"notice\">\n\t<p>\n\t\tОтметка времени <code class=\"code inline\">updated_at</code> будет установлена\n\t\tавтоматически.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИзмените какого-нибудь юзера\n\t\tв вашей базе данных.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/records-removing/","content":"\n\t\t\t\t<h1>Удаление записей в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">delete</code> можно использовать для\n\tудаления записей:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$post = Post::find(1);\n\t$post-&gt;delete();\n?&gt;</code>\n</div>\n<p>\n\tНе обязательно получать модель в переменную,\n\tможно просто продолжить цепочку:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tPost::find(1)-&gt;delete();\n?&gt;</code>\n</div>\n<p>\n\tМожно, конечно же, удалить не одну\n\tзапись, а целую группу по условию:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$deletedRows = Post::where('id', '&gt;', 3)-&gt;delete();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите из таблицы с юзерами\n\t\tвсех юзеров с возрастом больше 30 лет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/records-removing-by-id/","content":"\n\t\t\t\t<h1>Удаление записей по id в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\t Удалять записи можно не получая их,\n\t а вызвав статический метод <code class=\"code inline\">destroy</code>,\n\t передав ему <code class=\"string inline\">id</code> удаляемой записи:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tPost::destroy(1);\n?&gt;</code>\n</div>\n<p>\n\tМожно удалить сразу несколько записей,\n\tпередав параметром массив их <code class=\"string inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tPost::destroy([1, 2, 3]);\n?&gt;</code>\n</div>\n<p>\n\tМожно не передавать массив,\n\tа просто указать удаляемые\n\t<code class=\"string inline\">id</code> через запятую:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tPost::destroy(1, 2, 3);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите юзера с <code class=\"string inline\">id</code>, равным <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите юзеров с <code class=\"string inline\">id</code>,\n\t\tравными <code class=\"number inline\">4</code>, <code class=\"number inline\">5</code>, <code class=\"number inline\">6</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/soft-removing/","content":"\n\t\t\t\t<h1>Мягкое удаление в моделях Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКроме обычного удаления Eloquent также может\n\tмягко удалять записи. Мягкое удаление означает,\n\tчто запись на самом деле остаётся в базе данных,\n\tно в таблице для записи устанавливается поле <code class=\"string inline\">deleted_at</code>.\n</p>\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/eloquent.md#программное-удаление\">программное-удаление</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте мягкое удаление юзеров.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте восстановление удаленных юзеров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/intro/","content":"\n\t\t\t\t<h1>Связывание моделей Eloquent в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы с вами разберем связывание моделей\n\tEloquent. Суть связывания в следующем: если\n\tу нас есть несколько таблиц, связанных друг\n\tс другом, то при запросе к одной из таблиц,\n\tLaravel будет вытягивать соответствующие\n\tданные из другой.\n</p>\n<p>\n\tИспользуя возможности фреймворка, получение\n\tсвязанных данных становится очень простым\n\tи удобным. Без сомнения, связывание моделей\n\tво фреймворках - одно из самых больших преимуществ,\n\tпозволяющих упростить разработку.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/one-to-one/","content":"\n\t\t\t\t<h1>Связь один к одному в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСвязь один к одному - это когда одна\n\tзапись одной таблицы соответствует\n\tодной записи другой таблицы.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть у нас есть следующая\n\tтаблица с постами:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>posts</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">title</span></li></ul></div></div>\n<p>\n\tКаждый пост имеет одну картинку-миниатюру.\n\tПри этом картинки хранятся в отдельной\n\tтаблице:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>thumbnails</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">path</span></li><li><span class=\"name\">alt</span></li><li><span class=\"name\">post_id</span></li></ul></div></div>\n<p>\n\tТаблица с миниатюрами связана с таблицей\n\tс постами через поле <code class=\"string inline\">post_id</code>.\n\tТак как одному посту соответствует одна\n\tминиатюра, то у нас получается связь\n\t<dfn>один к одному</dfn>.\n\tМы можем прописать эту связь в моделях\n\tнаших таблиц. Тогда при получении поста\n\tвместе с ним автоматически будет получаться\n\tи миниатюра.\n</p>\n<p>\n\tДавайте сделаем это.\n\tСоздадим модель для миниатюр:\n</p>\n<div class=\"block\" data-file=\"app/Models/Thumbnail.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Thumbnail extends Model\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tСоздадим модель для постов:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Post extends Model\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЗаюзаем в модели для постов\n\tмодель для миниатюр:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Models\\Thumbnail;\n\t\n\tclass Post extends Model\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ модели для постов создадим метод\n\t<code class=\"code inline\">thumbnail</code>:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Post extends Model\n\t{\n\t\tpublic function thumbnail()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ этом методе свяжем наши модели\n\tчерез метод <code class=\"code inline\">hasOne</code>:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Post extends Model\n\t{\n\t\tpublic function thumbnail()\n\t\t{\n\t\t\treturn $this-&gt;hasOne(Thumbnail::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте следующие таблицы:\n\t</p>\n\t<div class=\"block\"><div class=\"tastr\"><h4>users</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">login</span></li><li><span class=\"name\">password</span></li></ul></div></div>\n\t<div class=\"block\"><div class=\"tastr\"><h4>profiles</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li><li><span class=\"name\">surname</span></li><li><span class=\"name\">email</span></li><li><span class=\"name\">user_id</span></li></ul></div></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите эти таблицы отношением <code class=\"code inline\">hasOne</code>.\n\t</p>\n</div>\n\n<h2>Соглашения</h2>\n<div class=\"notice\">\n\t<p>\n\t\tВсе связи в Laravel работают через\n\t\tсоглашение: имена таблиц всегда даются\n\t\tво множественном числе, а поля связи\n\t\t- в единственном.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/getting-data-one-to-one/","content":"\n\t\t\t\t<h1>Получение данных связь один к одному в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке мы связали\n\tпосты и их миниатюры отношением <code class=\"code inline\">hasOne</code>.\n\tДавайте теперь в контроллере получим\n\tкакой-нибудь пост:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$post = Post::find(1);\n\t\t\tdump($post);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЭтот пост, как вы уже знаете, будет\n\tпредставлять собой объект, в котором\n\tсвойствами будут поля таблицы.\n\tВвыведем, к примеру, содержимое\n\tполя <code class=\"string inline\">title</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$post = Post::find(1);\n\t\t\tdump($post-&gt;title);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ объекте с постом также появится\n\tсвойство <code class=\"code inline\">thumbnail</code>. Имя этого\n\tсвойства соответствует методу,\n\tкоторый мы сделали в модели с постами\n\tдля связывания моделей.\n\tЭто свойство будет содержать\n\tобъект с миниатюрой:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$post = Post::find(1);\n\t\t\tdump($post-&gt;thumbnail); // объект с миниатюрой\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем какое-нибудь поле\n\tнашей миниатюры:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$post = Post::find(1);\n\t\t\tdump($post-&gt;thumbnail-&gt;path);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите какого-нибудь юзера вместе\n\t\tс его профилем.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтправьте полученного юзера\n\t\tв представление и выведите\n\t\tего данные в разных тегах.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/one-to-one-loop/","content":"\n\t\t\t\t<h1>Перебор записей со связью один к одному в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь получим не один пост,\n\tа несколько, и перебем их циклом:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post-&gt;title);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПри переборе для каждого поста\n\tтакже будет доступно свойство\n\t<code class=\"code inline\">thumbnail</code>, содержащее\n\tминиатюру:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post-&gt;thumbnail);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте выведем какие-нибудь\n\tданные нашей миниатюры:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post-&gt;thumbnail-&gt;path);\n\t\t\t\tdump($post-&gt;thumbnail-&gt;alt);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите всех пользователей вместе с их\n\t\tпрофилями, передайте их в представление и\n\t\tвыведите на экран в виде HTML таблицы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/inverse-one-to-one/","content":"\n\t\t\t\t<h1>Обратная связь один к одному в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущих уроках у нас была связь\n\tодин к одному между постом и миниатюрой.\n\tТакая связь может трактоваться двояко:\n\tкаждый пост <dfn>имеет</dfn> свою миниатюру или\n\tкаждая миниатюра <dfn>принадлежит</dfn> посту.\n</p>\n<p>\n\tРазница между <i>имеет</i> и <i>принадлежит</i>\n\tпроявляется в том, в какой таблице находится поле\n\tсвязи. В нашем случае поле связи - <code class=\"string inline\">post_id</code>,\n\tи находится оно таблице с миниатюрами.\n</p>\n<p>\n\tЭто значит, что пост <i>имеет</i> миниатюру.\n\tНо и миниатюра в свою очередь <i>принадлежит</i>\n\tпосту. На практике это означает, что\n\tможно получить миниатюру вместе с ее\n\tпостом.\n\tДля этого нужно связать модель миниатюр\n\tс моделью постов через отношение <code class=\"code inline\">belongsTo</code>.\n\tДавайте сделаем это:\n</p>\n<div class=\"block\" data-file=\"app/Models/Thumbnail.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Thumbnail extends Model\n\t{\n\t\tpublic function post()\n\t\t{\n\t\t\treturn $this-&gt;belongsTo(Post::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПосле этого при получении миниатюры\n\tможно будет получить ее пост:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/ThumbnailController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass ThumbnailController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$thumbnail = Thumbnail::find(1);\n\t\t\tdump($thumbnail);\n\t\t\tdump($thumbnail-&gt;post);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте получим какое-нибудь\n\tполе связанного поста:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/ThumbnailController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass ThumbnailController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$thumbnail = Thumbnail::find(1);\n\t\t\tdump($thumbnail-&gt;post-&gt;title);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите таблицы с юзерами и профилями\n\t\tотношением <code class=\"code inline\">belongsTo</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите профиль вместе с его\n\t\tюзером.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все профили вместе с их\n\t\tюзерами. Выведите их в представлении\n\t\tв виде HTML таблицы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/one-to-many/","content":"\n\t\t\t\t<h1>Связь один ко многим в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь изучим связь <dfn>один ко многим</dfn>.\n\tТакая связь образуется, когда запись одной\n\tтаблицы соответствует многим записям\n\tиз другой таблицы.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть у нас есть следующая таблица\n\tс категориями:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>category</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n<p>\n\tПусть также у нас есть следующая\n\tтаблица с постами:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>posts</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">title</span></li><li><span class=\"name\">category_id</span></li></ul></div></div>\n<p>\n\tЗаюзаем в модели с категориями\n\tмодель с постами:\n</p>\n<div class=\"block\" data-file=\"app/Models/Category.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Models\\Post;\n\t\n\tclass Category extends Model\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tКаждая категория имеет много постов,\n\tкоторые ссылаются на нее. Давайте в модели\n\tс категориями сделаем метод для получения\n\tпостов:\n</p>\n<div class=\"block\" data-file=\"app/Models/Category.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Models\\Post;\n\t\n\tclass Category extends Model\n\t{\n\t\tpublic function posts()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПропишем в этом методе связь\n\tчерез отношение <code class=\"code inline\">hasMany</code>:\n</p>\n<div class=\"block\" data-file=\"app/Models/Category.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Category extends Model\n\t{\n\t\tpublic function posts()\n\t\t{\n\t\t\treturn $this-&gt;hasMany(Post::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте следующие таблицы:\n\t</p>\n\t<div class=\"block\"><div class=\"tastr\"><h4>cities</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li><li><span class=\"name\">country_id</span></li></ul></div></div>\n\t<div class=\"block\"><div class=\"tastr\"><h4>countries</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите таблицу <code class=\"string inline\">countries</code> с\n\t\tтаблицей <code class=\"string inline\">cities</code> отношением\n\t\t<code class=\"code inline\">hasMany</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/getting-data-one-to-many/","content":"\n\t\t\t\t<h1>Получение данных связь один ко многим в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущем уроке мы связали\n\tкатегории и их посты отношением <code class=\"code inline\">hasMany</code>.\n\tДавайте теперь в контроллере получим\n\tкакую-нибудь категорию:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::find(1);\n\t\t\tdump($category);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВместе с категорией мы автоматически\n\tполучим коллекцию постов:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::find(1);\n\t\t\tdump($category-&gt;posts); // коллекция постов\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте переберем коллекцию\n\tс постами через цикл:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::find(1);\n\t\t\t\n\t\t\tforeach ($category-&gt;posts as $post) {\n\t\t\t\tdump($post-&gt;title);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь получим коллекцию категорий.\n\tПереберем ее циклом, для каждой категории\n\tполучим коллекцию постов и также переберем\n\tее циклом:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$categories = Category::all();\n\t\t\t\n\t\t\tforeach ($categories as $category) {\n\t\t\t\tdump($category-&gt;name);\n\t\t\t\t\n\t\t\t\tforeach ($category-&gt;posts as $post) {\n\t\t\t\t\tdump($post-&gt;title);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДля таблиц, созданных в предыдущем уроке\n\t\tполучите все страны вместе с их городами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте полученные данные в представление\n\t\tи выведите их в виде следующей верстки:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;h2&gt;country1&lt;/h2&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;city11&lt;/li&gt;\n\t\t&lt;li&gt;city12&lt;/li&gt;\n\t\t&lt;li&gt;city13&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;h2&gt;country2&lt;/h2&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;city21&lt;/li&gt;\n\t\t&lt;li&gt;city22&lt;/li&gt;\n\t\t&lt;li&gt;city23&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;h2&gt;country3&lt;/h2&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;city31&lt;/li&gt;\n\t\t&lt;li&gt;city32&lt;/li&gt;\n\t\t&lt;li&gt;city33&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/div&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/conditions-one-to-many/","content":"\n\t\t\t\t<h1>Условия в связи один ко многим в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно добавлять дополнительные условия\n\tпри получении связанных данных.\n\tДавайте посмотрим, как это делается.\n\tПусть у нашей таблицы с постами\n\tбудет также и поле <code class=\"string inline\">likes</code>,\n\tсодержащее количество лайков:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>posts</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">title</span></li><li><span class=\"name\">likes</span></li><li><span class=\"name\">category_id</span></li></ul></div></div>\n<p>\n\tДавайте для начала получим категорию\n\tвместе с коллекцией ее постов:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Category::find(1)-&gt;posts;\n\t\t\tdump($posts);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь заменим свойство <code class=\"code inline\">posts</code>\n\tна метод <code class=\"code inline\">posts()</code>. В этом случае\n\tметод своим результатом вернет\n\tпостроитель запросов:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$qb = Category::find(1)-&gt;posts();\n\t\t\tdump($qb);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТак как возвращается построитель запросов,\n\tто мы можем дальше продолжить цепочку,\n\tк примеру, наложив некоторое условие\n\tна получаемые посты:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Category::find(1)\n\t\t\t\t-&gt;posts()\n\t\t\t\t-&gt;where('likes', '&gt;', 10)\n\t\t\t\t-&gt;get();\n\t\t\t\n\t\t\tdump($posts);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте следующие таблицы:\n\t</p>\n\t<div class=\"block\"><div class=\"tastr\"><h4>cities</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li><li><span class=\"name\">population</span></li><li><span class=\"name\">country_id</span></li></ul></div></div>\n\t<div class=\"block\"><div class=\"tastr\"><h4>countries</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите таблицу <code class=\"string inline\">countries</code> с\n\t\tтаблицей <code class=\"string inline\">cities</code> отношением\n\t\t<code class=\"code inline\">hasMany</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все страны вместе с их городами,\n\t\tнаселение в которых больше <code class=\"number inline\">100</code> тысяч.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все страны вместе с их городами.\n\t\tГорода каждой страны отсортируйте\n\t\tпо возрастанию населения.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/inverse-one-to-many/","content":"\n\t\t\t\t<h1>Обратная связь один ко многим в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас опять есть таблица\n\tс категориями и таблица с постами.\n\tВ предыдущих уроках мы говорили,\n\tчто каждая категория имеет много\n\tпостов. Но это зависит от точки зрения.\n</p>\n<p>\n\tЕсли посмотреть со стороны поста,\n\tто каждый пост принадлежит одной\n\tкатегории. Это значит, что пост\n\tможно связать с категорией\n\tотношением <code class=\"code inline\">belongsTo</code>.\n\tДавайте сделаем это:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Post extends Model\n\t{\n\t\tpublic function category()\n\t\t{\n\t\t\treturn $this-&gt;belongsTo(Category::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПолучим теперь пост вместе с его\n\tкатегорией:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$post = Post::find(1);\n\t\t\tdump($post);\n\t\t\tdump($post-&gt;category);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПолучим все посты, переберем их циклом\n\tи выведем их вместе с их категориями:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$posts = Post::all();\n\t\t\t\n\t\t\tforeach ($posts as $post) {\n\t\t\t\tdump($post);\n\t\t\t\tdump($post-&gt;category);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите таблицу <code class=\"string inline\">cities</code> с\n\t\tтаблицей <code class=\"string inline\">countries</code> отношением\n\t\t<code class=\"code inline\">belongsTo</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите город вместе с его страной.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все города вместе с их странами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите все города с населением больше\n\t\t<code class=\"number inline\">100</code> тысяч вместе с их странами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/several-inverse-one-to-many/","content":"\n\t\t\t\t<h1>Несколько обратных связей один ко многим в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожет такое быть, что одна таблица\n\tимеет несколько связей. Давайте\n\tпосмотрим, как действовать в\n\tтаком случае.\n</p>\n<p>\n\tПусть у нас есть таблица с постами:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>posts</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">title</span></li></ul></div></div>\n<p>\n\tТаблица с юзерами:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>users</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n<p>\n\tИ пусть у нас есть таблица с комментами,\n\tв который каждый коммент связан со своим\n\tпостом и со своим юзером:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>comments</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">text</span></li><li><span class=\"name\">post_id</span></li><li><span class=\"name\">user_id</span></li></ul></div></div>\n<p>\n\tДавайте пропишем эту связь\n\tв модели для комментов:\n</p>\n<div class=\"block\" data-file=\"app/Models/Comment.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Comment extends Model\n\t{\n\t\tpublic function post()\n\t\t{\n\t\t\treturn $this-&gt;belongsTo(Post::class);\n\t\t}\n\t\tpublic function user()\n\t\t{\n\t\t\treturn $this-&gt;belongsTo(User::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь при получении коммента мы\n\tможем получить его пост и его юзера:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CommentController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CommentController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$comment = Comment::find(1);\n\t\t\tdump($comment);\n\t\t\tdump($comment-&gt;post);\n\t\t\tdump($comment-&gt;user);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте следующие таблицы:\n\t</p>\n\t<div class=\"block\"><div class=\"tastr\"><h4>cities</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n\t<div class=\"block\"><div class=\"tastr\"><h4>positions</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n\t<div class=\"block\"><div class=\"tastr\"><h4>users</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li><li><span class=\"name\">city_id</span></li><li><span class=\"name\">position_id</span></li></ul></div></div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте модель с юзерами,\n\t\tмодель с городами и модель\n\t\tс должностями.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите юзера с его городом\n\t\tи с его должностью отношением <code class=\"code inline\">belongsTo</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите юзера вместе с его\n\t\tгородом и должностью.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/many-to-many/","content":"\n\t\t\t\t<h1>Связь многие ко многим в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть каждый пост может принадлежать\n\tнескольким категориям. В этом случае\n\tони будут связаны через промежуточную\n\tтаблицу связи.\n</p>\n<p>\n\tДавайте посмотрим на структуру таблиц.\n\tТаблица с постами:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>posts</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">title</span></li></ul></div></div>\n<p>\n\tТаблица с категориями:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>category</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n<p>\n\tТаблица связи:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>category_post</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">post_id</span></li><li><span class=\"name\">category_id</span></li></ul></div></div>\n\n<h2>Первая связь</h2>\n<p>\n\tКаждый пост принадлежит многим\n\tкатегориям. Давайте пропишем\n\tэту связь через отношение\n\t<code class=\"code inline\">belongsToMany</code>:\n</p>\n<div class=\"block\" data-file=\"app/Models/Post.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Post extends Model\n\t{\n\t\tpublic function categories()\n\t\t{\n\t\t\treturn $this-&gt;belongsToMany(Category::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПолучим пост вместе с его категориями:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$post = Post::find(1);\n\t\t\tdump($post-&gt;categories);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Вторая связь</h2>\n<p>\n\tКаждая категория принадлежит многим\n\tпостам. Давайте пропишем эту связь\n\tчерез отношение <code class=\"code inline\">belongsToMany</code>:\n</p>\n<div class=\"block\" data-file=\"app/Models/Category.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Category extends Model\n\t{\n\t\tpublic function posts()\n\t\t{\n\t\t\treturn $this-&gt;belongsToMany(Post::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПолучим категорию вместе с ее постами:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::find(1);\n\t\t\tdump($category-&gt;posts);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<p>\n\tПусть у нас есть юзеры\n\tи их роли. Каждый юзер\n\tможет иметь много ролей.\n\tДаны соответствующие таблицы:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>users</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n<div class=\"block\"><div class=\"tastr\"><h4>roles</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">name</span></li></ul></div></div>\n<div class=\"task\">\n\t<p>\n\t\tСоздайте для указанных таблиц\n\t\tтаблицу связи.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите юзеров с ролями отношением\n\t\t<code class=\"code inline\">belongsToMany</code>. Получите всех\n\t\tюзеров вместе с их ролями.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСвяжите роли с юзерами отношением\n\t\t<code class=\"code inline\">belongsToMany</code>. Получите всех\n\t\tроли вместе с их юзерами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/eager-loading/","content":"\n\t\t\t\t<h1>Ленивая и жадная загрузка в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСвязанные модели в Laravel загружаются\n\t<dfn>отложено</dfn>. Это значит, что SQL запрос\n\tвыполняется в момент обращения к объекту\n\tмодели.\n\tЭто на самом деле плохо, так как выполняется\n\tбольшое количество запросов к базе.\n\tДавайте посмотрим на примере.\n</p>\n<p>\n\tПусть у нас таблица с категориями связана\n\tс таблицей с постами отношением <code class=\"code inline\">hasMany</code>.\n\tДавайте для нашей категории переберем циклом\n\tколлекцию ее постов. В результате SQL запрос\n\tбудет отправляться каждую итерацию\n\tцикла:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::find(1);\n\t\t\t\n\t\t\tforeach ($category-&gt;posts as $post) {\n\t\t\t\tdump($post); // тут каждый раз шлется запрос\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДля решения проблемы мы можем использовать\n\t<dfn>жадную</dfn> (нетерпеливую) загрузку. С помощью\n\tметода <code class=\"code inline\">with</code> мы можем заранее подгрузить\n\tданные связанной модели. Давайте\n\tсделаем это:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::with(['post'])-&gt;first();\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь при переборе циклом лишних\n\tзапросов не будет:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::with(['post'])-&gt;first();\n\t\t\t\n\t\t\tforeach ($category-&gt;posts as $post) {\n\t\t\t\tdump($post);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыберите несколько задач из предыдущих\n\t\tуроков и переделайте их код на жадную\n\t\tзагрузку.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/eager-loading-many/","content":"\n\t\t\t\t<h1>Жадная загрузка множественных отношений в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть таблица с комментами,\n\tв который каждый коммент связан со своим\n\tпостом и со своим юзером:\n</p>\n<div class=\"block\"><div class=\"tastr\"><h4>comments</h4><ul><li><span class=\"name\">id</span></li><li><span class=\"name\">text</span></li><li><span class=\"name\">post_id</span></li><li><span class=\"name\">user_id</span></li></ul></div></div>\n<p>\n\tПропишем эту связь:\n</p>\n<div class=\"block\" data-file=\"app/Models/Comment.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Comment extends Model\n\t{\n\t\tpublic function post()\n\t\t{\n\t\t\treturn $this-&gt;belongsTo(Post::class);\n\t\t}\n\t\t\n\t\tpublic function user()\n\t\t{\n\t\t\treturn $this-&gt;belongsTo(User::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте получим все комменты:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CommentController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CommentController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$comments = Comment::all();\n\t\t\tdump($comments);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПереберем комменты циклом и в цикле\n\tдля каждого коммента будем получать\n\tего пост и его юзера:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CommentController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CommentController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$comments = Comment::all();\n\t\t\t\n\t\t\tforeach ($comments as $comment) {\n\t\t\t\tdump($comment);\n\t\t\t\tdump($comment-&gt;post);\n\t\t\t\tdump($comment-&gt;user);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ этом случае в каждой итерации цикла\n\tбудут выполнятся лишние SQL запросы.\n\tДавайте исправим проблему, заранее\n\tзагрузив данные двух связанных моделей:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CommentController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CommentController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$comments = Comment::with(['post', 'user'])-&gt;get();\n\t\t\t\n\t\t\tforeach ($comments as $comment) {\n\t\t\t\tdump($comment);\n\t\t\t\tdump($comment-&gt;post);\n\t\t\t\tdump($comment-&gt;user);\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте аналогичную задачу со своими\n\t\tтаблицами и реализуйте ее.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/default-eager-loading/","content":"\n\t\t\t\t<h1>Жадная загрузка по умолчанию в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда требуется постоянная загрузка некоторых отношений\n\tпри извлечении модели. Для этого нужно определить\n\tсвойство <code class=\"code inline\">$with</code> в модели.\n</p>\n<p>\n\tДля примера давайте сделаем так,\n\tчтобы категории всегда загружались\n\tвместе со своими постами:\n</p>\n<div class=\"block\" data-file=\"app/Models/Category.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Category extends Model\n\t{\n\t\tprotected $with = ['post'];\n\t\t\n\t\tpublic function posts()\n\t\t{\n\t\t\treturn $this-&gt;hasMany(Post::class);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь при переборе постов\n\tлишнего запроса не будет:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/CategoryController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass CategoryController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\t$category = Category::find(1);\n\t\t\t\n\t\t\tforeach ($category-&gt;posts as $post) {\n\t\t\t\tdump($post); // лишнего запроса не будет\n\t\t\t}\n\t\t}\n\t}\n?&gt;</code>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/database/eloquent/relationships/docs/","content":"\n\t\t\t\t<h1>Документация про связи моделей в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ предыдущих уроках я рассказал вам\n\tосновные виды связей моделей\n\tи операций с этими связями.\n\tЯ намеренно опускал часть теории,\n\tчтобы не перегружать вас лишней\n\tинформацией.\n\tПодробное описание работы связывания\n\tвы найдете в\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/eloquent-relationships.md\">документации</a>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tИзучите документацию по приведенной\n\t\tссылке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, что делают методы <code class=\"code inline\">has</code>\n\t\tи <code class=\"code inline\">doesntHave</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, как сохранять и изменять\n\t\tсвязанные модели.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/object-request/","content":"\n\t\t\t\t<h1>Объект Request в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном разделе мы научимся работать\n\tс формами. Для получения данных\n\tформы в Laravel используется специальный\n\tобъект запроса <code class=\"code inline\">Request</code>. Этот объект передается\n\tв контроллер с помощью <dfn>инъекции зависимости</dfn>.\n\tДавайте посмотрим, как это делается.\n</p>\n<p>\n\tПусть у нас есть контроллер:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДля начала подключим к нашему контроллеру\n\tкласс <code class=\"code inline\">Request</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Http\\Request; // подключим класс Request\n\t\n\tclass PostController extends Controller\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь укажем объект запроса параметром\n\tдействия, используя <a href=\"/ru/php/book/oop/types-control/\">контроль типов</a>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Http\\Request;\n\t\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show(Request $request) // передаем в действие\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tLaravel обнаружит, что мы хотим <dfn>внедрить</dfn>\n\tобъект запроса в действие и автоматически\n\tпередаст его в нужный параметр.\n</p>\n<p>\n\tВ результате в действии у нас будет доступна\n\tпеременная <code class=\"code inline\">$request</code>, содержащая нужный\n\tнам объект запроса. Работать с ним мы и будем\n\tучится в следующих уроках.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tВнедрите объект запроса в действие\n\t\tвашего контроллера.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/submitting-method-get/","content":"\n\t\t\t\t<h1>Отправка форм методом GET в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся отправлять\n\tформы методом GET и получать их данные\n\tв контроллере. Сделаем для этого два\n\tметода контроллера. Первый метод будет\n\tпоказывать форму, а второй метод будет\n\tобрабатывать данные этой формы после\n\tее отправки.\n</p>\n<p>\n\tДля начала сделаем два роута.\n\tПервый роут для показа формы:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/form', [PostController::class, 'form']);\n?&gt;</code>\n</div>\n<p>\n\tВторой роут для обработки данных\n\tотправленной формы:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/result', [PostController::class, 'result']);\n?&gt;</code>\n</div>\n<p>\n\tТеперь в представлении сделаем нашу\n\tформу. В атрибуте <code class=\"code inline\">action</code> не забудем\n\tуказать URL роута, который отвечает\n\tза обработку формы:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/form.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;form action=\"/result\"&gt;\n\t&lt;input name=\"title\"&gt;\n\t&lt;input name=\"slug\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tДавайте теперь сделаем действия\n\tв контроллере:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function result()\n\t\t{\n\t\t\t\n\t\t}\n\t\t\n\t\tpublic function form()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДействие <code class=\"code inline\">form</code> будет показывать форму:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function form()\n\t{\n\t\treturn view('post.form');\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА действие <code class=\"code inline\">result</code> будет обрабатывать\n\tданные отправленной формы. Для этого мы должны\n\tвнедрить в него объект запроса:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function result(Request $request)\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДанные формы можно получить с помощью метода\n\t<code class=\"code inline\">input</code> объекта запроса. Параметром этот\n\tметод принимает имя инпута. Давайте получим\n\tи выведем отправленные данные:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function result(Request $request)\n\t{\n\t\tdump($request-&gt;input('title'));\n\t\tdump($request-&gt;input('slug'));\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь передадим данные нашей формы в представление:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tpublic function result(Request $request)\n\t{\n\t\t$title = $request-&gt;input('title');\n\t\t$slug  = $request-&gt;input('slug');\n\t\t\n\t\treturn view('post.result', [\n\t\t\t'title' =&gt; $title, 'slug' =&gt; $slug\n\t\t]);\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ представлении метода <code class=\"code inline\">result</code> выведем\n\tпереданные переменные:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/result.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;h1&gt;{{ $title }}&lt;/h1&gt;\n&lt;p&gt;{{ $slug }}&lt;/p&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму с тремя инпутами,\n\t\tв которые будут вводиться числа.\n\t\tПосле отправки формы найдите сумму\n\t\tвведенных чисел и передайте ее\n\t\tв представление.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/submitting-method-post/","content":"\n\t\t\t\t<h1>Отправка форм методом POST в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь научимся отправлять формы\n\tметодом POST. Внесем необходимые изменения.\n\tДля начала в роуте, отвечающем за обработку\n\tформы, поменяем метод <code class=\"code inline\">get</code> на метод <code class=\"code inline\">post</code>:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::post('/result', [PostController::class, 'result']);\n?&gt;</code>\n</div>\n<p>\n\tТеперь в форме добавим атрибут\n\t<code class=\"code inline\">method</code> со значением <code class=\"code inline\">POST</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/form.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;form action=\"/result\" method=\"POST\"&gt;\n\t&lt;input name=\"title\"&gt;\n\t&lt;input name=\"slug\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tДалее по правилам Laravel нам необходимо\n\tдобавить защиту от \n\t<a href=\"https://ru.wikipedia.org/wiki/Межсайтовая_подделка_запроса\">CSRF</a>\n\tатаки. Технически мы должны в нашу форму\n\tдобавить специальный скрытый инпут,\n\tсодержащий секретную строку (токен).\n</p>\n<p>\n\tНа практике нам просто нужно вставить\n\tспециальную команду Blade:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/form.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;form action=\"/result\" method=\"POST\"&gt;\n\t@csrf\n\t&lt;input name=\"title\"&gt;\n\t&lt;input name=\"slug\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tЭто все изменения. Наш контроллер\n\tостанется неизменным:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function result(Request $request)\n\t\t{\n\t\t\t$title = $request-&gt;input('title');\n\t\t\t$slug  = $request-&gt;input('slug');\n\t\t\t\n\t\t\treturn view('post.result', [\n\t\t\t\t'title' =&gt; $title, 'slug' =&gt; $slug\n\t\t\t]);\n\t\t}\n\t\t\n\t\tpublic function form()\n\t\t{\n\t\t\treturn view('post.form');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму, которая будет спрашивать\n\t\tимя, возраст и зарплату юзера. Отправьте\n\t\tэту форму методом POST.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/handling-one-action/","content":"\n\t\t\t\t<h1>Форма и ее обработка в одном действии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь сделаем одно действие\n\tи для показа формы, и для ее последующей обработки.\n\tДля этого в маршрутах мы должны разрешить\n\tобращение к методу контроллера и методом\n\tGET, и методом POST:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::post('/form', [PostController::class, 'form']);\n\tRoute::get('/form', [PostController::class, 'form']);\n?&gt;</code>\n</div>\n<p>\n\tВ приведенном выше коде у нас все дублируется,\n\tкроме имени метода. В этом случае эти два\n\tроута можно объединить в один следующим\n\tобразом:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::match(['get', 'post'], '/form', [PostController::class, 'form']);\n?&gt;</code>\n</div>\n<p>\n\tВ самой форме мы должны исправить значение\n\tатрибута <code class=\"code inline\">action</code>, чтобы форма отправлялась\n\tна текущую страницу:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/form.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;form action=\"\" method=\"POST\"&gt;\n\t@csrf\n\t&lt;input name=\"title\"&gt;\n\t&lt;input name=\"slug\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tДавайте теперь реализуем наше действие.\n\tЕго код будет выполнятся два раза.\n\tПри первом заходе мы просто должны показать\n\tформу, а после ее отправки - обработать\n\tее данные.\n\tРазрулим оба варианта с помощью условия.\n\tВ этом нам поможет метод <code class=\"code inline\">has</code>,\n\tпроверяющий наличие данных инпута\n\tв объекте запроса. Реализуем:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function form(Request $request)\n\t\t{\n\t\t\tif ($request-&gt;has('title') and $request-&gt;has('slug')) {\n\t\t\t\tdump($request-&gt;input('title'));\n\t\t\t\tdump($request-&gt;input('slug'));\n\t\t\t}\n\t\t\t\n\t\t\treturn view('post.form');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите у пользователя\n\t\tего город и страну. После отправки формы\n\t\tвыведите эти данные над формой в отдельном\n\t\tабзаце.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/data-array/","content":"\n\t\t\t\t<h1>Данные формы в виде массива в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно получить получить все данные формы в виде\n\tмассива с помощью метода <code class=\"code inline\">all</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$data = $request-&gt;all();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в вашей форме есть произвольное количество\n\t\tинпутов. После отправки формы получите массив\n\t\tотправленных значений, отправьте его в представление\n\t\tи выведите эти данные в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/getting-part-data/","content":"\n\t\t\t\t<h1>Получение части данных формы в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">only</code> позволяет получить массив,\n\tсостоящий из значений перечисленных полей\n\tформы. Имена полей можно передавать в виде\n\tмассива или перечислять через запятую.\n</p>\n<p>\n\tПусть, к примеру, была отправлена форма с\n\tполями <code class=\"string inline\">'title'</code>, <code class=\"string inline\">'slug'</code>, <code class=\"string inline\">'text'</code>,\n\t<code class=\"string inline\">'desc'</code>. Давайте получим массив, состоящий\n\tиз значений заданных полей:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$data = $request-&gt;only(['title', 'text']);\n?&gt;</code>\n</div>\n<p>\n\tИмена полей можно передавать в виде массива\n\tлибо перечислять через запятую, вот так:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$data = $request-&gt;only('title', 'text');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите у пользователя его имя,\n\t\tфамилию, email, логин, пароль. Получите массив,\n\t\tсодержащий имя и логин пользователя.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/excluding-part-data/","content":"\n\t\t\t\t<h1>Исключение части данных формы в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tС помощью метода <code class=\"code inline\">except</code> можно исключить часть\n\tданных из запроса. Давайте, например, исключим\n\tполя <code class=\"string inline\">'text'</code> и <code class=\"string inline\">'desc'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$data = $request-&gt;except(['text', 'desc']);\n?&gt;</code>\n</div>\n<p>\n\tМетод <code class=\"code inline\">except</code> также позволяет перечислять\n\tимена полей через запятую:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$data = $request-&gt;except('text', 'desc');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью формы спросите у пользователя его имя,\n\t\tфамилию, email, логин, пароль. После отправки формы\n\t\tвыведите на экран в виде списка <code class=\"code inline\">ul</code> все отправленные\n\t\tполя, кроме поля с паролем и email.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/complex-fileds-names/","content":"\n\t\t\t\t<h1>Сложные имена полей в формах в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда имена элементов форм могут представлять\n\tмассивы, наподобие такого:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;form action=\"\"&gt;\n\t&lt;input type=\"text\" name=\"user[name]\"&gt;\n\t&lt;input type=\"text\" name=\"user[surname]\"&gt;\n\t&lt;input type=\"submit\"&gt;\n&lt;/form&gt;</code>\n</div>\n<p>\n\tДля получения значений таких инпутов вы можете\n\tиспользовать точечную запись для обращения\n\tк массивам:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$name = $request-&gt;input('user.name');\n\t$name = $request-&gt;input('user.surname');\n?&gt;</code>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/dependency-injection-route-parameters/","content":"\n\t\t\t\t<h1>Внедрение зависимости и параметры маршрута в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tБывают ситуации, когда в контроллер должны\n\tпередаться параметры маршрута и при этом\n\tмы хотим внедрить зависимость. Давайте\n\tпосмотрим, как действовать в этом\n\tслучае.\n</p>\n<p>\n\tПусть у нас есть роут с параметром:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::post('/post/{id}', [PostController::class, 'test']);\n?&gt;</code>\n</div>\n<p>\n\tПолучим переданный параметр в\n\tдействии контроллера:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function test($id)\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tПусть нам в этом действии также понадобился\n\tобъект запроса. В этом случае внедрение зависимости\n\tнужно провести до параметров:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function test(Request $request, $id)\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте маршрут, в котором параметрами\n\t\tпередаются <code class=\"string inline\">id</code> и логин юзера.\n\t\tОтравьте форму на этот маршрут.\n\t\tПолучите и данные формы, и параметры\n\t\tмаршрута.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/forms/object-request-methods/","content":"\n\t\t\t\t<h1>Методы объекта Request в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы рассмотрим полезные\n\tметоды объекта запроса Request.\n</p>\n\n<h2>Тип запроса</h2>\n<p>\n\tМетод <code class=\"code inline\">method</code> позволяет получить\n\tтип запроса:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $request-&gt;method(); // выведет post или get\n?&gt;</code>\n</div>\n\n<h2>Проверка типа запроса</h2>\n<p>\n\tМетод <code class=\"code inline\">isMethod</code> позволяет проверить\n\tтип запроса. К примеру, можно выполнить\n\tкакой-то код только для метода POST:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($request-&gt;isMethod('post')) {\n  \t\t\t\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЛибо можно выполнить какой-то код\n\tтолько для метода GET:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($request-&gt;isMethod('get')) {\n  \t\t\t\t\t\n\t}\n?&gt;</code>\n</div>\n\n<h2>URI</h2>\n<p>\n\tМетод <code class=\"code inline\">path</code> позволяет\n\tполучить URI (запрошенный путь без имени домена)\n\tзапроса:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $request-&gt;path();\n?&gt;</code>\n</div>\n\n<h2>URL</h2>\n<p>\n\tМетод <code class=\"code inline\">url</code> позволяет получить URL запроса\n\tбез строки GET параметров:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $request-&gt;url();\n?&gt;</code>\n</div>\n<p>\n\tА метод <code class=\"code inline\">fullUrl</code> позволяет получить URL запроса\n\tсо строкой GET параметров:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\techo $request-&gt;fullUrl();\n?&gt;</code>\n</div>\n\n<h2>Маска</h2>\n<p>\n\tМетод <code class=\"code inline\">is</code> позволяет проверить соответствие пути\n\tзапроса заданной маске. При использовании этого метода\n\tможно использовать символ <code class=\"code inline\">*</code> в качестве маски:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($request-&gt;is('admin/*')) {\n  \t\t\t\t\t\n\t}\n?&gt;</code>\n</div>\n\n<h2>Практические задачи</h2>\n<p>\n\tСделайте так, чтобы у вас было действие,\n\tкоторое будет срабатывать по следующему адресу:\n\t<code class=\"path inline\">/test/method/</code>. Перейдите по указанному\n\tадресу, но с GET параметром, например, так:\n\t<code class=\"path inline\">/test/method?param=1</code>. Решите все задачи\n\tниже для данного адреса с GET параметром.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДля указанного адреса выведите результат\n\t\tметода <code class=\"code inline\">path</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДля указанного адреса выведите результат\n\t\tметода <code class=\"code inline\">url</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДля указанного адреса выведите результат\n\t\tметода <code class=\"code inline\">fullUrl</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСамостоятельно попробуйте поработать\n\t\tс методом <code class=\"code inline\">is</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/pagination/","content":"\n\t\t\t\t<h1>Пагинация в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/pagination.md\">документация по пагинации</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте самостоятельно задачи на изученную\n\t\tтему и решите их. В ответ присылайте условие\n\t\tзадачи и ваше решение. В задачах постарайтесь\n\t\tохватить все нюансы изученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/crud/","content":"\n\t\t\t\t<h1>Практика на CRUD в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"task\">\n\t<p>\n\t\tВыведите юзеров в виде\n\t\tHTML таблицы.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tНа отдельной странице сделайте\n\t\tформу для добавления новых\n\t\tюзеров.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте для каждого юзера\n\t\tв таблице ссылку на его удаление.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте для каждого юзера\n\t\tв таблице ссылку для его редактирования.\n\t\tПусть редактирование осуществляется\n\t\tна отдельной странице.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПри выводе юзеров добавьте\n\t\tпагинацию.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/url/","content":"\n\t\t\t\t<h1>Генерация URL в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/urls.md\">документация по валидации</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте самостоятельно задачи на изученную\n\t\tтему и решите их. В ответ присылайте условие\n\t\tзадачи и ваше решение. В задачах постарайтесь\n\t\tохватить все нюансы изученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/site-layout-division/","content":"\n\t\t\t\t<h1>Компоненты в макете сайта в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак правило в макете сайта\n\tпомимо изменяющегося контента\n\tприсутствуют и другие блоки,\n\tнапример, такие:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;{{ $title }}&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;div class=\"wrapper\"&gt;\n\t\t\t&lt;header&gt;\n\t\t\t\theader\n\t\t\t&lt;/header&gt;\n\t\t\t&lt;main&gt;\n\t\t\t\t{{ $slot }}\n\t\t\t&lt;/main&gt;\n\t\t\t&lt;footer&gt;\n\t\t\t\tfooter\n\t\t\t&lt;/footer&gt;\n\t\t&lt;/div&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tLaravel позволяет выносить такие блоки\n\tв отдельные файлы. Кроме того, для каждого\n\tблока можно сделать свой контроллер.\n\tЭто позволит получать содержимое\n\tблоков из базы данных и формировать\n\tего через шаблонизатор.\n<p>\n\tТакие блоки в Laravel называются <dfn>компонентами</dfn>.\n\tИзучением работы с ними мы и займемся\n\tв следующих уроках.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте в ваш макет сайта\n\t\tблок с хедером, футером,\n\t\tа также с правым и левым\n\t\tсайдбарами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/files/","content":"\n\t\t\t\t<h1>Вынесение компонентов в файлы в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте, к примеру, вынесем блок с хедером\n\tв отдельный компонент. Для этого перенесем\n\tего код в следующий файл:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/header.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;header&gt;\n\theader\n&lt;/header&gt;</code>\n</div>\n<p>\n\tТеперь используем в макете специальную\n\tкоманду для вставки нашего компонента.\n\tЭта команда представляет собой специальный\n\tтег, имя которого начинается с <code class=\"code inline\">x-</code>,\n\tа затем идет имя файла нашего компонента.\n\tВ нашем случае эта команда будет\n\tвыглядеть так: <code class=\"code inline\">&lt;x-header /&gt;</code>.\n</p>\n<p>\n\tВоспользуемся этой командой в макете сайта:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;{{ $title }}&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;div class=\"wrapper\"&gt;\n\t\t\t&lt;x-header /&gt;\n\t\t\t&lt;main&gt;\n\t\t\t\t{{ $slot }}\n\t\t\t&lt;/main&gt;\n\t\t\t&lt;footer&gt;\n\t\t\t\tfooter\n\t\t\t&lt;/footer&gt;\n\t\t&lt;/div&gt;\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВынесите в вашем макете хедер,\n\t\tфутер, правый и левый сайдбары\n\t\tв отдельные компоненты.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/subdirs/","content":"\n\t\t\t\t<h1>Размещение компонентов в подпапках в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКомпоненты можно размещать в подпапках.\n\tПусть для примера у нас есть следующий\n\tкомпонент <code class=\"path inline\">menu</code>, размещенный в папке\n\t<code class=\"path inline\">header</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/header/menu.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div class=\"menu\"&gt;\n\tmenu\n&lt;/div&gt;</code>\n</div>\n<p>\n\tВ этом случае он будет подключаться\n\tследующим образом:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-header.menu /&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть компонент <code class=\"path inline\">info</code> расположен\n\t\tв папке <code class=\"path inline\">footer</code>. Напишите тег\n\t\tдля подключения этого компонента.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть компонент <code class=\"path inline\">nav</code> расположен\n\t\tв папке <code class=\"path inline\">main/menu</code>. Напишите тег\n\t\tдля подключения этого компонента.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/several-words-names/","content":"\n\t\t\t\t<h1>Имена компонентов из нескольких слов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИмена компонентов могут состоять\n\tиз нескольких слов. В этом\n\tслучае эти слова разделяют\n\tдефисом:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/main-menu.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div class=\"menu\"&gt;\n\tmain menu\n&lt;/div&gt;</code>\n</div>\n<p>\n\tДавайте подключим такой компонент\n\tк макету сайта:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-main-menu /&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан компонент с именем <code class=\"path inline\">info-block</code>.\n\t\tНапишите тег для подключения этого\n\t\tкомпонента.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть компонент <code class=\"path inline\">info-block</code> расположен\n\t\tв папке <code class=\"path inline\">sidebar</code>. Напишите тег\n\t\tдля подключения этого компонента.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть компонент <code class=\"path inline\">info-block</code> расположен\n\t\tв папке <code class=\"path inline\">sidebar/left</code>. Напишите тег\n\t\tдля подключения этого компонента.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/nested/","content":"\n\t\t\t\t<h1>Подключение компонентов к компонентам в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОдни компоненты могут подключать\n\tдругие компоненты. Пусть к примеру\n\tкомпонент <code class=\"code inline\">header</code> подключает\n\tкомпонент <code class=\"code inline\">alert</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/header.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;header&gt;\n\theader\n\t&lt;x-alert /&gt;\n&lt;/header&gt;</code>\n</div>\n<p>\n\tСоздадим файл подключаемого компонента:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/alert.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div class=\"alert\"&gt;\n\talert\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПодключите внутри хедера\n\t\tкомпонент с логотипом сайта.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПодключите внутри хедера\n\t\tкомпонент с контактными данными.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/basic-slots/","content":"\n\t\t\t\t<h1>Слоты компонентов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть некоторый компонент.\n\tДавайте подключим его:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-alert /&gt;</code>\n</div>\n<p>\n\tПри необходимости мы можем передать\n\tв компонент некоторый текст. Для этого\n\tэтот текст нужно написать между открывающим\n\tи закрывающим тегом компонента:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-alert&gt;\n\ttext text text\n&lt;/x-alert&gt;</code>\n</div>\n<p>\n\tВ самом компоненте переданный текст\n\tпопадет в переменную <code class=\"code inline\">$slot</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/alert.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div class=\"alert\"&gt;\n\t{{ $slot }}\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте компонент <code class=\"code inline\">info</code>\n\t\tдля вывода информации. Передайте\n\t\tв него параметром некоторый текст.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте компонент <code class=\"code inline\">logo</code>\n\t\tдля вывода логотипа. Передайте\n\t\tв него параметром путь к картинке\n\t\tлоготипа.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/additional-slots/","content":"\n\t\t\t\t<h1>Дополнительные слоты компонентов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ компоненте кроме основного слота,\n\tпопадающего в переменную <code class=\"code inline\">$slot</code>,\n\tможно задавать еще и дополнительные\n\tслоты, попадающие в свои переменные.\n</p>\n<p>\n\tЭто делается с помощью тега <code class=\"code inline\">&lt;x-slot&gt;</code>,\n\tв котором после двоеточия указывается имя\n\tслота. Давайте для примера слелаем\n\tслот с именем <code class=\"code inline\">type</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-alert&gt;\n\t&lt;x-slot:type&gt;\n\t\terror\n\t&lt;/x-slot&gt;\n    \n\ttext text text\n&lt;/x-alert&gt;</code>\n</div>\n<p>\n\tТекст этого слота попадет в переменную\n\t<code class=\"code inline\">$type</code>. Выведем этот текст в представлении\n\tкомпонента:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/alert.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div class=\"alert alert-{{ $type }}\"&gt;\n\t{{ $slot }}\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ компоненте <code class=\"code inline\">logo</code> сделайте\n\t\tдополнительный слот, в который\n\t\tбудет передаваться атрибут <code class=\"code inline\">alt</code>\n\t\tкартинки.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ компоненте <code class=\"code inline\">logo</code> сделайте\n\t\tеще один дополнительный слот,\n\t\tв который будет передаваться\n\t\tатрибут <code class=\"code inline\">title</code> картинки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/site-layout-component/","content":"\n\t\t\t\t<h1>Макет сайта как компонент в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМакет сайта в Laravel сам является компонентом.\n\tДавайте посмотрим на его код:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;{{ $title }}&lt;/title&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t{{ $slot }}\n\t&lt;/body&gt;\n&lt;/html&gt;</code>\n</div>\n<p>\n\tКак вы видите, контент сайта является основным\n\tслотом, а тайтл - дополнительным. Именно так\n\tмы и задаем их в представлениях:\n</p>\n<div class=\"block\" data-file=\"resources/views/post/show.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-layout&gt;\n\t&lt;x-slot:title&gt;\n\t\tpage title\n\t&lt;/x-slot&gt;\n\t\n\tpage content\n&lt;/x-layout&gt;</code>\n</div>\n<p>\n\tТехнически это означает, что мы можем\n\tпередавать в макет и другие дополнительные\n\tслоты, а также для разных представлений\n\tиспользовать различные макеты сайта.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tСделайте в макете дополнительный слот,\n\t\tв котором будет задаваться мета описание\n\t\tстраницы.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте два отличающихся макета\n\t\tсайта.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДля одного представления используйте\n\t\tпервый макет, а для другого - второй.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/classes/","content":"\n\t\t\t\t<h1>Класс компонента в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля компонента при необходимости можно\n\tсоздавать управляющий им PHP класс.\n\tЭти классы размещаются в папке\n\t<code class=\"path inline\">app/View/Components</code>.\n</p>\n<p>\n\tДавайте создадим класс для компонента\n\t<code class=\"code inline\">Header</code>:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Header.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnamespace App\\View\\Components;\n\tuse Illuminate\\View\\Component;\n\t\n\tclass Header extends Component\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВ методе <code class=\"code inline\">render</code> укажем, что мы\n\tхотим рендерить файл представления\n\tнашего компонента:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Header.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnamespace App\\View\\Components;\n\tuse Illuminate\\View\\Component;\n\t\n\tclass Header extends Component\n\t{\n\t\tpublic function render()\n\t\t{\n\t\t\treturn view('components.header');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте класс для компонента\n\t\t<code class=\"code inline\">Footer</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/passing-view-data/","content":"\n\t\t\t\t<h1>Передача данных в представление компонента в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ представление компонента можно\n\tпередавать данные. Смотрите пример:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Header.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Header extends Component\n\t{\n\t\tpublic function render()\n\t\t{\n\t\t\treturn view('components.header', [\n\t\t\t\t'var1' =&gt; 1,\n\t\t\t\t'var2' =&gt; 2,\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВыведем переданные данные\n\tв представлении:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/header.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;p&gt;{{ $var1 }}&lt;/p&gt;\n&lt;p&gt;{{ $var2 }}&lt;/p&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в компонент <code class=\"code inline\">User</code>\n\t\tимя, фамилию и возраст юзера.\n\t\tВыведите эти данные в отдельных\n\t\tтегах.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в компонент <code class=\"code inline\">Info</code>\n\t\tмассив строк. Выведите их в виде\n\t\tсписка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/getting-db-data/","content":"\n\t\t\t\t<h1>Получение данных из БД в компоненте в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ классах компонентов можно получать\n\tданные из БД и отправлять в представление\n\tдля отрисовки.\n\tДля примера давайте сделаем компонент,\n\tдинамически формирующий меню сайта.\n\tПусть в этом меню будут ссылки на\n\tкатегории.\n</p>\n<p>\n\tДля начала заюзаем модель категорий:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Nav.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Models\\Category;\n\t\n\tclass Nav extends Component\n\t{\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь получим список категорий\n\tи отравим их в представление:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Nav.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Nav extends Component\n\t{\n\t\tpublic function render()\n\t\t{\n\t\t\t$categories = Category::all();\n\t\t\t\n\t\t\treturn view('components.nav', [\n\t\t\t\t'categories' =&gt; $categories,\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tА теперь выведем переданные данные\n\tв представлении:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/nav.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;nav&gt;\n\t@foreach ($categories as $category)\n\t\t&lt;a href=\"{{ $category['slug'] }}\"&gt;{{ $category['name'] }}&lt;/a&gt;\n\t@endforeach\n&lt;/nav&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте компонент, выводящий ссылки\n\t\tна <code class=\"number inline\">5</code> самых популярных постов.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/generation/","content":"\n\t\t\t\t<h1>Генерация компонентов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно генерировать файлы компонентов через artisan.\n\tДавайте разберемся, как это делать.\n</p>\n<p>\n\tСледующая команда создаст для компонента\n\tфайл его представления и файл его класса:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:component Alert</code>\n</div>\n<p>\n\tМожно создать только файл представления:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:component Alert --view</code>\n</div>\n<p>\n\tМожно создать компонент в подпапке:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">php artisan make:component Header/Alert</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью терминала создайте\n\t\tфайлы представления и класса\n\t\tкомпонента <code class=\"code inline\">Menu</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью терминала создайте\n\t\tфайл представления\n\t\tкомпонента <code class=\"code inline\">Nav</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/passing-class-data/","content":"\n\t\t\t\t<h1>Передача данных в классы компонентов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно передавать данные в классы компонентов,\n\tиспользуя атрибуты HTML. Давайте для примера\n\tсделаем два атрибута:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-alert type=\"error\" message=\"text\" /&gt;</code>\n</div>\n<p>\n\tДавайте теперь получим эти данные\n\tв классе компонента. Для этого для\n\tначала объявим наши атрибуты свойствами\n\tкласса компонента:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Alert.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Alert extends Component\n\t{\n\t\tpublic $type;\n\t\tpublic $message;\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь получим данные атрибутов\n\tв конструкторе:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Alert.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Alert extends Component\n\t{\n\t\tpublic $type;\n\t\tpublic $message;\n\n\t\tpublic function __construct($type, $message)\n\t\t{\n\t\t\t$this-&gt;type = $type;\n\t\t\t$this-&gt;message = $message;\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tТеперь можем сделать что-нибудь с\n\tполученными данными. Например, передадим\n\tих в представление:\n</p>\n<div class=\"block\" data-file=\"app/View/Components/Alert.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass Alert extends Component\n\t{\n\t\tpublic $type;\n\t\tpublic $message;\n\n\t\tpublic function __construct($type, $message)\n\t\t{\n\t\t\t$this-&gt;type = $type;\n\t\t\t$this-&gt;message = $message;\n\t\t}\n\t\t\n\t\tpublic function render()\n\t\t{\n\t\t\treturn view('components.alert', [\n\t\t\t\t'type' =&gt; $this-&gt;type,\n\t\t\t\t'message' =&gt; $this-&gt;message,\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tВыведем их в представлении:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/alert.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div class=\"alert alert-{{ $type }}\"&gt;\n\t{{ $message }}\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в компонент <code class=\"code inline\">Logo</code>\n\t\tпуть к картинке и ее <code class=\"code inline\">alt</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/passing-class-variables/","content":"\n\t\t\t\t<h1>Передача значений переменных в классы компонентов в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно передавать не только строки,\n\tно и значения переменных. Для этого\n\tперед именем такого атрибута нужно\n\tпоставить двоеточие:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-alert type=\"error\" :message=\"$message\" /&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в компонент <code class=\"code inline\">H1</code>\n\t\tтайтл сайта.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/components/passing-class-attributes/","content":"\n\t\t\t\t<h1>Передача обычных атрибутов в компоненты в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНекоторые атрибуты должны быть\n\tпросто переданы в представление.\n\tПусть, к примеру, мы хотим передать\n\tатрибут <code class=\"code inline\">class</code>:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/layout.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;x-alert type=\"error\" class=\"alert\" /&gt;</code>\n</div>\n<p>\n\tВсе атрибуты, которые не являются частью\n\tконструктора компонента, будут автоматически\n\tдобавлены в коллекцию атрибутов компонента. \n</p>\n<p>\n\tЭта коллекция атрибутов автоматически становится\n\tдоступной для компонента через переменную <code class=\"code inline\">$attributes</code>.\n\tВсе атрибуты могут отображаться в компоненте\n\tпутем вывода этой переменной:\n</p>\n<div class=\"block\" data-file=\"resources/views/components/alert.blade.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"blade\">&lt;div {{ $attributes }}&gt;\n    \t\t\t\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в компонент <code class=\"code inline\">Logo</code>\n\t\tатрибуты <code class=\"code inline\">width</code> и <code class=\"code inline\">height</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/intro/","content":"\n\t\t\t\t<h1>Введение в сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ Laravel работа с сессиями осуществляется\n\tчерез объект запроса <code class=\"code inline\">Request</code>, который мы\n\tс вами уже использовали при работе с формами.\n\tДавайте подключим этот объект запроса:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Illuminate\\Http\\Request; // подключаем\n\n\tclass PostController.php extends Controller\n\t{\n\t\tpublic function index(Request $request) // выполняем инъекцию\n\t\t{\n\t\t\t\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДля обращения к сессии у объекта запроса\n\tследует вызвать метод <code class=\"code inline\">session</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function index(Request $request)\n\t\t{\n\t\t\t$request-&gt;session();\n\t\t}\n\t}\n\t\n?&gt;</code>\n</div>\n<p>\n\tДанный метод возвращает объект с сессией,\n\tпосле чего можно будет использовать методы\n\tэтого объекта:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function index(Request $request)\n\t\t{\n\t\t\tdump($request-&gt;session()); // объект с методами\n\t\t}\n\t}\n\t\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПолучите в своем контроллере объект\n\t\tс сессией.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/variables/","content":"\n\t\t\t\t<h1>Установка и получение переменных сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля установки переменной сессии используется\n\tметод <code class=\"code inline\">put</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$request-&gt;session()-&gt;put('key', 'value');\n?&gt;</code>\n</div>\n<p>\n\tДля получения переменной сессии используется\n\tметод <code class=\"code inline\">get</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = $request-&gt;session()-&gt;get('key');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ одном действии контроллера установите какое-нибудь\n\t\tзначение в сессию, а во втором - получите его.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tИспользуя сессии, выведите в каком-нибудь\n\t\tпредставлении счетчик, показывающий количество\n\t\tобновлений страницы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/default-values/","content":"\n\t\t\t\t<h1>Значения по умолчанию переменных сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри получении значения из сессии можно\n\tвторым параметром метода <code class=\"code inline\">get</code>\n\tпередать значение по умолчанию.\n\tЭто значение будет возвращено,\n\tесли указанного ключа нет в сессии:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = $request-&gt;session()-&gt;get('key', 'default');\n?&gt;</code>\n</div>\n<p>\n\tТакое может пригодится, например, для создания\n\tсчетчика обновления страницы. Как работает\n\tтакой счетчик: при первом заходе на страницу\n\tон должен получить значение <code class=\"number inline\">1</code>, а при\n\tпоследующих заходах - увеличивать свое значение\n\tна единицу.\n</p>\n<p>\n\tУдобно в этом случае использовать значение\n\tпо умолчанию, чтобы при первом заходе установить\n\tзначение счетчика в <code class=\"number inline\">1</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = $request-&gt;session()-&gt;get('counter', 1);\n\techo $value;\n\t\n\t// Увеличим счетчик на 1:\n\t$request-&gt;session()-&gt;put('counter', $value + 1);\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОписанным выше способом реализуйте счетчик\n\t\tобновления страницы.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в сессию время первого захода пользователя\n\t\tна страницу. При обновлении страницы (и при\n\t\tпервом заходе тоже) выводите это время на экран.\n\t</p>\n</div>\n\n<h2>Анонимная функция</h2>\n<p>\n\tЗначением по умолчанию также может служить\n\tанонимная функция, которая выполнится, если\n\tзапрашиваемой переменной сессии не существует:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = $request-&gt;session()-&gt;get('key', function() {\n\t\treturn 'default';\n\t});\n?&gt;</code>\n</div>\n<p>\n\tЭто может пригодится в том случае, когда\n\tвам нужно выполнить какой-то PHP код в случае,\n\tесли значение сессии пока не задано.\n</p>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/data-removing/","content":"\n\t\t\t\t<h1>Удаление данных из сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте научимся удалять данные из сессий.\n\tДля этого предназначено несколько методов.\n</p>\n\n<h2>Удаление элемента</h2>\n<p>\n\tМетод <code class=\"code inline\">forget</code> удаляет определенную\n\tпеременную из сессии. Давайте, например,\n\tудалим переменную с ключом <code class=\"string inline\">'key'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$request-&gt;session()-&gt;forget('key');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУдалите какую-нибудь переменную из сессии.\n\t</p>\n</div>\n\n<h2>Чтение и удаление элемента</h2>\n<p>\n\tМетод <code class=\"code inline\">pull</code> прочитывает и удаляет элемент\n\tиз сессии за одно действие:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = $request-&gt;session()-&gt;pull('key');\n?&gt;</code>\n</div>\n<p>\n\tВторой необязательный параметр метода <code class=\"code inline\">pull</code>\n\tзадает значение по умолчанию\n\tдля прочитываемого элемента:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = $request-&gt;session()-&gt;pull('key', 'default');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте два действия в контроллере. В первом\n\t\tдействии установите какую-нибудь переменную\n\t\tсессии, а во втором действии выведите значение\n\t\tэтой переменной на экран (передав ее в представление),\n\t\tа затем удалите переменную из сессии.\n\t</p>\n</div>\n\n<h2>Удаление всех данных</h2>\n<p>\n\tМетод <code class=\"code inline\">flush</code> удаляет все данные из сессии:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$request-&gt;session()-&gt;flush();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОчистите вашу сессию от заданных переменных.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/getting-all-data/","content":"\n\t\t\t\t<h1>Получение всех данных сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">all</code> позволяет получить в\n\tвиде массива все данные из сессии:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$data = $request-&gt;session()-&gt;all();\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУстановите несколько переменных сессии. Получите\n\t\tэти установленные переменные в виде массива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/checking-variables/","content":"\n\t\t\t\t<h1>Существование переменной сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМетод <code class=\"code inline\">has</code> используется для проверки\n\tсуществования переменной сессии. Этот метод\n\tвернет <code class=\"code inline\">true</code>, если переменная существует\n\tи не равна <code class=\"code inline\">null</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($request-&gt;session()-&gt;has('key')) {\n\t\t\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДля проверки существования переменной сессии,\n\tдаже если она равна <code class=\"code inline\">null</code>, можно использовать\n\tметод <code class=\"code inline\">exists</code>. Этот метод вернет <code class=\"code inline\">true</code>,\n\tесли переменная существует:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tif ($request-&gt;session()-&gt;exists('key')) {\n\t\t\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПроверьте, существует ли в сессии переменная\n\t\t<code class=\"code inline\">time</code>. Если существует - выведите на\n\t\tэкран ее значение, а если не существует -\n\t\tустановите ее значение в текущий момент времени.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/writing-arrays/","content":"\n\t\t\t\t<h1>Запись массивов в сессии в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ переменную сессии можно записывать массивы.\n\tСмотрите пример:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$request-&gt;session()-&gt;put('arr', ['a', 'b', 'c']);\n?&gt;</code>\n</div>\n<p>\n\tС помощью метода <code class=\"code inline\">push</code> в такие\n\tмассивы можно добавлять новые элементы.\n\tДавайте для примера с его помощью добавим\n\tновый элемент со значением <code class=\"string inline\">'d'</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$request-&gt;session()-&gt;push('arr', 'd');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tЗапишите в переменную сессии массив\n\t\tс числами.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДобавьте к массиву из предыдущей\n\t\tзадачи еще одно число.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/sessions/global-function/","content":"\n\t\t\t\t<h1>Работа с сессиями через глобальную функцию в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля работы с сессиями можно также\n\tиспользовать глобальную функцию <code class=\"code inline\">session</code>.\n\tДавайте посмотрим, как с ней работать.\n</p>\n<p>\n\tСохраним данные в сессию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tsession(['key' =&gt; 'value']);\n?&gt;</code>\n</div>\n<p>\n\tПолучим данные из сессии:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = session('key');\n?&gt;</code>\n</div>\n<p>\n\t При получении укажем значение по умолчанию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\t$value = session('key', 'default');\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">session</code> сохраните\n\t\tкакие-нибудь данные в сессию.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью функции <code class=\"code inline\">session</code> получите\n\t\tсохраненные данные из сессии.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/redirect/intro/","content":"\n\t\t\t\t<h1>Введение в редиректы в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ Laravel при обращении к одному адресу\n\tможно осуществлять редирект на другой.\n\tДавайте посмотрим, как это делается.\n\tПусть у нас есть вот такие маршруты:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('/post/show1', [PostController::class, 'show1']);\n\tRoute::get('/post/show2', [PostController::class, 'show2']);\n?&gt;</code>\n</div>\n<p>\n\tДавайте по обращению к действиям контроллера\n\tбудем выводить какие-нибудь строки:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show1()\n\t\t{\n\t\t\treturn 'show1';\n\t\t}\n\t\t\n\t\tpublic function show2()\n\t\t{\n\t\t\treturn 'show2';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь сделаем так, чтобы при обращению\n\tк первому действию выполнялась переадресация\n\tна второе действие:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show1()\n\t\t{\n\t\t\treturn redirect('post/show2'); // перенаправляем на адрес\n\t\t}\n\t\t\n\t\tpublic function show2()\n\t\t{\n\t\t\treturn 'show2';\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыполните редирект с одного действия\n\t\tконтроллера на другой.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте форму, спрашивающую у пользователя\n\t\tчисло. После отправки формы, если введено\n\t\tчисло от <code class=\"number inline\">1</code> до <code class=\"number inline\">10</code>,\n\t\tвыполните редирект на другое действие.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/redirect/2/","content":""},{"url":"/ru/php/framework/laravel/book/prime/redirect/controller-action/","content":"\n\t\t\t\t<h1>Редирект на заданное действие контроллера в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно выполнять редирект на заданное\n\tдействие контроллера. Давайте, например,\n\tвыполним редирект на действие <code class=\"code inline\">index</code>\n\tконтроллера <code class=\"code inline\">HomeController</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse App\\Http\\Controllers\\HomeController; // заюзаем контроллер\n\t\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn redirect()-&gt;action([HomeController::class, 'index']);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tЕсли роут контроллера требует параметры,\n\tвы можете передать их вторым параметром\n\tметода <code class=\"code inline\">action</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show1()\n\t\t{\n\t\t\treturn redirect()-&gt;action([HomeController::class, 'index'],  ['id' =&gt; 1]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте отдельную страницу\n\t\tс формой для добавления юзера.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПосле сохранения юзера выполните\n\t\tредирект на страницу со списком юзеров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/redirect/named-routes/","content":"\n\t\t\t\t<h1>Редирект на именованные маршруты в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно выполнить редирект на именованный\n\tроут. Давайте посмотрим на практике.\n\tПусть у нас есть некоторый роут с именем:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('blog/posts/all', [PostController.php::class, 'all'])\n\t\t-&gt;name('blog');\n?&gt;</code>\n</div>\n<p>\n\tДавайте выполним редирект на этот\n\tроут:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn redirect()-&gt;route('blog');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте именованный маршрут. Выполните на\n\t\tнего редирект с другого действия.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/redirect/named-routes-parameters/","content":"\n\t\t\t\t<h1>Редирект на именованный маршрут с параметром в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИменованный маршрут может иметь параметры.\n\tНапример, вот так:\n</p>\n<div class=\"block\" data-file=\"routes/web.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tRoute::get('blog/post/{id}', [PostController.php::class, 'show'])\n\t\t-&gt;name('post');\n?&gt;</code>\n</div>\n<p>\n\tМы можем выполнить редирект и на такой маршрут,\n\tпередав массив с параметрами вторым параметром\n\tметода <code class=\"code inline\">route</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn redirect()-&gt;route('post', ['id' =&gt; 1]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте именованный маршрут с параметрами.\n\t\tВыполните редирект на данный маршрут, передав\n\t\tпри этом значения параметров.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/response/intro/","content":"\n\t\t\t\t<h1>Введение в объект ответа Response в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, обычно действия контроллеров\n\tвозвращают результат работы функции <code class=\"code inline\">view</code>,\n\tто есть представление:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn view('post.show'); // вернем представление\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно также просто вернуть текст:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn 'text'; // вернем текст\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tСуществует и третий вариант - можно вернуть\n\tобъект класса <code class=\"code inline\">Response</code>. Данный объект\n\tпозволяет устанавливать код HTTP ответа,\n\tа также заголовки этого ответа.\n\tКонструктор этого класса первым\n\tпараметром принимает текст ответа, а вторым\n\t- код HTTP статуса (<code class=\"number inline\">200</code>, <code class=\"number inline\">404</code> и тп):\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tnew Response('текст', 'статус'));\n?&gt;</code>\n</div>\n<p>\n\tДавайте, например, с помощью объекта <code class=\"code inline\">Response</code>\n\tвернем <code class=\"number inline\">404</code> ошибку:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn new Response('не найдено', '404'));\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтдайте в качестве ответа статус <code class=\"number inline\">201</code>\n\t\tи некоторый текст.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтдайте в качестве ответа статус <code class=\"number inline\">404</code>\n\t\tи некоторый текст.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/response/helper-function/","content":"\n\t\t\t\t<h1>Вспомогательная функция для ответа в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля удобства можно использовать вспомогательную\n\tглобальную функцию <code class=\"code inline\">response</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response('text', 200);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтдайте в качестве ответа статус <code class=\"number inline\">404</code>\n\t\tи некоторый текст.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/response/http-headers/","content":"\n\t\t\t\t<h1>Заголовки ответа в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tК объекту ответа можно добавлять HTTP заголовки.\n\tПример:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response('text', 200)\n\t\t\t\t-&gt;header('Content-Type', 'text/plain');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно использовать несколько методов <code class=\"code inline\">header</code>\n\tв виде цепочки для добавления нескольких\n\tзаголовков в отклик:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response('Hello World', 200)\n\t\t\t\t-&gt;header('Content-Type', 'text/plain')\n\t\t\t\t-&gt;header('X-Header-One', 'value')\n\t\t\t\t-&gt;header('X-Header-Two', 'value');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tМожно также отправлять несколько заголовков\n\tв виде массива, используя метод <code class=\"code inline\">withHeaders</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response('text', 200)-&gt;withHeaders([\n\t\t\t\t'Content-Type' =&gt; 'text/plain',\n\t\t\t\t'X-Header-One' =&gt; 'value',\n\t\t\t\t'X-Header-Two' =&gt; 'value',\n\t\t\t]);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<!--\n<div class=\"task\">\n\t<p>\n\t\t\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/response/returning-view/","content":"\n\t\t\t\t<h1>Отдача представления в качестве отклика в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЕсли вам нужен доступ к методам объекта ответа,\n\tно вы хотите возвращать представление в качестве\n\tтекста ответа, то вы можете использовать\n\tметод <code class=\"code inline\">view</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response()-&gt;view('post.show');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tК этому методу можно, например,\n\tцеплять заголовки:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response()\n\t\t\t\t-&gt;view('post.show')\n\t\t\t\t-&gt;header('Content-Type', 'text/plain');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОтдайте файл представления\n\t\tс каким-нибудь заголовком.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/cookies/intro/","content":"\n\t\t\t\t<h1>Работа с куками в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ данном уроке мы научимся устанавливать\n\tи прочитывать куки. Технически\n\tвсе куки представляют собой HTTP заголовки.\n\tПоэтому в Laravel работа с ними реализована так,\n\tчто для установки куки ее необходимо\n\tприцепить к объекту ответа с помощью метода\n\t<code class=\"code inline\">cookie</code>.\n</p>\n<p>\n\tЭтот метод первым параметром принимает\n\tимя куки, вторым - значение, а третьим -\n\tколичество минут, в течение которого кука\n\tдолжна считаться действующей.\n</p>\n<p>\n\tДавайте для примера установим некоторую\n\tкуку на <code class=\"number inline\">10</code> минут:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function set()\n\t\t{\n\t\t\treturn response('text')-&gt;cookie(\n\t\t\t\t'name', 'value', 10\n\t\t\t);\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<p>\n\tДавайте теперь прочитаем установленную куку.\n\tЭто делается с помощью метода <code class=\"code inline\">cookie</code>\n\tобъекта <code class=\"code inline\">Request</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function get(Request $request)\n\t\t{\n\t\t\t$value = $request-&gt;cookie('name');\n\t\t\tdump($value);\n\t\t}\n\t}\n\t\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ одном действии контроллера установите куку,\n\t\tа в другом - прочитайте ее.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте счетчик обновления страницы,\n\t\tработающий на куки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/cookies/queue/","content":"\n\t\t\t\t<h1>Добавление куки в очередь в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда может быть не очень удобно цеплять\n\tкуку к объекту ответа. Ведь кука может\n\tустанавливаться в одном месте кода,\n\tа объект ответа возвращается в другом.\n</p>\n<p>\n\tВ этом случае куку можно поставить в очедедь.\n\tТакие куки затем автоматически будут прицеплены\n\tк объекту ответа. Это делается с помощью\n\tспециального статического метода\n\t<code class=\"code inline\">queue</code> класса <code class=\"code inline\">Cookie</code>:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tuse Cookie;\n\t\n\tclass PostController extends Controller\n\t{\n\t\tpublic function set()\n\t\t{\n\t\t\tCookie::queue('name', 'value', 10);\n\t\t\treturn response('test');\n\t\t}\n\t}\n?&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПоставьте в очередь три куки.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/cookies/view-headers/","content":"\n\t\t\t\t<h1>Куки, представления и заголовки в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно одновременно отдавать представление\n\tи цеплять к ответу куку:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response()\n\t\t\t\t-&gt;view('post.show')\n\t\t\t\t-&gt;cookie('name', 'value', 10);\n\t\t}\n\t}\n\t\n?&gt;</code>\n</div>\n<p>\n\tМожно также прицеплять HTTP заголовки:\n</p>\n<div class=\"block\" data-file=\"app/Http/Controllers/PostController.php\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"php\">&lt;?php\n\tclass PostController extends Controller\n\t{\n\t\tpublic function show()\n\t\t{\n\t\t\treturn response()\n\t\t\t\t-&gt;view('test.show')\n\t\t\t\t-&gt;cookie('name', 'value', 10)\n\t\t\t\t-&gt;header('Content-Type', 'text/plain');\n\t\t}\n\t}\n\t\n?&gt;</code>\n</div>\n<!--\n<div class=\"task\">\n\t<p>\n\t\t\n\t</p>\n</div>\n-->\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/flash/messages/","content":"\n\t\t\t\t<h1>Флеш сообщения в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/session.md#кратковременные-данные\">раздел \"кратковременные-данные\"</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте самостоятельно задачи на изученную\n\t\tтему и решите их. В ответ присылайте условие\n\t\tзадачи и ваше решение. В задачах постарайтесь\n\t\tохватить все нюансы изученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/flash/old-request/","content":"\n\t\t\t\t<h1>Данные предыдущего запроса в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/requests.md#данные-прошлого-запроса\">документация по данным предыдущего запроса</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте самостоятельно задачи на изученную\n\t\tтему и решите их. В ответ присылайте условие\n\t\tзадачи и ваше решение. В задачах постарайтесь\n\t\tохватить все нюансы изученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/validation/","content":"\n\t\t\t\t<h1>Валидация форм в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/validation.md\">документация по валидации</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте самостоятельно задачи на изученную\n\t\tтему и решите их. В ответ присылайте условие\n\t\tзадачи и ваше решение. В задачах постарайтесь\n\t\tохватить все нюансы изученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/middlewares/","content":"\n\t\t\t\t<h1>Посредники в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/middleware.md\">документация по посредникам</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте посредник, который будет запускаться\n\t\tдля каждого HTTP запроса вашего сайта. В\n\t\tэтом посреднике сделайте счетчик посещений\n\t\tстраниц сайта пользователем. Пусть счетчик\n\t\tработает на сессиях.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/localization/","content":"\n\t\t\t\t<h1>Локализация в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru/blob/9.x/docs/localization.md\">документация по локализация</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПридумайте самостоятельно задачи на изученную\n\t\tтему и решите их. В ответ присылайте условие\n\t\tзадачи и ваше решение. В задачах постарайтесь\n\t\tохватить все нюансы изученной теории.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/auth/","content":"\n\t\t\t\t<h1>Аутентификация в Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://github.com/russsiq/laravel-docs-ru#безопасность\">раздел безопасность из документации</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСогласно изученной теории создайте авторизацию\n\t\tи регистрацию на вашем сайте.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/php/framework/laravel/book/prime/docs/","content":"\n\t\t\t\t<h1>Документация Laravel</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПо следующей <a target=\"_blank\" href=\"https://laravel.ru/docs/v5\">ссылке</a>\n\tизучите документацию фреймворка Laravel (правая\n\tменюшка). Перечитайте все разделы документации,\n\tтак как в предыдущих уроках учебника для\n\tпростоты изучения я опускал часть нюансов.\n\tТеперь пришла пора глубже ознакомится с документацией.\n</p>\n</div>\t\t\t"}]