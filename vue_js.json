[{"url":"/ru/javascript/framework/vue/book/prime/basis/intro/","content":"\n\t\t\t\t<h1>Введение в фреймворк Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДанный учебник посвящен популярному фреймворку\n\tVue3 (произносится как <span class=\"translate-ru\">вью</span>).\n\tДля его изучения вам необходимо знать чистый JavaScript,\n\tосновы командной строки, работу с npm, работу с модулями ES6.\n</p>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/install-framework/","content":"\n\t\t\t\t<h1>Установка фреймворка Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tФреймворк рекомендовано устанавливать\n\tчерез npm. Для этого вам необходимо\n\tсделать папку для вашего проекта,\n\tоткрыть ее в терминале и\n\tвыполнить следующую команду:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">npm install vue@next</code>\n</div>\n<p>\n\tЗатем нужно установить дополнительный\n\tинструмент для поддержики работы\n\tVUE из командной строки:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">npm install -g @vue/cli</code>\n</div>\n<p>\n\tПосле установки для запуска фреймворка\n\tвам нужно выполнить следующую\n\tкоманду:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"terminal\">npm run serve</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыполните установку фреймворка.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tОткройте страницу установленного\n\t\tфреймворка в браузере.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/component-structure/","content":"\n\t\t\t\t<h1>Структура компонента Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКаждый компонент должен состоять из\n\tдвух следующих тегов:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\t\n&lt;/script&gt;\n&lt;template&gt;\n\t\n&lt;/template&gt;</code>\n</div>\n<p>\n\tВ теге <code class=\"code inline\">template</code> следует писать\n\tверстку, то есть <dfn>представление</dfn>\n\tнашего компонента:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;div&gt;\n\t\tHello World\n\t&lt;/div&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА в теге <code class=\"code inline\">script</code> следует\n\tписать JavaScript код нашего компонента.\n\tЭтот код должен представлять собой\n\tобъект, который будет экспортироваться\n\tиз нашего файла компонента:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\texport default {\n\t\t\n\t}\n&lt;/script&gt;</code>\n</div>\n<p>\n\tВ экспортируемом объекте указываются\n\tразличные настройки и функции компонента.\n\tОдной из настроек является имя\n\tэтого компонента:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">export default {\n\tname: 'App',\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВ теге <code class=\"code inline\">template</code> вашего компонента\n\t\tвыведите какой-нибудь текст с тегами.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/object-data/","content":"\n\t\t\t\t<h1>Объект data в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОсновой компонента являются данные,\n\tкоторыми мы будем манипулировать.\n\tЭти данные хранятся в специальном\n\tобъекте <code class=\"code inline\">data</code>. Этот объект\n\tдолжен возвращаться результатом\n\tспециального метода:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">export default {\n\tdata() {\n\t\treturn {\n\t\t\t\n\t\t}\n\t}\n}</code>\n</div>\n<p>\n\tДавайте будем хранить в свойстве\n\tобъекта с данными какой-нибудь\n\tтекст:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\ttext1: '111',\n\t\ttext2: '222',\n\t}\n}</code>\n</div>\n<p>\n\tХранимые данные можно выводить\n\tв представлении. Это делается\n\tв двойных фигурных скобках,\n\tв которых пишется имя свойства,\n\tзначение которого мы хотим\n\tвывести. Давайте выведем\n\tзначения наших свойств:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ text1 }}\n\t{{ text2 }}\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь сделаем так, чтобы каждое\n\tиз наших сообщений вывелось в своем\n\tабзаце:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ text1 }}&lt;/p&gt;\n\t&lt;p&gt;{{ text2 }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится хранится имя\n\t\tи фамилия пользователя:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tname: 'john',\n\t\tsurn: 'smit',\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите каждое свойство в\n\t\tотдельном теге <code class=\"code inline\">div</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/attributes/","content":"\n\t\t\t\t<h1>Работа с атрибутами в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВставлять значения свойств из <code class=\"code inline\">data</code>\n\tможно не только в текст, но и в атрибуты тегов.\n\tЭто делается с помощью директивы <code class=\"code inline\">v-bind</code>.\n</p>\n<p>\n\tДавайте с помощью этой директивы установим\n\tзначение атрибута <code class=\"code inline\">src</code> для тега\n\t<code class=\"code inline\">img</code>. Пусть желаемое значение\n\tхранится в свойстве:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tattr: 'img.png',\n\t}\n}</code>\n</div>\n<p>\n\tЗапишем значение из свойства в\n\tатрибут <code class=\"code inline\">src</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;img v-bind:src=\"{{ attr }}\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tОбычно все пользуются сокращенным\n\tвариантом <code class=\"code inline\">v-bind</code>. Он представляет\n\tсобой просто двоеточие перед\n\tименем атрибута:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;img :src=\"{{ attr }}\"&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится текст\n\t\tи адрес ссылки:\n\t</p>\n\t<div class=\"block\" data-file=\"App.vue\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\ttext: 'page',\n\t\thref: 'page.html',\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tСформируйте с помощью этих\n\t\tданных следующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;a href=\"page.html\"&gt;page&lt;/a&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/code-execution/","content":"\n\t\t\t\t<h1>Выполнения кода в представлениях Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ фигурных скобках можно выполнять различный\n\tJavaScript код. Давайте рассмотрим это на примере.\n\tПусть у нас есть два свойства с числами -\n\t<code class=\"code inline\">var1</code> и <code class=\"code inline\">var2</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tvar1: 1,\n\t\tvar2: 2,\n\t}\n}</code>\n</div>\n<p>\n\tДавайте, например, сложим значения\n\tнаших свойств:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ var1 + var2 }}\n&lt;/template&gt;</code>\n</div>\n<p>\n\tРезультатом этого кода будет следующий HTML:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div id=\"app\"&gt;\n\t3\n&lt;/div&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующее:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnum: 5,\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран квадрат свойства <code class=\"code inline\">num</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующее:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnum1: 1,\n\t\tnum2: 2,\n\t\tnum3: 3,\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран сумму свойств\n\t\t<code class=\"code inline\">num1</code>, <code class=\"code inline\">num2</code> и <code class=\"code inline\">num3</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/arrays/","content":"\n\t\t\t\t<h1>Массивы в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВывод содержимого массивов во Vue осуществляется\n\tтак же, как и в чистом JavaScript.\n\tДавайте посмотрим, как это делается.\n\tПусть в <code class=\"code inline\">data</code> у нас есть свойство\n\t<code class=\"code inline\">arr</code>, которое содержит внутри\n\tсебя некоторый массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: [1, 2, 3],\n\t}\n}</code>\n</div>\n<p>\n\tДавайте выведем элементы этого массива:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ arr[0] }}\n\t{{ arr[1] }}\n\t{{ arr[2] }}\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: ['x', 'y', 'z'],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите каждый элемент этого массива\n\t\tв отдельном абзаце.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: [1, 2, 3],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран сумму элементов этого массива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/objects/","content":"\n\t\t\t\t<h1>Объекты в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть теперь в <code class=\"code inline\">data</code> у нас записан объект:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tobj: {a: 1, b: 2, c: 3},\n\t}\n}</code>\n</div>\n<p>\n\tДавайте выведем содержимое этого объекта на экран:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ obj.a }}\n\t{{ obj.b }}\n\t{{ obj.c }}\n&lt;/template&gt;</code>\n</div>\n<p>\n\tЛибо можно воспользоваться альтернативным\n\tспособом:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ obj['a'] }}\n\t{{ obj['b'] }}\n\t{{ obj['c'] }}\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующий объект:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tobj: {x: 1, y: 2, z: 3},\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите на экран сумму элементов этого объекта.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/methods/","content":"\n\t\t\t\t<h1>Работа с методами в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВо Vue можно создавать свои функции,\n\tкоторые в терминах Vue называются\n\t<dfn>методами</dfn>. Для этого предназначено\n\tсвойство <code class=\"code inline\">methods</code>. Оно распалогается\n\tследующим образом:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">export default {\n\tdata() {\n\t\t\n\t},\n\tmethods: {\n\t\t\n\t}\n}</code>\n</div>\n<p>\n\tДалее для краткости я буду\n\tписать в сокращенном виде,\n\tвот так:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\t\n}</code>\n</div>\n<p>\n\tДавайте сделаем какой-нибудь\n\tтестовый метод:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tshow: function() {\n\t\talert('!');\n\t}\n}</code>\n</div>\n<p>\n\tВызовем этот метод в представлении.\n\tВ этом случае он сработает\n\tсразу по загрузки страницы:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ show() }}\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте метод, который будет выводить\n\t\tалертом текущую дату.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/binding-handlers/","content":"\n\t\t\t\t<h1>Навешивание обработчиков событий в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь запустим наш метод по\n\tкакому-нибудь событию. Для того, чтобы\n\tнавесить событие на какой-нибудь DOM\n\tэлемент, нужно использовать директиву\n\t<code class=\"code inline\">v-on</code>.\n</p>\n<p>\n\tВ этой директиве после двоеточия\n\tнужно указывать имя события,\n\tа значением - имя метода,\n\tкоторый нужно вызвать по наступлению\n\tэтого события.\n</p>\n<p>\n\tДавайте попробуем на практике.\n\tПусть у нас есть следующий метод:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tshow: function() {\n\t\talert('!');\n\t}\n}</code>\n</div>\n<p>\n\tПусть у нас есть следующая\n\tкнопка:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button&gt;text&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте сделаем так, чтобы по клику\n\tна эту кнопку вызывался метод\n\t<code class=\"code inline\">show</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button v-on:click=\"show\"&gt;text&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tОбычно все пользуются сокращенным\n\tвариантом <code class=\"code inline\">v-on</code>. Он представляет\n\tсобой символ <code class=\"code inline\">@</code> перед\n\tименем события:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"show\"&gt;text&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте кнопку, по клику на которую\n\t\tалертом будет выводиться текущая дата.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tалерт выводился не по клику, а по наведению\n\t\tмышкой.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/properties-inside-methods/","content":"\n\t\t\t\t<h1>Работа с data внутри методов Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВнутри методов можно получать доступ\n\tк свойствам объекта <code class=\"code inline\">data</code>.\n\tДля этого к ним нужно обращаться\n\tчерез <code class=\"code inline\">this</code>. Давайте посмотрим\n\tна примере. Пусть у нас есть\n\tследующее свойство:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\ttext: 'str',\n\t}\n}</code>\n</div>\n<p>\n\tДавайте внутри метода выведем\n\tзначение этого свойства:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tshow: function() {\n\t\talert(this.text);\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранятся два числа:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnum1: 1,\n\t\tnum2: 2,\n\t},\n}</code>\n\t</div>\n\t<p>\n\t\tСделайте метод, который при запуске кода\n\t\tвыведет алертом сумму наших чисел.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/support-methods/","content":"\n\t\t\t\t<h1>Вспомогательные методы в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно делать вспомогательные методы,\n\tкоторые будут использоваться внутри\n\tдругих методов. К таким методам\n\tтакже нужно обращаться через <code class=\"code inline\">this</code>.\n\tДавайте посмотрим на примере. Пусть у нас\n\tесть следующий метод:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">show: function() {\n\talert(this.text);\n}</code>\n</div>\n<p>\n\tСделаем вспомогательный метод,\n\tкоторый будет делать заглавной\n\tпервую букву переданной строки:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">cape: function(str) {\n\treturn str[0].toUpperCase() + str.slice(1);\n}</code>\n</div>\n<p>\n\tВоспользуемся вспомогательным методом\n\tвнутри основного метода:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tshow: function() {\n\t\tlet text = this.cape(this.text);\n\t\talert(text);\n\t},\n\tcape: function(str) {\n\t\treturn str[0].toUpperCase() + str.slice(1);\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте вспомогательный метод,\n\t\tкоторый параметром будет получать\n\t\tчисло, а возвращать день недели,\n\t\tсоответствующий этому числу.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте основной метод,\n\t\tкоторый будет выводить на экран\n\t\tназвание текущего дня недели.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/method-passing-parameters/","content":"\n\t\t\t\t<h1>Передача параметров в метод в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно передавать параметры в методы,\n\tпривязываемые в качестве обработчиков.\n\tДавайте посмотрим на практике.\n\tПусть у нас есть следующий метод,\n\tпараметром принимающий сообщение,\n\tкоторое нужно вывести:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tshow: function(str) {\n\t\talert(str);\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем этот метод к разным тегам,\n\tпередав ему параметром текст\n\tдля вывода:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"show('text1')\"&gt;btn1&lt;/button&gt;\n\t&lt;button @click=\"show('text2')\"&gt;btn2&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте метод, который параметром\n\t\tбудет принимать число и алертом\n\t\tвыводить квадрат этого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте две кнопки. По нажатию\n\t\tна первую кнопку выведите\n\t\tквадрат числа <code class=\"number inline\">2</code>,\n\t\tа по нажатию на вторую -\n\t\tквадрат числа <code class=\"number inline\">3</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/reactivity/","content":"\n\t\t\t\t<h1>Реактивность в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЛюбое изменение данных из <code class=\"code inline\">data</code>\n\tприводит к мгновенному изменению отображения\n\tэтих данных на странице. Такое поведение\n\tVue называется <dfn>реактивность<dfn>.\n</p>\n<p>\n\tДавайте проверим на практике.\n\tПусть у нас есть следующее\n\tсвойство:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\ttext: 'xxx',\n\t}\n}</code>\n</div>\n<p>\n\tВыведем значение этого свойства:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ text }}\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем кнопку, по нажатию на которую\n\tбудет меняться наше свойство:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ text }}\n\t&lt;button @click=\"change\"&gt;text&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tНапишем теперь метод, который будет\n\tвызываться по клику на кнопку\n\tи изменять свойство:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tchange: function() {\n\t\tthis.text = 'yyy';\n\t}\n}</code>\n</div>\n<p>\n\tЕсли собрать весь код вместе и нажать\n\tна кнопку - текст на экране <dfn>реактивно<dfn>\n\tпоменяется на другой.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДано свойство <code class=\"code inline\">text</code>. Выведите содержимое\n\t\tэтого свойства в каком-нибудь абзаце.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Сделайте так, чтобы по клику\n\t\tна эту кнопку значение свойства <code class=\"code inline\">text</code>\n\t\tреактивно менялось на другое.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны две кнопки. Сделайте так, чтобы по клику\n\t\tна первую кнопку значение свойства <code class=\"code inline\">text</code>\n\t\tреактивно менялось на одно значение,\n\t\tа по клику на вторую - на другое.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/filters/","content":"\n\t\t\t\t<h1>Работа с фильтрами в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда бывает так, что при выводе данных\n\tмы хотим с ними что-нибудь сделать.\n\tОдним из способов преобразования данных\n\tявляется использование <dfn>фильтров</dfn>.\n\tДавайте посмотрим, как ими пользоваться.\n</p>\n<p>\n\tПусть в свойстве <code class=\"code inline\">message</code> хранится\n\tкакая-то строка:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tmessage: 'hello',\n\t}\n}</code>\n</div>\n<p>\n\tВыведем эту строку на экран:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте сделаем фильтр <code class=\"code inline\">capitalize</code>,\n\tкоторый будет преобразовывать первый\n\tсимвол строки в верхний регистр.\n\tДля этого сделаем соответствующую\n\tфункцию в настройке <code class=\"code inline\">filters</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">filters: {\n\tcapitalize: function(str) {\n\t\treturn str[0].toUpperCase() + str.slice(1);\n\t}\n}</code>\n</div>\n<p>\n\tДавайте теперь применим наш фильтр\n\tк выводимой строке:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ message | capitalize }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр <code class=\"code inline\">uppercase</code>, который\n\t\tбудет переводить всю строку в верхний регистр.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр <code class=\"code inline\">lowercase</code>, который\n\t\tбудет переводить всю строку в нижний регистр.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр <code class=\"code inline\">capitalizeWords</code>, который\n\t\tбудет переводить в верхний регистр первую\n\t\tбукву каждого слова в строке.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр <code class=\"code inline\">formatDate</code>, который\n\t\tбудет принимать параметром дату в формате\n\t\t<span class=\"format\">год-месяц-день</span> и преобразовывать\n\t\tее в формат <span class=\"format\">день.месяц.год</span>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр <code class=\"code inline\">getDay</code>, который будет\n\t\tпринимать параметром число от <code class=\"number inline\">1</code> до\n\t\t<code class=\"number inline\">7</code> и преобразовывать его в соответствующее\n\t\tназвание дня недели.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр <code class=\"code inline\">numFormat</code>, который\n\t\tбудет принимать параметром число и отделять\n\t\tпробелами тройки цифр в этом числе. Например,\n\t\tиз числа <code class=\"number inline\">12345678</code> фильтр должен сделать\n\t\t<code class=\"number inline\">12 345 678</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/filters-chains/","content":"\n\t\t\t\t<h1>Цепочки фильтров в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tФильтры можно объединять в цепочки. Пусть\n\tфильтр <code class=\"code inline\">capitalize</code>, который делает\n\tзаглавной и фильтр <code class=\"code inline\">lowercase</code>, который\n\tпереводит все буквы строки в нижний регистр.\n</p>\n<p>\n\tПусть в свойстве <code class=\"code inline\">message</code> хранится\n\tстрока в верхнем регистре:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tmessage: 'HELLO',\n\t}\n}</code>\n</div>\n<p>\n\tДавайте применим наши фильтры последовательно\n\tдруг за другом. Сначала преобразуем\n\tбуквы строки в нижний регистр,\n\tа затем сделаем первую букву заглавной:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ message | lowercase | capitalize }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр, который будет находить квадратный\n\t\tкорень из числа. Сделайте также фильтр, который\n\t\tбудет округлять дробь до <code class=\"number inline\">2</code>-х знаков\n\t\tв дробной части. Примените комбинацию данных\n\t\tфильтров к какой-нибудь дроби.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/filters-parameters/","content":"\n\t\t\t\t<h1>Параметры в фильтрах в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ фильтры можно передавать параметры,\n\tуказывая их в круглых скобках.\n\tВ этом случае в функцию фильтра\n\tпервым параметром попадет то,\n\tк чему применяется фильтр,\n\tа в остальные параметры функции\n\tпо очереди попадут параметры\n\tфильтра.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть в свойстве <code class=\"code inline\">num</code>\n\tхранится некоторое число:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnum: 100,\n\t}\n}</code>\n</div>\n<p>\n\tДавайте сделаем фильтр <code class=\"code inline\">money</code>,\n\tкоторый будет добавлять указанный\n\tзначок после числа:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">filters: {\n\tcapitalize: function(num, sign) {\n\t\treturn num + sign;\n\t}\n}</code>\n</div>\n<p>\n\tДавайте теперь применим наш фильтр\n\tк выводимому числу, добавив\n\tему в конец знак доллара:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ num | money('$') }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь добавим в конец\n\tзнак евро:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ num | money('€') }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте фильтр, который будет округлять\n\t\tчисло до заданного количества знаков\n\t\tв дробной части. Пусть это количество\n\t\tпередается параметром.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/computed-properties/","content":"\n\t\t\t\t<h1>Вычисляемые свойства в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно задавать свойства, которые\n\tбудут реактивно вычисляться на\n\tоснове других свойств. Такие свойства\n\tназываются <dfn>вычисляемыми</dfn>.\n\tОни располагаются в настройке\n\t<code class=\"code inline\">computed</code>.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть в свойствах хранится\n\tимя и фамилия юзера:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tname: 'john',\n\t\tsurn: 'smit',\n\t}\n}</code>\n</div>\n<p>\n\tДавайте сделаем свойство\n\t<code class=\"code inline\">full</code>, которое будет\n\tсодержать полное имя с фамилией:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">computed: {\n\tfull: function() {\n\t\treturn this.name + ' ' + this.surn;\n\t}\n}</code>\n</div>\n<p>\n\tВыведем в представлении содержимое\n\tнаших свойств:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ name }}&lt;/p&gt;\n\t&lt;p&gt;{{ surn }}&lt;/p&gt;\n\t&lt;p&gt;{{ full }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tВычисляемые свойства изменяются\n\tреактивно. Это значит, что если\n\tмы поменяем имя или фамилию,\n\tто и наше свойство <code class=\"code inline\">full</code>\n\tавтоматически реактивно изменится\n\tи мы сразу увидим изменения\n\tна экране.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tПусть в свойстве <code class=\"code inline\">cost</code>\n\t\tхранится цена продукта,\n\t\tа в свойстве <code class=\"code inline\">amount</code> - количество\n\t\tэтих продуктов. Сделайте вычисляемое\n\t\tсвойство <code class=\"code inline\">price</code>, которое\n\t\tбудет содержать полную\n\t\tстоимость продуктов (цена умножить\n\t\tна количество)\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте кнопку, клик на которую\n\t\tбудет изменять свойство <code class=\"code inline\">cost</code>.\n\t\tПроверьте, что вычисляемое свойство\n\t\tтакже будет изменяться при этом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/basis/events-modifiers/","content":"\n\t\t\t\t<h1>Модификаторы событий в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://v3.ru.vuejs.org/ru/guide/events.html#%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82%D0%BE%D1%80%D1%8B-%D1%81%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D0%B8\">раздел \"Модификаторы событий\"</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана ссылка. Привяжите к ней обработчик\n\t\tклика. Сделайте так, чтобы клик\n\t\tпо ссылке не приводил к переходу\n\t\tпо ней.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Привяжите к ней обработчик\n\t\tклика. Сделайте так, чтобы срабатывал\n\t\tтолько первый клик по кнопке.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/visibility/","content":"\n\t\t\t\t<h1>Показ по условию в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСледующая директива, которую мы изучим, называется\n\t<code class=\"code inline\">v-if</code>. С ее помощью можно показывать\n\tили скрывать элементы. Как эта директива\n\tработает: параметром она принимает любое\n\tсвойство объекта <code class=\"code inline\">data</code>. Если это свойство\n\tимеет значение <code class=\"code inline\">true</code> - то элемент будет\n\tпоказан, а если <code class=\"code inline\">false</code> - то скрыт.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть у нас есть абзац с атрибутом <code class=\"code inline\">v-if</code>.\n\tЗначением этого атрибута пусть служит свойство\n\t<code class=\"code inline\">visible</code>, вот так:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"visible\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте установим значение нашего свойства\n\tв <code class=\"code inline\">true</code>. В этом случае\n\tабзац будет показан:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tvisible: true,\n\t}\n}</code>\n</div>\n<p>\n\tА вот если <code class=\"code inline\">visible</code> поставить в значение\n\t<code class=\"code inline\">false</code>, то абзац будет скрыт:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tvisible: false,\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится свойство <code class=\"code inline\">visible</code>.\n\t\tПусть у вас также есть два абзаца. Сделайте\n\t\tтак, чтобы первый абзац был показан на экране,\n\t\tесли свойство <code class=\"code inline\">visible</code> равно <code class=\"code inline\">true</code>,\n\t\tа второй абзац, наоборот, показан, если свойство\n\t\t<code class=\"code inline\">visible</code> равно <code class=\"code inline\">false</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/invertion/","content":"\n\t\t\t\t<h1>Инвертирование условия в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно инвертировать условие с помощью\n\tвосклицательного знака:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"!visible\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tВ таком случае абзац будет показан, если\n\t<code class=\"code inline\">visible</code> имеет значение <code class=\"code inline\">false</code> и\n\tскрыт - если <code class=\"code inline\">true</code>.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tИнвертируйте условие:\n\t</p>\n\t<div class=\"block\" data-file=\"App.vue\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"hidden\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/reactivity/","content":"\n\t\t\t\t<h1>Реактивное условие в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте сделаем так, чтобы условие\n\tбыло реактивным. К примеру сделаем\n\tтак, чтобы элемент прятался по нажатию\n\tна кнопку. Пусть у нас есть следующий\n\tабзац:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"visible\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем так, чтобы наш абзац\n\tизначально был показан:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tvisible: true,\n\t}\n}</code>\n</div>\n<p>\n\tСделаем теперь кнопку, по нажатию\n\tна которую абзац будет скрываться:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"hide\"&gt;hide&lt;/button&gt;\n\t&lt;p v-if=\"visible\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПривязанный метод будет менять\n\tсвойство <code class=\"code inline\">visible</code> на <code class=\"code inline\">false</code>,\n\tтем самым заставляя наш\n\tабзац скрыться:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\thide: function() {\n\t\tthis.visible = false;\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан абзац и кнопка. Пусть абзац\n\t\tизначально скрыт. Сделайте кнопку,\n\t\tкоторая будет показывать абзац.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан абзац и две кнопки. Пусть\n\t\tпервая кнопка показывает абзац,\n\t\tа вторая - скрывает его.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tна экране всегда была видна только одна из\n\t\tкнопок: если абзац показан, то кнопка для\n\t\tсокрытия, а если скрыт - то кнопка для показа.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/elements-toggling/","content":"\n\t\t\t\t<h1>Тогглинг элементов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь сделаем кнопку, которая\n\tбудет тогглить абзац, то есть по первому\n\tклику показывать его, а по второму\n\tклику - прятать. Для этого по клику\n\tна кнопку будем вызывать метод\n\t<code class=\"code inline\">toggle</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"toggle\"&gt;toggle&lt;/button&gt;\n\t&lt;p v-if=\"visible\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tВ коде метода нужно будет брать\n\tзначение свойства <code class=\"code inline\">visible</code>\n\tи инвертировать его на его\n\tпротивоположность:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">toggle: function() {\n\tthis.visible = !this.visible;\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны три абзаца и три кнопки.\n\t\tСделайте так, чтобы каждая кнопка\n\t\tтогглила свой абзац.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/toggling-text/","content":"\n\t\t\t\t<h1>Смена текста при тогглинге в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте сделаем так, чтобы при тогглинге\n\tна кнопке был написан текст той операции,\n\tкоторую кнопка будет выполнять в данный\n\tмомент. Для этого нам необходимо использовать\n\t<a href=\"/ru/javascript/book/prime/conditions/ternary-operator/\">тернарный\n\tоператор</a> следующим образом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"toggle\"&gt;\n\t\t{{ visible ? 'hide' : 'show' }}\n\t&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны три абзаца и три кнопки.\n\t\tСделайте так, чтобы каждая кнопка\n\t\tтогглила свой абзац и при этом\n\t\tизменяла свой текст соответствующим образом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/v-else/","content":"\n\t\t\t\t<h1>Директива v-else в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДиректива <code class=\"code inline\">v-if</code> может также работать\n\tв комплекте с <code class=\"code inline\">v-else</code>. Давайте посмотрим,\n\tкак это выглядит на практике.\n\tПусть свойство <code class=\"code inline\">isAuth</code> содержит то,\n\tавторизован пользователь или нет:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisAuth: true, // тут или true, или false\n\t}\n}</code>\n</div>\n<p>\n\tСделаем так, чтобы в зависимости от значения\n\t<code class=\"code inline\">isAuth</code> выводилось или одно сообщение,\n\tили другое:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"isAuth\"&gt;+++&lt;/p&gt;\n\t&lt;p v-else&gt;---&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано свойство <code class=\"code inline\">isAdmin</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisAdmin: true,\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВ зависимости от значения свойства\n\t\tвыведите или один текст,\n\t\tили другой.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/complex/","content":"\n\t\t\t\t<h1>Сложные условия в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ директиве <code class=\"code inline\">v-if</code> можно делать\n\tболее сложные условия. Пусть, к примеру,\n\tв свойстве <code class=\"code inline\">num</code> может\n\tбыть одно из чисел <code class=\"number inline\">1</code>, <code class=\"number inline\">2</code> или\n\t<code class=\"number inline\">3</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnum: 3, // пусть сейчас там 3\n\t}\n}</code>\n</div>\n<p>\n\tДавайте теперь сделаем три абзаца, из\n\tкоторых будет показан только один\n\tв зависимости от значения\n\tсвойства <code class=\"code inline\">num</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"num === 1\"&gt;one&lt;/p&gt;\n\t&lt;p v-if=\"num === 2\"&gt;two&lt;/p&gt;\n\t&lt;p v-if=\"num === 3\"&gt;three&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tМожно делать и более сложные условия:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"num === 1 || num === 3\"&gt;\n\t\tone or two\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДано свойство <code class=\"code inline\">day</code>, в котором записан\n\t\tтекущий день недели. Пусть также у вас есть\n\t\tсемь абзацев, в каждом из которых написано\n\t\tназвание дня недели. Сделайте так, чтобы на экране\n\t\tбыл виден только абзац, содержащий название\n\t\tтекущего дня недели.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/v-else-if/","content":"\n\t\t\t\t<h1>Директива v-else-if в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВместо нескольких <code class=\"code inline\">v-if</code> можно использовать\n\tконструкции <code class=\"code inline\">v-else-if</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-if=\"num == 1\"&gt;one&lt;/p&gt;\n\t&lt;p v-else-if=\"num == 2\"&gt;two&lt;/p&gt;\n\t&lt;p v-else-if=\"num == 3\"&gt;three&lt;/p&gt;\n\t&lt;p v-else&gt;error&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующее:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\tage: 25,\n}</code>\n\t</div>\n\t<p>\n\t\tЕсли свойство <code class=\"code inline\">age</code> меньше 18 - выведите\n\t\tна экран <code class=\"string inline\">'подросток'</code>, если оно от\n\t\t<code class=\"number inline\">19</code> до 25 - выведите на экран <code class=\"string inline\">'молодой\n\t\tчеловек'</code>, а если более 26 - выведите\n\t\tна экран <code class=\"string inline\">'мужчина'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/conditional-groups/","content":"\n\t\t\t\t<h1>Условные группы в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\t Иногда нам нужно наложить условие\n\t сразу на группу тегов. В этом\n\t случае мы можем объединить их\n\t общим родителем и наложить\n\t условие на него:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;div v-if=\"isAuth\"&gt;\n\t\t&lt;p&gt;+++&lt;/p&gt;\n\t\t&lt;p&gt;+++&lt;/p&gt;\n\t\t&lt;p&gt;+++&lt;/p&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tИногда нам не хотелось бы объединять теги\n\tобщим родителем. В этом случае\n\tих можно объединить тегом <code class=\"code inline\">template</code>.\n\tЭтот тег объединяет другие теги,\n\tно не попадает в итоговую верстку.\n\tДавайте наложим условие на этот тег:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;template v-if=\"isAuth\"&gt;\n\t\t&lt;p&gt;+++&lt;/p&gt;\n\t\t&lt;p&gt;+++&lt;/p&gt;\n\t\t&lt;p&gt;+++&lt;/p&gt;\n\t&lt;template&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть у вас даны три абзаца и кнопка.\n\t\tСделайте так, чтобы по нажатию на кнопку\n\t\tэти абзацы скрывались.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/conditions/v-show/","content":"\n\t\t\t\t<h1>Директива v-show в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЕщё одним вариантом условного отображения\n\tявляется директива <code class=\"code inline\">v-show</code>.\n\tИспользуется очень похоже:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-show=\"isAuth\"&gt;\n\t\t+++\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tОтличия в том, что элемент с <code class=\"code inline\">v-show</code> будет всегда\n\tотрисовываться и оставаться в DOM, а переключаться\n\tбудет лишь его CSS свойство <a href=\"/ru/markup/manual/css/property/display/\"><code class=\"code inline\">display</code></a>.\n</p>\n<p>\n\tДиректива <code class=\"code inline\">v-if</code> выполняет \"настоящую\"\n\tусловную отрисовку, так как гарантирует,\n\tчто слушатели событий и дочерние компоненты\n\tвнутри блока должным образом уничтожаются\n\tи воссоздаются при переключениях условия.\n</p>\n<p>\n\tДиректива <code class=\"code inline\">v-if</code> также ленивая: если условие\n\tложно на момент первоначальной отрисовки,\n\tто она ничего не сделает - условный блок\n\tне будет отрисован до тех пор,\n\tпока условие не станет истинным.\n</p>\n<p>\n\tДля сравнения, <code class=\"code inline\">v-show</code> намного проще - элемент\n\tвсегда отрисовывается, вне зависимости от\n\tисходного состояния с переключением на основе CSS.\n</p>\n<p>\n\tВ целом, у <code class=\"code inline\">v-if</code> выше затраты на переключение,\n\tв то время как <code class=\"code inline\">v-show</code> имеет больше затрат\n\tна первичную отрисовку. Так что используйте <code class=\"code inline\">v-show</code>,\n\tесли переключения будут частыми,\n\tи предпочитайте <code class=\"code inline\">v-if</code>, если условие\n\tможет и не измениться во время исполнения.\n</p>\n<div class=\"notice\">\n\t<p>\n\t\tДирективу <code class=\"code inline\">v-show</code> нельзя использовать на элементе\n\t\t<code class=\"code inline\">template</code> и она не работает с <code class=\"code inline\">v-else</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан абзац и кнопка. Сделайте так,\n\t\tчтобы абзац тогглился по нажатию\n\t\tна кнопку.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, в чем отличия директив\n\t\t<code class=\"code inline\">v-show</code> и <code class=\"code inline\">v-if</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, когда лучше использовать\n\t\tдирективу <code class=\"code inline\">v-show</code>, а когда - <code class=\"code inline\">v-if</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРасскажите, какие ограничения\n\t\tимеет директива <code class=\"code inline\">v-show</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/arrays/","content":"\n\t\t\t\t<h1>Перебор массивов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tVue позволяет формировать теги в цикле.\n\tЭто делается с помощью специальной\n\tдирективы <code class=\"code inline\">v-for</code>. Давайте посмотрим,\n\tкак она работает для массивов.\n\tДля этого сделаем следующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: ['a', 'b', 'c'],\n\t}\n}</code>\n</div>\n<p>\n\tДавайте выведем каждый элемент\n\tэтого массива в отдельном абзаце.\n\tДля этого в представлении\n\tдля начала сделаем абзац:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tТеперь напишем нашему абзацу\n\tдирективу <code class=\"code inline\">v-for</code>. Значением\n\tэтой директивы следует указать\n\tимя перебираемого массива и\n\tпеременную, в которую последовательно\n\tбудут попадать элементы этого\n\tмассива. В нашем случае имя\n\tмассива будет <code class=\"code inline\">arr</code>,\n\tа для переменной мы придумаем\n\tимя <code class=\"code inline\">elem</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"elem in arr\"&gt;&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tВ результате наш абзац повторится\n\tстолько раз, сколько элементов\n\tв нашем массиве. Давайте будем выводить\n\tперебираемые элементы в тексте\n\tнаших абзацев:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"elem in arr\"&gt;{{ elem }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в <code class=\"code inline\">data</code> хранится следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: [1, 2, 3, 4, 5],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите каждый элемент этого\n\t\tмассива в своем теге <code class=\"code inline\">div</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: [1, 2, 3, 4, 5],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите квадрат каждого элемента\n\t\tэтого массива в своем теге <code class=\"code inline\">div</code>.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: [1, 2, 3, 4, 5],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите элементы этого\n\t\tмассива в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/array-keys/","content":"\n\t\t\t\t<h1>Получение ключей при переборе массивов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИногда кроме элементов массива, мы хотели\n\tбы получить доступ еще и к ключам. Для этого\n\tиспользуется следующий расширенный\n\tсинтаксис:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"(elem, key) in arr\"&gt;\n\t\t {{ key }} {{ elem }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tС ключами при выводе можно делать\n\tразличные операции. К примеру,\n\tсделаем так, чтобы номера начинались\n\tс единицы:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"(elem, key) in arr\"&gt;\n\t\t {{ key + 1 }} {{ elem }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: ['x', 'y', 'z'],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tВыведите ключи этого массива\n\t\tв виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/objects/","content":"\n\t\t\t\t<h1>Перебор объектов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОбъекты также перебираются с помощью\n\tдирективы <code class=\"code inline\">v-for</code>. Давайте\n\tпосмотрим, как это делается.\n\tПусть у нас есть следующий\n\tобъект:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tobj: {a: 1, b: 2, c: 3},\n\t}\n}</code>\n</div>\n<p>\n\tПереберем этот объект циклом\n\tи выведем его элементы:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"elem in arr\"&gt;\n\t\t{{ elem }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь выведем и ключи,\n\tи элементы:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"(elem, key) in arr\"&gt;\n\t\t{{ key }} {{ elem }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь выведем еще и порядковые\n\tномера элементов в объекте:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"(elem, key, index) in arr\"&gt;\n\t\t{{ index }}\n\t\t{{ key }}\n\t\t{{ elem }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий объект:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">{\n\tuser1: '100$',\n\tuser2: '200$',\n\tuser3: '300$',\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью <code class=\"code inline\">v-for</code> выведите на экран следующее:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;100$&lt;/li&gt;\n\t&lt;li&gt;200$&lt;/li&gt;\n\t&lt;li&gt;300$&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий объект:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">{\n\tuser1: '100$',\n\tuser2: '200$',\n\tuser3: '300$',\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью <code class=\"code inline\">v-for</code> выведите на экран следующее:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;user1 - 100$&lt;/li&gt;\n\t&lt;li&gt;user2 - 200$&lt;/li&gt;\n\t&lt;li&gt;user3 - 300$&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте предыдущую задачу так, чтобы\n\t\tв конце каждой <code class=\"code inline\">li</code> стоял еще и порядковый\n\t\tномер элемента в объекте. Вот так:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;user1 - 100$ - 0&lt;/li&gt;\n\t&lt;li&gt;user2 - 200$ - 1&lt;/li&gt;\n\t&lt;li&gt;user3 - 300$ - 2&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПеределайте предыдущую задачу так, чтобы\n\t\tномера начинались не с нуля, а с единицы. Вот так:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;user1 - 100$ - 1&lt;/li&gt;\n\t&lt;li&gt;user2 - 200$ - 2&lt;/li&gt;\n\t&lt;li&gt;user3 - 300$ - 3&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/tags-group/","content":"\n\t\t\t\t<h1>Перебор группы тегов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\t Иногда нам нужно формировать в цикле\n\t сразу на группу тегов. В этом\n\t случае мы можем объединить их\n\t общим родителем и применить\n\t цикл к нему:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;div v-for=\"elem in arr\"&gt;\n\t\t&lt;p&gt;{{ elem }}&lt;/p&gt;\n\t\t&lt;hr&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\t Иногда нам не хотелось бы объединять теги\n\t общим родителем. В этом случае\n\t их можно объединить тегом\n\t <code class=\"code inline\">template</code>, применив цикл\n\t к этому тегу. Этот тег объединяет\n\t другие теги, но не попадает\n\t в итоговую верстку.\n\t Давайте попробуем:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;template v-for=\"elem in arr\"&gt;\n\t\t&lt;p&gt;{{ elem }}&lt;/p&gt;\n\t\t&lt;hr&gt;\n\t&lt;/template&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: [1, 2, 3],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tСформируйте с помощью этого\n\t\tмассива следующую верстку:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;div&gt;\n\t&lt;p&gt;1&lt;/p&gt;\n\t&lt;p class=\"divider\"&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;2&lt;/p&gt;\n\t&lt;p class=\"divider\"&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n\t&lt;p&gt;3&lt;/p&gt;\n\t&lt;p class=\"divider\"&gt;&lt;/p&gt;\n&lt;/div&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: [1, 2, 3],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tСформируйте с помощью этого\n\t\tмассива следующую верстку:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;1&lt;/li&gt;\n\t&lt;li class=\"divider\"&gt;&lt;/li&gt;\n\t&lt;li&gt;2&lt;/li&gt;\n\t&lt;li class=\"divider\"&gt;&lt;/li&gt;\n\t&lt;li&gt;3&lt;/li&gt;\n\t&lt;li class=\"divider\"&gt;&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/array-of-objects/","content":"\n\t\t\t\t<h1>Перебор массива объектов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tНаучимся теперь перебирать массив\n\tобъектов. Посмотрим на примере.\n\tПусть есть следующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tname: 'name1',\n\t\t\t\tsurn: 'surn1',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'name2',\n\t\t\t\tsurn: 'surn2',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'name3',\n\t\t\t\tsurn: 'surn3',\n\t\t\t},\n\t\t];\n\t}\n}</code>\n</div>\n<p>\n\tДавайте переберем наш массив циклом\n\tи для каждого юзера в отдельном абзаце\n\tбудем выводить его имя и фамилию:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"user in users\"&gt;\n\t\t{{ user.name }}\n\t\t{{ user.surn }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\threfs: [\n\t\t\t{href: '1.html', text: 'text1'},\n\t\t\t{href: '2.html', text: 'text2'},\n\t\t\t{href: '3.html', text: 'text3'},\n\t\t]\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла сформируйте\n\t\tследующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;ul&gt;\n\t&lt;li&gt;&lt;a href=\"1.html\"&gt;text1&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"2.html\"&gt;text2&lt;/a&gt;&lt;/li&gt;\n\t&lt;li&gt;&lt;a href=\"3.html\"&gt;text3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;</code>\n\t</div>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив с продуктами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tproducts: [\n\t\t\t{\n\t\t\t\tname: 'product1',\n\t\t\t\tprice: 100,\n\t\t\t\tquantity: 5\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'product2',\n\t\t\t\tprice: 200,\n\t\t\t\tquantity: 4\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'product3',\n\t\t\t\tprice: 300,\n\t\t\t\tquantity: 3\n\t\t\t},\n\t\t]\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tС помощью цикла сформируйте\n\t\tследующий код:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;table&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;product1&lt;/td&gt;\n\t\t&lt;td&gt;100&lt;/td&gt;\n\t\t&lt;td&gt;5&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;product2&lt;/td&gt;\n\t\t&lt;td&gt;200&lt;/td&gt;\n\t\t&lt;td&gt;4&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;product3&lt;/td&gt;\n\t\t&lt;td&gt;300&lt;/td&gt;\n\t\t&lt;td&gt;3&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/range/","content":"\n\t\t\t\t<h1>Цикл в диапазоне в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно сделать так, чтобы цикл повторился\n\tзаданное количество раз. Это делается\n\tследующим образом:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"num in 10\"&gt;\n\t\t{{ num }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте <code class=\"number inline\">30</code> абзацев,\n\t\tзаполненных целыми числами\n\t\tпо порядку.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/conditions/","content":"\n\t\t\t\t<h1>Условия в циклах в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри переборе элементов циклами\n\tможно накладывать условия.\n\tНо директивы <code class=\"code inline\">v-for</code> и <code class=\"code inline\">v-if</code>\n\tнужно писать на разных тегах,\n\tиначе будет конфликт. Во избежания\n\tконфликта директиву <code class=\"code inline\">v-for</code>\n\tприменяют к тегу <code class=\"code inline\">template</code>,\n\tа директиву <code class=\"code inline\">v-if</code> - непосредственно\n\tк вставляемому тегу.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть у нас есть следующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: [1, 2, 3, 4, 5],\n\t}\n}</code>\n</div>\n<p>\n\tПереберем этот массив циклом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"elem in arr\"&gt;\n\t\t\t{{ elem }}\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь наложим условие на\n\tпоказываемые элементы:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;template v-for=\"elem in arr\"&gt;\n\t\t\t&lt;li v-if=\"elem % 2 === 0\"&gt;\n\t\t\t\t{{ elem }}\n\t\t\t&lt;/li&gt;\n\t\t&lt;/template&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: [1, -2, 3, -4, 5],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tПереберите этот массив циклом\n\t\tи выведите только положительные\n\t\tэлементы массива.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/key-attribute/","content":"\n\t\t\t\t<h1>Атрибут key в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПри обновлении Vue списка элементов,\n\tотрисованного директивой <code class=\"code inline\">v-for</code>, по умолчанию\n\tиспользуется стратегия обновления \"на месте\".\n\tЕсли порядок элементов массива или объекта\n\tизменился, Vue не станет перемещать элементы DOM,\n\tа просто обновит каждый элемент \"на месте\",\n\tчтобы он отображал новые данные по соответствующему индексу.\n</p>\n<p>\n\tЧтобы подсказать Vue, как определять идентичность\n\tкаждого элемента, и, таким образом, переиспользовать\n\tи упорядочивать существующие элементы, необходимо\n\tуказать уникальный атрибут <code class=\"code inline\">key</code> для каждого элемента.\n</p>\n<p>\n\tБез ключей Vue использует алгоритм, который минимизирует\n\tперемещения элементов и по-максимуму будет стараться\n\tизменять/переиспользовать элементы одного типа.\n\tПри использовании ключей элементы будут переупорядочиваться\n\tв соответствии с изменением порядка следования ключей,\n\tа элементы, чьи ключи уже отсутствуют,\n\tбудут всегда удаляться/уничтожаться.\n</p>\n<p>\n\tРекомендуется всегда указывать атрибут <code class=\"code inline\">key</code>\n\tс <code class=\"code inline\">v-for</code>, кроме случаев когда итерируемое содержимое\n\tDOM простое, или когда сознательно полагаетесь\n\tна стратегию обновления по умолчанию\n\tдля улучшения производительности.\n</p>\n<p>\n\tКак правило вопрос добавления ключей\n\tвставет при переборе массива\n\tобъектов. В этом случае одним\n\tиз ключей объекта является уникальное\n\tполе, например, <code class=\"code inline\">id</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsurn: 'surn1',\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsurn: 'surn2',\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsurn: 'surn3',\n\t\t\t},\n\t\t];\n\t}\n}</code>\n</div>\n<p>\n\tДавайте переберем приведенный массив циклом,\n\tуказав соответствующие ключи:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"user in users\" :key=\"user.id\"&gt;\n\t\t{{ user.name }}\n\t\t{{ user.surn }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПереберите циклом следующий массив\n\t\tи выведите названия продуктов\n\t\tв виде списка <code class=\"code inline\">ul</code>:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tproducts: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'product1',\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'product2',\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'product3',\n\t\t\t},\n\t\t]\n\t}\n}</code>\n\t</div>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/loops/reactivity/","content":"\n\t\t\t\t<h1>Реактивность массивов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРеактивность срабатывает даже при изменениях\n\tмассивов, выводимых через <code class=\"code inline\">v-for</code>.\n\tДавайте для примера сделаем так, чтобы\n\tпо нажатию на кнопку в массив реактивно\n\tдобавлялся новый элемент и изменения\n\tмгновенно происхоили и на экране.\n</p>\n<p>\n\tДавайте реализуем описанное.\n\tПусть у нас в есть массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: ['a', 'b', 'c'],\n\t}\n}</code>\n</div>\n<p>\n\tВыведем элементы этого\n\tмассива в цикле:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"elem in arr\"&gt;\n\t\t{{ elem }}\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем кнопку, по нажатию на которую\n\tв массив будет добавляться новый элемент:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p v-for=\"elem in arr\"&gt;\n\t\t{{ elem }}\n\t&lt;/p&gt;\n\t&lt;button @click=\"add\"&gt;add&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tРеализуем соответствующий метод:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tadd: function() {\n\t\tthis.arr.push('xxx');\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Дан массив. Выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>. Сделайте\n\t\tтак, чтобы по нажатию на кнопку в конец этого\n\t\tсписка добавился новый пункт.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Дан массив. Выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>. Сделайте\n\t\tтак, чтобы каждый раз по нажатию на кнопку\n\t\tсписка удалялся первый пункт.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Дан массив. Выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>. Сделайте\n\t\tтак, чтобы каждый раз по нажатию на кнопку\n\t\tсписка удалялся последний пункт.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Дан массив. Выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>. Сделайте\n\t\tтак, чтобы каждый раз по нажатию на кнопку\n\t\tсписка удалялся предпоследний пункт.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Дан массив. Выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>. Сделайте\n\t\tтак, чтобы по нажатию на кнопку\n\t\tпункты списка отсортировались.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана кнопка. Дан массив. Выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>. Сделайте\n\t\tтак, чтобы по нажатию на кнопку\n\t\tпункты списка выстроились\n\t\tв обратном порядке.\n\t</p>\n</div>\n\n<h2>Исключения</h2>\n<div class=\"notice\">\n\t<p>\n\t\tИз-за ограничений JavaScript, Vue не способен\n\t\tзаметить следующие изменения в массиве: прямую\n\t\tустановку элемента по индексу: <code class=\"code inline\">items[ключ]\n\t\t= новоеЗначение</code> и явное изменение длины\n\t\tмассива, например: <code class=\"code inline\">items.length = новаяДлина</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/component/","content":"\n\t\t\t\t<h1>Стилизация компонента в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДля стилизации компонентов в файле\n\tкомпонента нужно написать тег\n\t<code class=\"code inline\">style</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\t\n&lt;/script&gt;\n&lt;template&gt;\n\t\n&lt;/template&gt;\n&lt;style&gt;\n\t\n&lt;/style&gt;</code>\n</div>\n<p>\n\tВ этом теге можно будет писать CSS\n\tкод, при этом он будет применяться\n\tтолько к HTML коду компонента,\n\tи не будет применен где-то вовне.\n\tЭто сделано специально для удобства.\n</p>\n<p>\n\tДавайте посмотрим на примере.\n\tПусть у нас есть некоторые абзацы:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;\n\t\t1\n\t&lt;/p&gt;\n\t&lt;p&gt;\n\t\t2\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте покрасим их в красный цвет:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;style&gt;\n\tp {\n\t\tcolor: red;\n\t}\n&lt;/style&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСтилизуйте теги вашего компонента.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/attribute-class/","content":"\n\t\t\t\t<h1>Атрибут class в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРабота с атрибутом <code class=\"code inline\">class</code> происходит\n\tчерез директиву <code class=\"code inline\">v-bind</code> или\n\tее сокращенную форму.\n\tДавайте посмотрим на практике.\n\tПусть в свойстве <code class=\"code inline\">str</code>\n\tхранятся CSS классы тега,\n\tразделенные пробелами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tstr: 'active valid',\n\t}\n}</code>\n</div>\n<p>\n\t Добавим эти CSS классы\n\t в какой-нибудь тег:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :class=\"str\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан абзац. Дано свойство <code class=\"code inline\">cssClasses</code>,\n\t\tв котором записаны некоторые CSS классы.\n\t\tДобавьте эти классы к нашему абзацу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/class-object/","content":"\n\t\t\t\t<h1>Объект с CSS классами в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tCSS классы могут также хранится в\n\tобъектах. При этом имена классов\n\tбудут ключами объекта, а элементами\n\tобъекта будут логические значения.\n\tЕсли значение будет <code class=\"code inline\">true</code>,\n\tто класс будет добавлен элементу,\n\tа если <code class=\"code inline\">false</code>, то не будет.\n</p>\n<p>\n\tДавайте попробуем на практике.\n\tПусть у нас есть следующий\n\tобъект с классами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tobj: {\n\t\t\tactive: true,\n\t\t\tvalid:  false,\n\t\t},\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем этот объект к тегу:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :class=\"str\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий объект\n\t\tс CSS классами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tobj: {\n\t\t\tdone: true,\n\t\t\tselected:  false,\n\t\t},\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tПримените эти классы к какому-нибудь\n\t\tтегу. Проверьте, какие классы применились,\n\t\tа какие нет.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/object-reactivity/","content":"\n\t\t\t\t<h1>Реактивность объекта с CSS классами в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОбъект с CSS классами предназначен\n\tдля того, чтобы удобно было реактивно\n\tназначать классы элементам. \n\tДавайте посмотрим, как это делается.\n\tПусть у нас есть следующий\n\tобъект с классами:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tstyles: {\n\t\t\tdone: false,\n\t\t},\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем этот объект к тегу:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :class=\"str\"&gt;text&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПусть наличие класса <code class=\"value inline\">done</code>\n\tперечеркивает текст тега:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"css\">p.done {\n\ttext-decoration: line-through;\n}</code>\n</div>\n<p>\n\tСделаем кнопку, нажатие на которую\n\tбудет изменять объект со стилями,\n\tключая класс <code class=\"value inline\">done</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"setDone\"&gt;hide&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tНапишем соответствующий метод:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tsetDone: function() {\n\t\tthis.styles.done = true;\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий объект\n\t\tс CSS классами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tobj: {\n\t\t\thidden: true,\n\t\t},\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tПусть наличие этого класса\n\t\tпрячет элемент:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"css\">p.hidden {\n\tdisplay: none;\n}</code>\n\t</div>\n\t<p>\n\t\tПримените объект с классами\n\t\tк какому-нибудь тегу с текстом.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте кнопку, нажатие на которую\n\t\tбудет показывать элемент.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте кнопку, нажатие на которую\n\t\tбудет прятать элемент.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте кнопку, нажатие на которую\n\t\tбудет тогглить элемент (показывать,\n\t\tесли скрыт; скрывать, если показан).\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/inline-object/","content":"\n\t\t\t\t<h1>Инлайн объект с CSS классами в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tОбъект с CSS классами можно писать\n\tпрямо в качестве значения атрибута\n\t<code class=\"code inline\">class</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :class=\"{active: true, error: false}\"&gt;\n\t\ttext\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tКлассы, имена которых содержат дефис,\n\tнеобходимо брать в кавычки:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :class=\"{active: true, 'has-error': false}\"&gt;\n\t\ttext\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий объект\n\t\tс CSS классами:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">{active: true, valid: false}</code>\n\t</div>\n\t<p>\n\t\tПримените данный объект\n\t\tк какому-нибудь тегу.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/data-classes/","content":"\n\t\t\t\t<h1>CSS классы через data в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tCSS классы можно добавлять элементу\n\tв зависимости от значений свойств\n\tобъекта <code class=\"code inline\">data</code>. Посмотрим на\n\tпримере. Пусть у нас есть следующие\n\tсвойства:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisActive: true,\n\t\thasError: true,\n\t}\n}</code>\n</div>\n<p>\n\tДобавим элементу CSS классы в зависимости\n\tот значения наших свойств:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :class=\"{active: isActive, error: hasError}\"&gt;\n\t\ttext\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны следующие свойства:\n\t</p>\n\t<div class=\"block\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisValid: true,\n\t\tisDisabled: true,\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tСделайте так, чтобы в зависимости\n\t\tот значений этих свойств в тег\n\t\tдобавлялись соответствующие CSS классы.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/styles/attribute-style/","content":"\n\t\t\t\t<h1>Стилизация через атрибут style в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tCSS стили можно напрямую добавлять\n\tчерез атрибут <code class=\"code inline\">style</code>. Для этого\n\tв атрибут передается объект, в котором желаемые\n\tCSS свойства должны быть ключами этого объекта,\n\tа соответствующие значения CSS свойств -\n\tзначениями этого объекта.\n</p>\n<p>\n\tДавайте для примера покрасим какой-нибудь\n\tабзац в красный цвет и добавим границу зеленого\n\tцвета:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :style=\"{color: 'red', border: '1px solid green'}\"&gt;\n\t\ttext\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте теперь вместо границы установим ему\n\t<code class=\"code inline\">font-size</code> в <code class=\"unit inline\">30px</code>. Так как в\n\tобъекте не может быть ключа с дефисом, мы\n\tдолжны взять его в кавычки:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :style=\"{color: 'red', 'font-size': '30px'}\"&gt;\n\t\ttext\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tМожно также вместо <code class=\"code inline\">font-size</code> написать\n\t<code class=\"code inline\">fontSize</code> - это также будет работать:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p :style=\"{color: 'red', fontSize: '30px'}\"&gt;\n\t\ttext\n\t&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан абзац. Покрасьте его текст в зеленый\n\t\tцвет, а его фон - в желтый.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан абзац. Сделайте его текст\n\t\tжирным и курсивным.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/two-ways-data-binding/","content":"\n\t\t\t\t<h1>Двусторонняя привязка данных к инпутам в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tСейчас мы научимся работе с инпутами\n\tв фреймворке Vue. С их помощью мы будем\n\tреактивно добавлять данные на страницу.\n\tДавайте приступим. Пусть у нас есть инпут:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПусть также у нас есть\n\tсвойство <code class=\"code inline\">message</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tmessage: 'hello',\n\t}\n}</code>\n</div>\n<p>\n\tМы можем связать это свойство и инпут таким\n\tобразом, чтобы <i>изменение любого из них\n\tприводило к изменению другого</i>.\n\tЭто делается с помощью директивы <code class=\"code inline\">v-model</code>,\n\tв которой указывается свойство, привязанное\n\tк инпуту.\n</p>\n<p>\n\tДавайте привяжем к нашему инпуту свойство\n\t<code class=\"code inline\">message</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input v-model=\"message\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПосле запуска кода в инпуте будет стоять текст\n\tсвойства <code class=\"code inline\">message</code>. А если поредактировать\n\tданные в инпуте - свойство также изменится\n\tсоответствующим образом. Чтобы увидеть это,\n\tдавайте выведем введенное в инпут содержимое\n\tгде-нибудь в абзаце:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input v-model=\"message\"&gt;\n\t&lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут. Сделайте так, чтобы вводимый в\n\t\tинпут текст сразу выводился в абзаце под ним.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так,\n\t\tчтобы текст выводился в верхнем\n\t\tрегистре.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут. Пусть в него вводится число.\n\t\tСделайте так, чтобы в абзаце по мере\n\t\tввода выводился квадрат вводимого числа.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/event-getting-data/","content":"\n\t\t\t\t<h1>Получение данных формы по событию в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть кнопка и инпут, в который\n\tвводится число. Давайте по нажатию на кнопку\n\tвыведем квадрат введенного в инпут числа.\n\tПриступим к реализации.\n</p>\n<p>\n\tДля решения задачи нам понадобится\n\tдва свойства. Свойство <code class=\"code inline\">num</code>\n\tбудет изменяться по мере ввода\n\tданных в инпут, а в свойство\n\t<code class=\"code inline\">res</code> мы будем записывать\n\tрезультат возведения в квадрат:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnum: 0,\n\t\tres: 0\n\t}\n}</code>\n</div>\n<p>\n\tДавайте теперь сделаем инпут, привяжем\n\tк нему свойство <code class=\"code inline\">num</code>, сделаем кнопку,\n\tпо клику на которую будет выполнятся метод\n\t<code class=\"code inline\">calc</code>, и сделаем также абзац, в который\n\tбудет выводится результат:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;p&gt;{{ res }}&lt;/p&gt;\n\t&lt;input v-model=\"num\"&gt;\n\t&lt;button v-on:click=\"calc\"&gt;work&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте напишем реализацию метода <code class=\"code inline\">calc</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tcalc: function() {\n\t\tthis.res = this.num ** 2;\n\t}\n}</code>\n</div>\n<p>\n\tПолучится, что как только будет вызван метод\n\t<code class=\"code inline\">calc</code> (а это случится по нажатию на\n\tкнопку), в свойство <code class=\"code inline\">res</code> запишется\n\tрезультат и при этом одновременно выведется\n\tв нашем абзаце.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут. Дана кнопка. Дан абзац. В инпут\n\t\tвводится число. Сделайте так, чтобы по нажатию\n\t\tна кнопку абзаце появился квадратный корень\n\t\tэтого числа.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны два инпута. Дана кнопка. Дан абзац.\n\t\tВ каждый инпут вводятся числа. Сделайте так,\n\t\tчтобы по нажатию на кнопку в абзаце появилась\n\t\tсумма этих чисел.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДаны два инпута. Дана кнопка. В каждый инпут\n\t\tвводится какой-то текст. Сделайте так, чтобы\n\t\tпо нажатию на кнопку текст первого инпута\n\t\tстал во втором и наоборот.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут, <code class=\"number inline\">3</code> абзаца и кнопка. В инпут\n\t\tвводится ФИО пользователя через пробел. Сделайте\n\t\tтак, чтобы по нажатию на кнопку в первом\n\t\tабзаце появилась фамилия пользователя, во\n\t\tвтором - имя, а в третьем - отчество.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/textarea/","content":"\n\t\t\t\t<h1>Работа с textarea в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРабота с <code class=\"code inline\">textarea</code> происходит абсолютно\n\tтакже, как и с инпутами - через директиву\n\t<code class=\"code inline\">v-model</code>. Давайте посмотрим\n\tна практике. Сделаем свойство,\n\tкоторое будем привязывать к нашему\n\tтегу:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\ttext: '',\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем свойство к тегу:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;textarea v-model=\"text\"&gt;&lt;/textarea&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем еще и абзац, в который\n\tбудет выводиться вводимый текст:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;textarea v-model=\"text\"&gt;&lt;/textarea&gt;\n\t&lt;p&gt;{{ text }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан текстареа. Сделайте так, чтобы при наборе\n\t\tтекста в этом текстареа, этот текст одновременно\n\t\tвыводился в абзаце под ним.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан текстареа и кнопка. В текстареа вводится\n\t\tтекст. По нажатию на кнопку получите массив\n\t\tвведенных в текстареа слов и выведите элементы\n\t\tэтого массива в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/checkbox/","content":"\n\t\t\t\t<h1>Работа с чекбоксами в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь посмотрим, как происходит\n\tработа с чекбоксами. Пусть у нас есть\n\tследующий чекбокс:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input type=\"checkbox\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем свойство <code class=\"code inline\">checked</code>,\n\tкоторое будет управлять работой\n\tэтого чекбокса:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tchecked: true,\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем это свойство через <code class=\"code inline\">v-model</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input type=\"checkbox\" v-model=\"checked\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tЕсли чекбокс отмечен - свойство <code class=\"code inline\">checked</code>\n\tбудет иметь значение <code class=\"code inline\">true</code>, а если\n\tне отмечен - то <code class=\"code inline\">false</code>. Чтобы убедится\n\tв этом, можно вывести значение\n\tсвойства на экран, вот так:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input type=\"checkbox\" v-model=\"checked\"&gt;\n\t&lt;p&gt;{{ checked }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tС помощью тернарного оператора можно\n\tвыводить что-нибудь более осмысленное:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input type=\"checkbox\" v-model=\"checked\"&gt;\n\t&lt;p&gt;{{ checked ? 'yes' : 'no' }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан чекбокс. Дан абзац. С помощью директивы\n\t\t<code class=\"code inline\">v-if</code> сделайте следующее: если чекбокс\n\t\tотмечен - абзац должен быть показан, а если\n\t\tне отмечен - то скрыт.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/checkboxes-values-array/","content":"\n\t\t\t\t<h1>Массив значений чекбоксов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tПусть у нас есть группа чекбоксов. Можно\n\tсделать так, чтобы значение атрибутов <code class=\"code inline\">value</code>\n\tвсех отмеченных чекбоксов складывалось в массив.\n\tДля этого нужно к <code class=\"code inline\">v-model</code> этих чекбоксов\n\tпривязать массив. Давайте сделаем это.\n\tОбъявим свойство с массивом:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tarr: [],\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем этот массив к группе\n\tчекбоксов:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input type=\"checkbox\" v-model=\"arr\" value=\"v1\"&gt;\n\t&lt;input type=\"checkbox\" v-model=\"arr\" value=\"v2\"&gt;\n\t&lt;input type=\"checkbox\" v-model=\"arr\" value=\"v3\"&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tС помощью чекбоксов спросите у пользователя\n\t\tкакие языки он знает. Сложите полученные\n\t\tзначения в массив.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите полученный в предыдущей задаче\n\t\tмассив языков в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/radio/","content":"\n\t\t\t\t<h1>Работа с радиокнопками в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРабота с радиокнопками происходит\n\tаналогичным образом. Давайте посмотрим\n\tна практике. Для начала сделаем свойство\n\t<code class=\"code inline\">choice</code>, которое мы будем привязывать\n\tк группе радиокнопок:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tchoice: '',\n\t}\n}</code>\n</div>\n<p>\n\tСделаем теперь группу радиокнопок:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input name=\"radio\" type=\"radio\"&gt;\n\t&lt;input name=\"radio\" type=\"radio\"&gt;\n\t&lt;input name=\"radio\" type=\"radio\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tНапишем каждой из них директиву <code class=\"code inline\">v-model</code>\n\tи привяжем к ней свойство <code class=\"code inline\">choice</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input name=\"radio\" type=\"radio\" v-model=\"choice\"&gt;\n\t&lt;input name=\"radio\" type=\"radio\" v-model=\"choice\"&gt;\n\t&lt;input name=\"radio\" type=\"radio\" v-model=\"choice\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДадим также каждой из них свой <code class=\"code inline\">value</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input name=\"radio\" type=\"radio\" v-model=\"choice\" value=\"v1\"&gt;\n\t&lt;input name=\"radio\" type=\"radio\" v-model=\"choice\" value=\"v2\"&gt;\n\t&lt;input name=\"radio\" type=\"radio\" v-model=\"choice\" value=\"v3\"&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tТеперь в свойстве <code class=\"code inline\">choice</code> всегда будет\n\tлежать <code class=\"code inline\">value</code> отмеченной радиокнопочки:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\tyou choosed: {{ choice }}\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСпросите у пользователя с помощью радиокнопочек,\n\t\tкакой язык для него родной. Сделайте так, чтобы\n\t\tвыбранный язык вывелся в абзаце под радиокнопками.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу следующим\n\t\tобразом: пусть у нас есть три абзаца\n\t\tс текстом на разном языке. В зависимости\n\t\tот выбора пользователя выведите фразу на\n\t\tвыбранном им языке.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/select/","content":"\n\t\t\t\t<h1>Работа с селектами в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tРабота с селектами осуществляется\n\tаналогично - на тег селект вешается атрибут\n\t<code class=\"code inline\">v-model</code>, к нему привязывается свойство\n\tобъекта <code class=\"code inline\">data</code>. В это свойство будет\n\tпопадать текст выбранного тега <code class=\"code inline\">option</code>.\n</p>\n<p>\n\tСледующий код демонстрирует пример\n\tработы селекта:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tselected: 'value1', // значение по умолчанию\n\t}\n}</code>\n</div>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;select v-model=\"selected\"&gt;\n\t\t&lt;option&gt;value1&lt;/option&gt;\n\t\t&lt;option&gt;value2&lt;/option&gt;\n\t\t&lt;option&gt;value3&lt;/option&gt;\n\t&lt;/select&gt;\n\t\n\t&lt;p&gt;{{ selected }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСпросите у пользователя с помощью селекта\n\t\tв каком городе он живет. Сделайте так, чтобы\n\t\tвыбранный город вывелся в абзаце под селектом.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/select-loop/","content":"\n\t\t\t\t<h1>Формирование селекта в цикле в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tТеги <code class=\"code inline\">option</code> можно также создавать\n\tне в ручную, а с помощью цикла.\n\tСмотрите пример:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tselected: 'value1',\n\t\toptions: ['value1', 'value2', 'value3'],\n\t}\n}</code>\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;select v-model=\"selected\"&gt;\n\t\t&lt;option v-for=\"option in options\"&gt;{{ option }}&lt;/option&gt;\n\t&lt;/select&gt;\n\t\n\t&lt;p&gt;{{ selected }}&lt;/p&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте селект, с помощью которого\n\t\tможно будет выбрать название дня\n\t\tнедели.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте три селекта, с помощью которых\n\t\tможно будет выбрать день, месяц и год.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так,\n\t\tчтобы по умолчанию в селектах\n\t\tбыла выбрана текущая дата.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/elements-disabling/","content":"\n\t\t\t\t<h1>Блокировка элементов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно реактивно блокировать элементы\n\tформы с помощью атрибута <code class=\"code inline\">disabled</code>.\n\tДавайте попробуем. Сделаем соответствующее\n\tсвойство:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisDisabled: true,\n\t}\n}</code>\n</div>\n<p>\n\tПривяжем это свойство к кнопке:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button v-bind:disabled=\"isDisabled\"&gt;btn&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут. Сделайте кнопку, нажатие на которую\n\t\tбудет по очереди заблокировать и отблокировать\n\t\tнаш инпут.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tсостояние инпута регулировалось чекбоксом:\n\t\tесли чекбокс отмечен, то инпут отблокирован,\n\t\tа если не отмечен - то инпут заблокирован.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/keys-modifiers/","content":"\n\t\t\t\t<h1>Модификаторы клавиш в фреймворке Vue</h1>\n\t\t\t\t<div class=\"content\">\n<div class=\"ref\">\n\t<a href=\"https://v3.ru.vuejs.org/ru/guide/events.html#%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82%D0%BE%D1%80%D1%8B-%D0%BA%D0%BB%D0%B0%D0%B2%D0%B8%D1%88\">раздел \"Модификаторы клавиш\"</a>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан инпут. В этот инпут вводится текст.\n\t\tСделайте так, чтобы по нажатию на клавишу\n\t\t<code class=\"key inline\">Enter</code> введенный текст появился\n\t\tв абзаце под инпутом.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана ссылка. Сделайте так, чтобы по клику\n\t\tна эту ссылку, если в этот момент зажата\n\t\tклавиша <code class=\"key inline\">Ctrl</code>, в абзац под ссылкой вывелся\n\t\tкакой-нибудь текст.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДана ссылка. Сделайте так, чтобы по нажатию\n\t\tлевой кнопки мыши на эту ссылку в абзац под\n\t\tссылкой вывелся текст <code class=\"string inline\">'left'</code>, по нажатию\n\t\tправой кнопки мыши - текст <code class=\"string inline\">'right'</code>,\n\t\tа по нажатию средней кнопки - текст <code class=\"string inline\">'middle'</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/array-element-adding/","content":"\n\t\t\t\t<h1>Форма для добавления элементов массива в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте будем реактивно добавлять\n\tтекст из инпута в конец массива.\n\tПриступим к реализации.\n\tПусть у нас в дан массив:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: ['a', 'b', 'c', 'd', 'e'],\n\t}\n}</code>\n</div>\n<p>\n\tДобавим свойство <code class=\"code inline\">newItem</code>,\n\tподдерживающее работу инпута:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnewItem: '',\n\t\titems: ['a', 'b', 'c', 'd', 'e'],\n\t}\n}</code>\n</div>\n<p>\n\tВыведем содержимое массива\n\tв виде списка:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"(item, index) in items\" :key=\"index\"&gt;\n\t\t\t{{ item }}\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте теперь сделаем инпут и кнопку, по\n\tнажатию на которую текст инпута добавится\n\tв конец списка в качестве нового пункта:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input v-model=\"newItem\"&gt;\n\t&lt;button @click=\"addItem\"&gt;add&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПо нажатию на кнопку будет вызываться метод\n\t<code class=\"code inline\">addItem</code>, который будет брать текст из\n\tинпута и добавлять его как новый элемент\n\tв массив, что приведет к реактивному\n\tизменению списка:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\taddItem: function() {\n\t\tthis.items.push(this.newItem);\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив. Дан инпут. Дана кнопка. Выведите\n\t\tэлементы этого массива в виде списка <code class=\"code inline\">ul</code>.\n\t\tСделайте так, чтобы по нажатию на кнопку\n\t\tв конец списка добавился текст из инпута.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте предыдущую задачу так, чтобы\n\t\tновый пункт добавлялся в начало списка.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/array-element-removing/","content":"\n\t\t\t\t<h1>Кнопка для удаления элемента массива в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте сделаем кнопку реактивного\n\tудаления элементов из списка.\n\tПриступим к реализации.\n\tПусть у нас дан массив:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\titems: ['a', 'b', 'c', 'd', 'e'],\n\t}\n}</code>\n</div>\n<p>\n\tВыведем содержимое массива\n\tв виде списка:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"(item, index) in items\" :key=\"index\"&gt;\n\t\t\t{{ item }}\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем в каждом пункте списка кнопку\n\tдля удаления. В этой кнопке привяжем\n\tметод, параметром которого будем\n\tпередавать номер элемента массива,\n\tкоторого мы собираемся удалить:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"(item, index) in items\" :key=\"index\"&gt;\n\t\t\t{{ item }}\n\t\t\t&lt;button @click=\"removeItem(index)\"&gt;remove&lt;/button&gt;\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tРеализуем удаление в методе <code class=\"code inline\">removeItem</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tremoveItem: function(index) {\n\t\tthis.items.splice(index, 1);\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан массив. Выведите элементы этого массива\n\t\tв виде списка <code class=\"code inline\">ul</code>. Сделайте так, чтобы\n\t\tпо нажатию на любую <code class=\"code inline\">li</code> она удалялась\n\t\tиз списка.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/array-of-objects-removing/","content":"\n\t\t\t\t<h1>Кнопка для удаления из массива объектов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем кнопку\n\tдля удаления данных из массива объектов.\n\tПриступим к реализации.\n\tПусть есть следующий массив:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsurn: 'surn1',\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsurn: 'surn2',\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsurn: 'surn3',\n\t\t\t},\n\t\t];\n\t}\n}</code>\n</div>\n<p>\n\tВыведем содержимое массива\n\tв виде списка:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"user in users\" :key=\"user.id\"&gt;\n\t\t\t{{ user.name }}\n\t\t\t{{ user.surn }}\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем в каждом пункте списка кнопку\n\tдля удаления. В этой кнопке привяжем\n\tметод, параметром которого будем\n\tпередавать <code class=\"code inline\">id</code> элемента массива,\n\tкоторого мы собираемся удалить:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"user in users\" :key=\"user.id\"&gt;\n\t\t\t{{ user.name }}\n\t\t\t{{ user.surn }}\n\t\t\t&lt;button @click=\"removeItem(user.id)\"&gt;remove&lt;/button&gt;\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tРеализуем удаление в методе <code class=\"code inline\">removeItem</code>:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tremoveItem: function(index) {\n\t\tthis.users = this.users.filter((user) =&gt; {\n\t\t\tuser.id !== id;\n\t\t})\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив с данными работников:\n\t</p>\n\t<div class=\"block\" data-file=\"App.vue\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsalary: 100,\n\t\t\t\tage: 30,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsalary: 200,\n\t\t\t\tage: 40,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsalary: 300,\n\t\t\t\tage: 50,\n\t\t\t},\n\t\t],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\t Выведите данные работников в виде\n\t\t HTML таблицы. Сделайте колонку с\n\t\t ссылками для удаления работников.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/forms/array-of-objects-editing/","content":"\n\t\t\t\t<h1>Форма для редактирования массива объектов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем редактирование\n\tэлементов массива объекта. Сделаем\n\tдля этого кнопку, по нажатию на которую\n\tв пункте списка будет появляться форма\n\tдля редактирования. После заполнения\n\tформы мы будем жать на кнопку\n\tсохранения и изменения будут\n\tсохраняться в массиве,\n\tа форма будет убираться.\n</p>\n<p>\n\tПриступим к реализации.\n\tВ массиве объектов каждому объекту\n\tмы должны добавить еще одно\n\tполе, содержащее состояние\n\tюзера, показ или редактирование:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsurn: 'surn1',\n\t\t\t\tisEdit: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsurn: 'surn2',\n\t\t\t\tisEdit: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsurn: 'surn3',\n\t\t\t\tisEdit: false,\n\t\t\t},\n\t\t];\n\t}\n}</code>\n</div>\n<p>\n\tВыведем содержимое массива\n\tв виде списка:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"user in users\" :key=\"user.id\"&gt;\n\t\t\t{{ user.name }}\n\t\t\t{{ user.surn }}\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tТеперь разделим режим показа и\n\tрежим редактирования:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;ul&gt;\n\t\t&lt;li v-for=\"user in users\" :key=\"user.id\"&gt;\n\t\t\t&lt;template v-if=\"user.isEdit\"&gt;\n\t\t\t\t{{ name }}\n\t\t\t\t{{ surn }}\n\t\t\t\t&lt;button @click=\"edit(user)\"&gt;\n\t\t\t\t\tedit\n\t\t\t\t&lt;/button&gt;\n\t\t\t&lt;/template&gt;\n\t\t\t&lt;template v-else&gt;\n\t\t\t\t&lt;input v-model=\"user.name\"&gt;\n\t\t\t\t&lt;input v-model=\"user.surn\"&gt;\n\t\t\t\t&lt;button @click=\"save(user)\"&gt;\n\t\t\t\t\tsave\n\t\t\t\t&lt;/button&gt;\n\t\t\t&lt;/template&gt;\n\t\t&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tРеализуем методы:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods {\n\tedit(user) {\n\t\tuser.isEdit = true;\n\t},\n\tsave(user) {\n\t\tuser.isEdit = false;\n\t},\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tМодифицируйте задачу предыдущего урока\n\t\tтак, чтобы появилась колонка с ссылками\n\t\tдля редактирования каждого\n\t\tработника.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/intro/","content":"\n\t\t\t\t<h1>Работа с компонентами в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЕсли мы посмотрим на какой-нибудь сайт, то\n\tможем выделить на нем некоторые блоки: хедер,\n\tконтент, сайдбар, футер.\n</p>\n<p>\n\tПри создании сайта на Vue мы также можем\n\tиспользовать такие независимые блоки. Они\n\tпозволят нам лучше организовать наш код и\n\tупростят его дальнейшую поддержку.\n</p>\n<p>\n\tВо Vue такие блоки называются <dfn>компонентами</dfn>.\n\tВ крупных приложениях разделение на компоненты\n\tстановится обязательным условием для сохранения\n\tуправляемости процесса разработки\n</p>\n<p>\n\tКомпоненты рекомендовано размещать\n\tв папке <code class=\"path inline\">components</code>. Каждый компонент\n\tв отдельном файле в виде\n\t<a href=\"/ru/javascript/book/supreme/modules/es/intro/\">модуля ES6</a>.\n</p>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/child-components/","content":"\n\t\t\t\t<h1>Создание дочерних компонентов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКомпоненты внутри имеют такую\n\tже структуру, как и основной компонент,\n\tс которым мы работали ранее. То есть\n\tв файле каждого компонента будут\n\tтеги <code class=\"code inline\">script</code> и <code class=\"code inline\">template</code>.\n</p>\n<p>\n\tДавайте для примера сделаем\n\tкомпонент с названием <code class=\"code inline\">User</code>.\n\tРазместим его код в соответствующем\n\tфайле:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n&lt;/script&gt;</code>\n</div>\n<p>\n\tВ объекте <code class=\"code inline\">data</code> компонента можно\n\tразместить какие-то данные:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tname: 'john'\n\t\t\t}\n\t\t}\n\t}\n&lt;/script&gt;</code>\n</div>\n<p>\n\tЭти данные можно вывести в\n\tпредставлении компонента:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ name }}\n&lt;/template&gt;</code>\n</div>\n<p>\n\tДавайте теперь подключим созданный\n\tнами компонент к основному компоненту.\n\tДля этого для начала импортируем\n\tего:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\timport User from './components/User.vue'\n\t\n\texport default {\n\t\t\n\t}\n&lt;/script&gt;</code>\n</div>\n<p>\n\tПропишем его имя в настройке <code class=\"code inline\">components</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;script&gt;\n\timport User from './components/User.vue'\n\t\n\texport default {\n\t\tcomponents: {\n\t\t\tTest\n\t\t}\n\t}\n&lt;/script&gt;</code>\n</div>\n<p>\n\tВ представлении родительского компонента\n\tможно вывести представление дочернего\n\tкомпонента. Для этого нужно написать\n\tтег, имя которого соответствует\n\tимени компонента. Давайте сделаем\n\tэто:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User /&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте компонент <code class=\"code inline\">Employee</code>.\n\t\tПодключите его к основному компоненту.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/passing-data/","content":"\n\t\t\t\t<h1>Передача данных в компонент в JavaScript</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tИз родительского компонента можно\n\tпередавать данные в дочерний компонент.\n\tДля этого в теге компонента следует\n\tнаписать атрибуты с данными.\n\tДавайте, например, передадим\n\tимя и фамилию юзера:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User name=\"john\" surn=\"smit\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tТакие переданные данные называются\n\t<dfn>пропсами</dfn>. Для того, чтобы\n\tкомпонент получил эти данные,\n\tнеобходимо перечислить их имена\n\tв настройке <code class=\"code inline\">props</code>:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">export default {\n\tprops: ['name', 'surn'],\n\tdata() {\n\t\treturn {\n\t\t\t\n\t\t}\n\t}\n}\n&lt;/script&gt;</code>\n</div>\n<p>\n\tТеперь переданные данные можно\n\tвывести в представлении дочернего\n\tкомпонента:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ name }}\n\t{{ surn }}\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в компонент <code class=\"code inline\">Employee</code>.\n\t\tимя, фамилию и возраст работника.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВнутри компонента <code class=\"code inline\">Employee</code>\n\t\tвыведите каждый из его пропсов\n\t\tв отдельном теге.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/passing-any-type/","content":"\n\t\t\t\t<h1>Передача данных любого типа в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВ дочерние компоненты можно передавать\n\tне только строки и числа, но и данные\n\tлюбого типа. Для этого нужно байндить\n\tатрибут через директиву <code class=\"code inline\">v-bind</code>\n\tили ее сокращенную форму.\n</p>\n<p>\n\tДавайте для примера передадим массив:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User :arg=\"[1, 2, 3]\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь передадим объект:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User :arg=\"{a: 1, b: 2, c: 3}\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь передадим логическое значение:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User :arg=\"true\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в дочерний компонент\n\t\tмассив. Выведите элементы этого\n\t\tмассива в виде списка <code class=\"code inline\">ul</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/passing-data-props/","content":"\n\t\t\t\t<h1>Передача свойств объекта data в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно также передавать в дочерние компоненты\n\tсвойства объекта <code class=\"code inline\">data</code>. Давайте\n\tпосмотрим на примере. Пусть у нас\n\tесть следующие свойства:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tname: 'john',\n\t\tsurn: 'smit',\n\t}\n}</code>\n</div>\n<p>\n\tПередадим их значения в компонент:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User :name=\"name\" :surn=\"surn\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПусть в свойствах родителя хранится\n\t\tимя, зарплата и возраст работника.\n\t\tПередайте эти данные в компонент <code class=\"code inline\">Employee</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/props-types/","content":"\n\t\t\t\t<h1>Указание типа пропсов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tЛучше, когда каждый входной параметр\n\tбудет определённого типа. В этих случаях\n\tможно перечислить входные параметры объектом,\n\tгде свойство и значение будут содержать\n\tинформацию об имени входного параметра\n\tи его типе, соответственно:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">props: {\n\ttitle: String,\n\tlikes: Number,\n\tisPublished: Boolean,\n\tcommentIds: Array,\n\tauthor: Object,\n\tcallback: Function,\n\tcontactsPromise: Promise // или любой другой конструктор\n}</code>\n</div>\n<p>\n\tЭто не только документирует компонент,\n\tно также предупреждает программистов\n\tв консоли браузера, если они\n\tпередают неправильный тип.\n</p>\n<p>\n\tДавайте укажем тип пропсов для\n\tнашего компонента с юзером:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">export default {\n\tprops: {\n\t\tname: String,\n\t\tsurn: String\n\t},\n\tdata() {\n\t\treturn {\n\t\t\t\n\t\t}\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tУкажите тип пропсов для\n\t\tкомпонента <code class=\"code inline\">Employee</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/loop-creation/","content":"\n\t\t\t\t<h1>Создание компонентов в цикле в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКомпоненты можно создавать в цикле,\n\tпередавая им соответствующие данные.\n\tДавайте посмотрим, как это делается.\n\tПусть в родительском компоненте\n\tдан следующий массив объектов:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsurn: 'surn1'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsurn: 'surn2'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsurn: 'surn3'\n\t\t\t},\n\t\t],\n\t}\n}</code>\n</div>\n<p>\n\tДавайте переберем этот массив объектов\n\tциклом и в цикле будем создавать\n\tкомпоненты с юзерами:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User v-for=\"user in users\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tУкажем значения атрибута <code class=\"code inline\">key</code>\n\tдля правильной работы цикла:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User v-for=\"user in users\" :key=\"user.id\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПередадим также в компоненты их данные,\n\tимя и фамилию каждого юзера:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User\n\t\tv-for=\"user in users\"\n\t\t:name=\"user.name\"\n\t\t:surn=\"user.surn\"\n\t\t:key=\"user.id\"\n\t/&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tДан следующий массив с данными работников:\n\t</p>\n\t<div class=\"block\" data-file=\"App.vue\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsalary: 100,\n\t\t\t\tage: 30,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsalary: 200,\n\t\t\t\tage: 40,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsalary: 300,\n\t\t\t\tage: 50,\n\t\t\t},\n\t\t],\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\t С помощью цикла создайте на основе\n\t\t этого массива компоненты <code class=\"code inline\">Employee</code>,\n\t\t передав им соответствующие данные.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/unidirectional-data-flow/","content":"\n\t\t\t\t<h1>Однонаправленный поток данных в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tВсе входные параметры образуют одностороннюю\n\tпривязку между дочерним свойством и родительским:\n\tкогда родительское свойство обновляется - оно будет\n\tпередаваться дочернему, но не наоборот.\n\tЭто предотвращает случайное изменение\n\tдочерними компонентами родительского\n\tсостояния, что может затруднить понимание\n\tпотока данных вашего приложения.\n</p>\n<p>\n\tКроме того, каждый раз, когда обновляется родительский\n\tкомпонент, все входные параметры дочернего\n\tкомпонента будут обновлены актуальными\n\tзначениями. Это означает, что <i>вы не должны\n\tпытаться изменять входной параметр внутри\n\tдочернего компонента</i>. Если вы это сделаете,\n\tVue отобразит предупреждение в консоли.\n</p>\n<p>\n\tОбычно встречаются два случая, когда возникает\n\tсоблазн изменять входной параметр. Давайте\n\tих рассмотрим.\n</p>\n\n<h2>Случай первый</h2>\n<p>\n\tВходной параметр используется для передачи\n\tначального значения; дочерний компонент хочет\n\tиспользовать его как локальное свойство данных\n\tв дальнейшем. В этом случае лучше всего определить\n\tлокальное свойство в данных, которое использует\n\tзначение входного параметра в качестве начального:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">props: ['initialCounter'],\ndata() {\n\treturn {\n\t\tcounter: this.initialCounter\n\t};\n}</code>\n</div>\n\n<h2>Случай второй</h2>\n<p>\n\tВходной параметр передаётся как необработанное\n\tзначение, которое необходимо преобразовать.\n\tВ этом случае лучше всего определить вычисляемое\n\tсвойство с использованием входного параметра:\n</p>\n<div class=\"block\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">props: ['size'],\ncomputed: {\n\tnormalizedSize: function() {\n\t\treturn this.size.trim().toLowerCase();\n\t}\n}</code>\n</div>\n\n<h2>Замечание</h2>\n<div class=\"notice\">\n\t<p>\n\t\tОбратите внимание, что объекты и массивы в\n\t\tJavaScript передаются по ссылке, поэтому если\n\t\tвходной параметр массив или объект, то изменения\n\t\tвнутри дочернего компонента этого объекта или\n\t\tмассива будет влиять на состояние родителя и Vue\n\t\tне в состоянии предупредить об этом.\n\t\tСледует избегать любых мутаций входных параметров,\n\t\tв том числе объектов и массивов, так как игнорирование\n\t\tодностороннего связывания данных может привести\n\t\tк нежелательным результатам.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/event-emitting/","content":"\n\t\t\t\t<h1>Испускание событий в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tКак вы уже знаете, данные движутся\n\tот дочерних компонентов к родительским.\n\tДавайте посмотрим теперь, как дочерние\n\tкомпоненты могут общаться с родительскими.\n\tЭто делается с помощью испускания\n\tсобытий. Давайте посмотрим на практике.\n</p>\n<p>\n\tПусть в родительском компоненте\n\tесть некоторый метод:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tfunc() {\n\t\talert('xxx');\n\t}\n}</code>\n</div>\n<p>\n\tПередадим этот метод параметром\n\tв дочерний компонент:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User :func=\"func\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПропишем переданную функцию\n\tв настройке <code class=\"code inline\">props</code>:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">export default {\n\tprops: {\n\t\tfunc: Function,\n\t},\n\tdata() {\n\t\treturn {\n\t\t\t\n\t\t}\n\t}\n}</code>\n</div>\n<p>\n\tДавайте теперь в дочернем компоненте\n\tсделаем кнопку, которая будет\n\tобрабатывать клик по ней:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"handle\"&gt;btn&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tСделаем обработчик клика:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\thandle() {\n\t\t\n\t}\n}</code>\n</div>\n<p>\n\tДавайте теперь в обработчике клика\n\tзаставим вызваться родительскую\n\tфункцию. Для этого испустим\n\tсобытие с помощью функции <code class=\"code inline\">$emit</code>,\n\tее параметром указав имя вызываемой\n\tфункции:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\thandle() {\n\t\t$emit('func');\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте в дочерний компонент\n\t\tдве функции. Сделайте в дочернем\n\t\tкомпоненте две кнопки, каждая\n\t\tиз которых будет вызывать\n\t\tодну из переданных функций.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/events-parameters/","content":"\n\t\t\t\t<h1>Параметры событий в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно передавать параметры в\n\tиспускаемые события. Посмотрим\n\tна примере. Пусть функция родительского\n\tкомпонента принимает параметры:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tfunc(arg1, arg2) {\n\t\tconsole.log(arg1, arg2);\n\t}\n}</code>\n</div>\n<p>\n\tЭти параметры нужно указывать параметрами\n\tфункции <code class=\"code inline\">$emit</code>, после имени события:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\thandle() {\n\t\t$emit('func', 'xxx', 'yyy');\n\t}\n}</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из родительского компонента\n\t\tв дочерний следующий метод:\n\t</p>\n\t<div class=\"block\" data-file=\"App.vue\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tfunc(name) {\n\t\tconsole.log(name);\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tСделайте в компоненте с работником\n\t\tкнопку, по нажатию на которую в\n\t\tродительский компонент будет\n\t\tпередаваться имя работника.\n\t</p>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tПередайте из родительского компонента\n\t\tв дочерний следующий метод:\n\t</p>\n\t<div class=\"block\" data-file=\"App.vue\">\n\t\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tfunc(name, salary) {\n\t\tconsole.log(name, salary);\n\t}\n}</code>\n\t</div>\n\t<p>\n\t\tСделайте в компоненте с работником\n\t\tкнопку, по нажатию на которую в\n\t\tродительский компонент будет\n\t\tпередаваться имя и зарплата работника.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/attribute-emitting/","content":"\n\t\t\t\t<h1>Испускание события в атрибуте в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tМожно испустить событие прямо\n\tв атрибуте обработчика:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"$emit('func')\"&gt;\n\t\tbtn\n\t&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tМожно при этом передать параметры:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;button @click=\"$emit('func', 'xxx', 'yyy')\"&gt;\n\t\tbtn\n\t&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tСделайте кнопку, по клику на которую\n\t\tбудет испускаться некоторое событие.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/reactive-removing/","content":"\n\t\t\t\t<h1>Реактивное удаление компонентов в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте научимся реактивно удалять\n\tдочерние компоненты из списка.\n\tСделаем для этого в каждом дочернем\n\tкомпоненте специальную кнопку.\n\tПо нажатию на эту кнопку будет\n\tиспускаться событие и в родительском\n\tкомпоненте будет удаляться заданный\n\tдочерний компонент по его <code class=\"code inline\">id</code>.\n</p>\n<p>\n\tПриступим к реализации.\n\tПусть в родительском компоненте\n\tдан следующий массив объектов:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tusers: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'name1',\n\t\t\t\tsurn: 'surn1'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'name2',\n\t\t\t\tsurn: 'surn2'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'name3',\n\t\t\t\tsurn: 'surn3'\n\t\t\t},\n\t\t],\n\t}\n}</code>\n</div>\n<p>\n\tНапишем в родительском компоненте\n\tметод удаления юзера по его <code class=\"code inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tremove(id) {\n\t\tthis.users = this.users.filter((user) =&gt; {\n\t\t\tuser.id !== id;\n\t\t})\n\t}\n}</code>\n</div>\n<p>\n\tСоздадим компоненты в цикле, передав\n\tим параметром имя, фамилию, <code class=\"code inline\">id</code>\n\tи метод для удаления:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;User\n\t\tv-for   =\"user in users\"\n\t\t\n\t\t:id     =\"user.id\"\n\t\t:name   =\"user.name\"\n\t\t:surn   =\"user.surn\"\n\t\t:remove =\"remove\"\n\t\t:key    =\"user.id\"\n\t/&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tПропишем входящие данные\n\tв настройке <code class=\"code inline\">props</code>:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">props: {\n\tid:     Number,\n\tname:   String,\n\tsurn:   String,\n\tremove: Function,\n},</code>\n</div>\n<p>\n\tВыведем в представлении компонента\n\tимя и фамилию юзера:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ name }}\n\t{{ surn }}\n&lt;/template&gt;</code>\n</div>\n<p>\n\tА теперь сделаем кнопку, по нажатию\n\tна которую будет испускаться событие\n\tдля удаления. Параметром этого события\n\tбудет передаваться <code class=\"code inline\">id</code> компонента.\n\tРодительский компонент при получении\n\tсобытия удалит данного юзера из массива\n\tобъектов и он реактивно исчезнет\n\tиз списка юзеров.\n</p>\n<p>\n\tИтак, реализуем эту кнопку:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t{{ name }}\n\t{{ surn }}\n\t\n\t&lt;button @click=\"$emit('remove', id)\"&gt;\n\t\tremove\n\t&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tВыведите в цикле компоненты <code class=\"code inline\">Employee</code>.\n\t\tСделайте в каждом компоненте кнопку\n\t\tдля его удаления.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/reactive-editing/","content":"\n\t\t\t\t<h1>Реактивное редактирование данных компонента в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем редактирование\n\tданных наших дочерних компонентов.\n\tДля начала в родительском компоненте\n\tсделаем метод изменения юзера по его <code class=\"code inline\">id</code>:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tchange(id, name, surn) {\n\t\tthis.users = this.users.map((user) =&gt; {\n\t\t\tif (user.id === id) {\n\t\t\t\tuser.name = name;\n\t\t\t\tuser.surn = surn;\n\t\t\t}\n\t\t})\n\t}\n}</code>\n</div>\n<p>\n\tТеперь в дочернем компоненте сделаем\n\tсвойство, которое будет задавать режим\n\tкомпонента, показ или редактирование:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisEdit: false,\n\t}\n}</code>\n</div>\n<p>\n\tСделаем также свойства для поддержки\n\tработы инпутов для редактирования:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisEdit: false,\n\t\tnewName: '',\n\t\tnewSurn: '',\n\t}\n}</code>\n</div>\n<p>\n\tСделаем так, чтобы начальные значения\n\tэтих свойств брались из пропсов:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tisEdit: false,\n\t\tnewName: name,\n\t\tnewSurn: surn,\n\t}\n}</code>\n</div>\n<p>\n\tСделаем метод, который будет\n\tзапускать режим редактирования:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods {\n\tedit() {\n\t\tthis.isEdit = true;\n\t}\n}</code>\n</div>\n<p>\n\tСделаем метод, который будет\n\tсохранять отредактированные\n\tданные, отключая при этом\n\tрежим редактирования:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods {\n\tsave() {\n\t\tthis.isEdit = false;\n\t\t$emit('change', newName, newSurn);\n\t}\n}</code>\n</div>\n<p>\n\tСделаем представление дочернего\n\tкомпонента:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;template v-if=\"isEdit\"&gt;\n\t\t{{ name }}\n\t\t{{ surn }}\n\t\t&lt;button @click=\"edit\"&gt;\n\t\t\tedit\n\t\t&lt;/button&gt;\n\t&lt;/template&gt;\n\t&lt;template v-else&gt;\n\t\t&lt;input v-model=\"newName\"&gt;\n\t\t&lt;input v-model=\"newSurn\"&gt;\n\t\t&lt;button @click=\"save\"&gt;\n\t\t\tsave\n\t\t&lt;/button&gt;\n\t&lt;/template&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте редактирование данных\n\t\tкомпонента <code class=\"code inline\">Employee</code>.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/data-adding/","content":"\n\t\t\t\t<h1>Компонент для добавления данных в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте теперь реализуем форму\n\tдля добавления новых юзеров.\n\tЭту форму мы сделаем в виде\n\tотдельного компонента.\n\tПриступим к реализации.\n\tДля начала в родительском компоненте\n\tсделаем метод для добавления\n\tюзера:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods: {\n\tadd(name, surn) {\n\t\tlet id = this.users.length;\n\t\t\n\t\tthis.users.push({\n\t\t\tid\n\t\t\tname,\n\t\t\tsurn\n\t\t});\n\t}\n}</code>\n</div>\n<p>\n\tВ представлении родительского\n\tкомпонента подключим дочерний:\n</p>\n<div class=\"block\" data-file=\"App.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;UserForm :add=\"add\" /&gt;\n&lt;/template&gt;</code>\n</div>\n<p>\n\tВ дочернем компоненте сделаем\n\tсвойства для контроля инпутов:\n</p>\n<div class=\"block\" data-file=\"components/UserForm.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">data() {\n\treturn {\n\t\tnewName: '',\n\t\tnewSurn: '',\n\t}\n}</code>\n</div>\n<p>\n\tВ дочернем компоненте сделаем\n\tметод для сохранения данных:\n</p>\n<div class=\"block\" data-file=\"components/UserForm.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"javascript\">methods() {\n\tsave() {\n\t\t$emit('add', newName, newSurn);\n\t}\n}</code>\n</div>\n<p>\n\tСделаем представления дочернего компонента:\n</p>\n<div class=\"block\" data-file=\"components/User.vue\">\n\t<code class=\"highlight\" data-module=\"highlight\" data-lang=\"html\">&lt;template&gt;\n\t&lt;input v-model=\"newName\"&gt;\n\t&lt;input v-model=\"newSurn\"&gt;\n\t\n\t&lt;button @click=\"save\"&gt;\n\t\tsave\n\t&lt;/button&gt;\n&lt;/template&gt;</code>\n</div>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте форму для добавления\n\t\tнового работника.\n\t</p>\n</div>\n</div>\t\t\t"},{"url":"/ru/javascript/framework/vue/book/prime/components/project-checklist/","content":"\n\t\t\t\t<h1>Проект Чеклист в Vue</h1>\n\t\t\t\t<div class=\"content\">\n<p>\n\tДавайте реализуем чеклист. Он должен\n\tпредставлять собой список запланированных\n\tдел. В этот список можно добавлять дела.\n\tМожно удалять дела. Можно также помечать\n\tдела сделанными, в этом случае их текст\n\tдолжен стать перечеркнутым. Можно также\n\tредактировать дела.\n</p>\n<div class=\"task\">\n\t<p>\n\t\tРеализуйте описанный проект Чеклист.\n\t</p>\n</div>\n</div>\t\t\t"}]